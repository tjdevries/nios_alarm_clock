
H:/E_325/Lab/nios_alarm_clock/main.elf:     file format elf32-littlenios2
H:/E_325/Lab/nios_alarm_clock/main.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000168

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00001ec0 memsz 0x00001ec0 flags r-x
    LOAD off    0x00002ee0 vaddr 0x00001ee0 paddr 0x00003604 align 2**12
         filesz 0x00001724 memsz 0x00001724 flags rw-
    LOAD off    0x00004d28 vaddr 0x00004d28 paddr 0x00004d28 align 2**12
         filesz 0x00000000 memsz 0x00000148 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000148  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00001cf0  00000168  00000168  00001168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000088  00001e58  00001e58  00002e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001724  00001ee0  00003604  00002ee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000148  00004d28  00004d28  00004d28  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00004604  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000538  00000000  00000000  00004630  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000a52  00000000  00000000  00004b68  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00007cf8  00000000  00000000  000055ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000028b3  00000000  00000000  0000d2b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00006582  00000000  00000000  0000fb65  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000008bc  00000000  00000000  000160e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001880  00000000  00000000  000169a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001a26  00000000  00000000  00018224  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  00019c4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000180  00000000  00000000  00019c70  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0001bb0c  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0001bb0f  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0001bb1b  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0001bb1c  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000008  00000000  00000000  0001bb1d  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000008  00000000  00000000  0001bb25  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000008  00000000  00000000  0001bb2d  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  0001bb35  2**0
                  CONTENTS, READONLY
 25 .jdi          000050cc  00000000  00000000  0001bb40  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     000520ec  00000000  00000000  00020c0c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000168 l    d  .text	00000000 .text
00001e58 l    d  .rodata	00000000 .rodata
00001ee0 l    d  .rwdata	00000000 .rwdata
00004d28 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001a0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hex.c
00000000 l    df *ABS*	00000000 main.c
00000204 l     F .text	00000020 handle_button_interrupts
00000000 l    df *ABS*	00000000 timers.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
000005b8 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00001ef4 l     O .rwdata	00001060 JTAGUART
00002f54 l     O .rwdata	0000002c LCD
00002f80 l     O .rwdata	0000002c KEY
00002fac l     O .rwdata	0000002c SevenSeg30
00002fd8 l     O .rwdata	0000002c SevenSeg74
00003004 l     O .rwdata	0000002c SW
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00000b24 l     F .text	00000054 altera_avalon_jtag_uart_timeout
00000bf0 l     F .text	00000134 altera_avalon_jtag_uart_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
000010c0 l     F .text	0000003c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0000157c l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00001684 l     F .text	00000064 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
000031d8 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00001c8c l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
000001d0 g     F .text	00000034 write_current_time_to_bot_row
00000924 g     F .text	00000050 alt_main
00004d70 g     O .bss	00000100 alt_irq
00003604 g       *ABS*	00000000 __flash_rwdata_start
000011c0 g     F .text	00000010 alt_up_character_lcd_send_cmd
00001ee0 g     O .rwdata	00000011 top_row
00004d5c g     O .bss	00000011 bot_row
000004d4 g     F .text	00000018 timer1_isr
00000000  w      *UND*	00000000 __errno
000010fc g     F .text	0000001c get_DDRAM_addr
00000000 g     F .entry	0000001c __reset
00004d38 g     O .bss	00000004 edge_capture
00000020 g       *ABS*	00000000 __flash_exceptions_start
00004d58 g     O .bss	00000004 errno
00004d48 g     O .bss	00000004 alt_argv
0000b5d8 g       *ABS*	00000000 _gp
00003058 g     O .rwdata	00000180 alt_fd_list
000004ec g     F .text	0000000c stop_timer_0
000004c8 g     F .text	0000000c stop_timer_1
000015f4 g     F .text	00000070 alt_find_dev
00000704 g     F .text	000000a0 memcpy
00001190 g     F .text	00000020 alt_up_character_lcd_write_fd
000016e8 g     F .text	00000098 alt_io_redirect
00000564 g     F .text	00000054 init_timer_0
000001a4 g     F .text	00000014 hex_off
000002c8 g     F .text	0000005c handle_key_press
00000d98 g     F .text	00000168 altera_avalon_jtag_uart_read
000006f4 g     F .text	00000008 __udivsi3
00001b30 g     F .text	0000003c alt_icache_flush
000035ec g     O .rwdata	00000004 alt_max_fd
000007a4 g     F .text	000000bc alt_irq_register
00003600 g     O .rwdata	00000004 _global_impure_ptr
00004e70 g       *ABS*	00000000 __bss_end
00001954 g     F .text	000000ac alt_tick
00001920 g     F .text	00000034 alt_alarm_stop
00004d40 g     O .bss	00000004 alt_irq_active
000000ec g     F .exceptions	0000007c alt_irq_handler
00003030 g     O .rwdata	00000028 alt_dev_null
00004d3c g     O .bss	00000004 char_lcd_dev
000011d0 g     F .text	0000001c alt_up_character_lcd_cursor_blink_on
000001b8 g     F .text	00000018 hex_on
00001578 g     F .text	00000004 alt_dcache_flush_all
00003604 g       *ABS*	00000000 __ram_rwdata_end
00000510 g     F .text	00000054 init_timer_1
000035e4 g     O .rwdata	00000008 alt_dev_list
00001ee0 g       *ABS*	00000000 __ram_rodata_end
000006fc g     F .text	00000008 __umodsi3
00004e70 g       *ABS*	00000000 end
00000b78 g     F .text	00000078 altera_avalon_jtag_uart_init
00006000 g       *ABS*	00000000 __alt_stack_pointer
0000107c g     F .text	00000044 alt_avalon_timer_sc_init
00000f00 g     F .text	0000017c altera_avalon_jtag_uart_write
00001164 g     F .text	0000002c alt_up_character_lcd_write
00001c90 g     F .text	000001b0 __call_exitprocs
00000168 g     F .text	0000003c _start
00004d50 g     O .bss	00000004 _alt_tick_rate
00004d54 g     O .bss	00000004 _alt_nticks
00000994 g     F .text	000000c0 alt_sys_init
00001274 g     F .text	00000090 alt_up_character_lcd_shift_display
00001208 g     F .text	0000006c alt_up_character_lcd_erase_pos
00000aec g     F .text	00000038 altera_avalon_jtag_uart_close
00001ee0 g       *ABS*	00000000 __ram_rwdata_start
00001e58 g       *ABS*	00000000 __ram_rodata_start
00000ac4 g     F .text	00000028 altera_avalon_jtag_uart_read_fd
00001ac4 g     F .text	0000006c alt_get_fd
00001ba4 g     F .text	00000074 memcmp
00000a74 g     F .text	00000028 altera_avalon_jtag_uart_close_fd
00004e70 g       *ABS*	00000000 __alt_stack_base
00000a54 g     F .text	00000020 altera_avalon_jtag_uart_ioctl_fd
00004d30 g     O .bss	00000004 tenths
00001a08 g     F .text	000000bc alt_find_file
00001584 g     F .text	00000070 alt_dev_llist_insert
00004d28 g       *ABS*	00000000 __bss_start
00000324 g     F .text	000001a4 main
00000000 g       *ABS*	00000000 __alt_mem_RAM
00004d4c g     O .bss	00000004 alt_envp
00000a9c g     F .text	00000028 altera_avalon_jtag_uart_write_fd
00001304 g     F .text	00000090 alt_up_character_lcd_shift_cursor
000035f0 g     O .rwdata	00000004 alt_errno
00004d2c g     O .bss	00000004 seconds
00000224 g     F .text	000000a4 reset_display
00000634 g     F .text	00000060 __divsi3
000013e8 g     F .text	00000020 alt_up_character_lcd_open_dev
000011b0 g     F .text	00000010 alt_up_character_lcd_init
00001e58 g       *ABS*	00000000 __flash_rodata_start
00000974 g     F .text	00000020 alt_irq_init
000018fc g     F .text	00000024 alt_release_fd
000011ec g     F .text	0000001c alt_up_character_lcd_cursor_off
000035fc g     O .rwdata	00000004 _impure_ptr
00004d44 g     O .bss	00000004 alt_argc
00000020 g       .exceptions	00000000 alt_irq_entry
000035dc g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00003604 g       *ABS*	00000000 _edata
00004e70 g       *ABS*	00000000 _end
00000168 g       *ABS*	00000000 __ram_exceptions_end
00000d24 g     F .text	00000074 altera_avalon_jtag_uart_ioctl
00001a00 g     F .text	00000008 altera_nios2_qsys_irq_init
00001b6c g     F .text	00000038 exit
00000694 g     F .text	00000060 __modsi3
00006000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00001118 g     F .text	0000004c alt_up_character_lcd_string
00001e40 g     F .text	00000014 _exit
00001408 g     F .text	00000094 alt_alarm_start
00004d28 g     O .bss	00000004 minutes
00001c18 g     F .text	00000074 strlen
00001780 g     F .text	0000017c open
000004f8 g     F .text	00000018 timer0_isr
00001664 g     F .text	00000020 alt_icache_flush_all
00001394 g     F .text	00000054 alt_up_character_lcd_set_cursor_pos
000035d8 g     O .rwdata	00000004 alt_priority_mask
000035f4 g     O .rwdata	00000008 alt_alarm_list
0000149c g     F .text	000000dc close
00000860 g     F .text	000000c4 alt_load
00004d34 g     O .bss	00000004 half_second
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08405a14 	ori	at,at,360
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defffe04 	addi	sp,sp,-8
  f0:	dfc00115 	stw	ra,4(sp)
  f4:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  f8:	000d313a 	rdctl	r6,ipending
  fc:	04000034 	movhi	r16,0
 100:	84135c04 	addi	r16,r16,19824
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 104:	3080004c 	andi	r2,r6,1
 108:	1005003a 	cmpeq	r2,r2,zero
 10c:	10000a1e 	bne	r2,zero,138 <alt_irq_handler+0x4c>
 110:	000b883a 	mov	r5,zero
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 114:	280490fa 	slli	r2,r5,3
 118:	1405883a 	add	r2,r2,r16
 11c:	10c00017 	ldw	r3,0(r2)
 120:	11000117 	ldw	r4,4(r2)
 124:	183ee83a 	callr	r3
 128:	0005313a 	rdctl	r2,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
 12c:	10000a26 	beq	r2,zero,158 <alt_irq_handler+0x6c>
 130:	100d883a 	mov	r6,r2
 134:	003ff306 	br	104 <alt_irq_handler+0x18>
 138:	00c00044 	movi	r3,1
 13c:	000b883a 	mov	r5,zero
 140:	1809883a 	mov	r4,r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 144:	18c7883a 	add	r3,r3,r3
      i++;
 148:	290b883a 	add	r5,r5,r4
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 14c:	30c4703a 	and	r2,r6,r3
 150:	103ff01e 	bne	r2,zero,114 <alt_irq_handler+0x28>
 154:	003ffb06 	br	144 <alt_irq_handler+0x58>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 158:	dfc00117 	ldw	ra,4(sp)
 15c:	dc000017 	ldw	r16,0(sp)
 160:	dec00204 	addi	sp,sp,8
 164:	f800283a 	ret

Disassembly of section .text:

00000168 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     168:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
     16c:	ded80014 	ori	sp,sp,24576

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     170:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
     174:	d6ad7614 	ori	gp,gp,46552
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     178:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
     17c:	10934a14 	ori	r2,r2,19752

    movhi r3, %hi(__bss_end)
     180:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
     184:	18d39c14 	ori	r3,r3,20080

    beq r2, r3, 1f
     188:	10c00326 	beq	r2,r3,198 <_start+0x30>

0:
    stw zero, (r2)
     18c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     190:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     194:	10fffd36 	bltu	r2,r3,18c <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     198:	00008600 	call	860 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     19c:	00009240 	call	924 <alt_main>

000001a0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1a0:	003fff06 	br	1a0 <alt_after_alt_main>

000001a4 <hex_off>:
	IOWR_ALTERA_AVALON_PIO_DATA(SEVENSEG30_BASE, 0xFFFFFFFF);
	IOWR_ALTERA_AVALON_PIO_DATA(SEVENSEG74_BASE, 0xFFFFFFFF);
}

void hex_off() {
	IOWR_ALTERA_AVALON_PIO_DATA(SEVENSEG30_BASE, 0x00000000);
     1a4:	00ac0014 	movui	r2,45056
     1a8:	10000035 	stwio	zero,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(SEVENSEG74_BASE, 0x00000000);
     1ac:	00b00014 	movui	r2,49152
     1b0:	10000035 	stwio	zero,0(r2)
     1b4:	f800283a 	ret

000001b8 <hex_on>:
#include "hex.h"

void hex_on() {
	IOWR_ALTERA_AVALON_PIO_DATA(SEVENSEG30_BASE, 0xFFFFFFFF);
     1b8:	00bfffc4 	movi	r2,-1
     1bc:	00ec0014 	movui	r3,45056
     1c0:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(SEVENSEG74_BASE, 0xFFFFFFFF);
     1c4:	00f00014 	movui	r3,49152
     1c8:	18800035 	stwio	r2,0(r3)
}
     1cc:	f800283a 	ret

000001d0 <write_current_time_to_bot_row>:
	seconds = 0;
	tenths = 0;
}

// For the Key 2 press
void write_current_time_to_bot_row() {
     1d0:	deffff04 	addi	sp,sp,-4
     1d4:	dfc00015 	stw	ra,0(sp)
	alt_up_character_lcd_set_cursor_pos(char_lcd_dev, 0, 1);
     1d8:	d125d917 	ldw	r4,-26780(gp)
     1dc:	000b883a 	mov	r5,zero
     1e0:	01800044 	movi	r6,1
     1e4:	00013940 	call	1394 <alt_up_character_lcd_set_cursor_pos>
	alt_up_character_lcd_string(char_lcd_dev, top_row);
     1e8:	d125d917 	ldw	r4,-26780(gp)
     1ec:	01400034 	movhi	r5,0
     1f0:	2947b804 	addi	r5,r5,7904
     1f4:	00011180 	call	1118 <alt_up_character_lcd_string>
}
     1f8:	dfc00017 	ldw	ra,0(sp)
     1fc:	dec00104 	addi	sp,sp,4
     200:	f800283a 	ret

00000204 <handle_button_interrupts>:
	volatile int* edge_capture_ptr = (volatile int*) context;
	/*
	* Read the edge capture register on the button PIO.
	* Store value.
	*/
	*edge_capture_ptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(KEY_BASE);
     204:	00f40314 	movui	r3,53260
     208:	18800037 	ldwio	r2,0(r3)
     20c:	20800015 	stw	r2,0(r4)
	/* Write to the edge capture register to reset it. */
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEY_BASE, 0);
     210:	18000035 	stwio	zero,0(r3)
	/* reset interrupt capability for the Button PIO. */
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(KEY_BASE, 0xf);
     214:	00c003c4 	movi	r3,15
     218:	00b40214 	movui	r2,53256
     21c:	10c00035 	stwio	r3,0(r2)
}
     220:	f800283a 	ret

00000224 <reset_display>:
char bot_row[17];

/* Functions used for updating displays */

// For the Key 1 press
void reset_display() {
     224:	defffd04 	addi	sp,sp,-12
     228:	dfc00215 	stw	ra,8(sp)
     22c:	dc400115 	stw	r17,4(sp)
     230:	dc000015 	stw	r16,0(sp)
	// Clear the top row
	strcpy(top_row, "    12:00:00    ");
     234:	04000034 	movhi	r16,0
     238:	8407b804 	addi	r16,r16,7904
     23c:	04400444 	movi	r17,17
     240:	8009883a 	mov	r4,r16
     244:	01400034 	movhi	r5,0
     248:	29479604 	addi	r5,r5,7768
     24c:	880d883a 	mov	r6,r17
     250:	00007040 	call	704 <memcpy>
	alt_up_character_lcd_set_cursor_pos(char_lcd_dev, 0, 0);
     254:	d125d917 	ldw	r4,-26780(gp)
     258:	000b883a 	mov	r5,zero
     25c:	000d883a 	mov	r6,zero
     260:	00013940 	call	1394 <alt_up_character_lcd_set_cursor_pos>
	alt_up_character_lcd_string(char_lcd_dev, top_row);
     264:	d125d917 	ldw	r4,-26780(gp)
     268:	800b883a 	mov	r5,r16
     26c:	00011180 	call	1118 <alt_up_character_lcd_string>
	
	// Clear the bottom row
	strcpy(bot_row, "                ");
     270:	04000034 	movhi	r16,0
     274:	84135704 	addi	r16,r16,19804
     278:	8009883a 	mov	r4,r16
     27c:	01400034 	movhi	r5,0
     280:	29479b04 	addi	r5,r5,7788
     284:	880d883a 	mov	r6,r17
     288:	00007040 	call	704 <memcpy>
	alt_up_character_lcd_set_cursor_pos(char_lcd_dev, 0, 1);
     28c:	d125d917 	ldw	r4,-26780(gp)
     290:	000b883a 	mov	r5,zero
     294:	01800044 	movi	r6,1
     298:	00013940 	call	1394 <alt_up_character_lcd_set_cursor_pos>
	alt_up_character_lcd_string(char_lcd_dev, bot_row);
     29c:	d125d917 	ldw	r4,-26780(gp)
     2a0:	800b883a 	mov	r5,r16
     2a4:	00011180 	call	1118 <alt_up_character_lcd_string>
	
	// Reset our counters
	minutes = 0;
     2a8:	d025d415 	stw	zero,-26800(gp)
	seconds = 0;
     2ac:	d025d515 	stw	zero,-26796(gp)
	tenths = 0;
     2b0:	d025d615 	stw	zero,-26792(gp)
}
     2b4:	dfc00217 	ldw	ra,8(sp)
     2b8:	dc400117 	ldw	r17,4(sp)
     2bc:	dc000017 	ldw	r16,0(sp)
     2c0:	dec00304 	addi	sp,sp,12
     2c4:	f800283a 	ret

000002c8 <handle_key_press>:
						edge_capture_ptr,
						handle_button_interrupts );
}

/* Our function that handles the key presses */
void handle_key_press() {
     2c8:	deffff04 	addi	sp,sp,-4
     2cc:	dfc00015 	stw	ra,0(sp)
	// Key 1
	if (edge_capture == 2) {
     2d0:	d0e5d817 	ldw	r3,-26784(gp)
     2d4:	00800084 	movi	r2,2
     2d8:	1880021e 	bne	r3,r2,2e4 <handle_key_press+0x1c>
		reset_display();
     2dc:	00002240 	call	224 <reset_display>
     2e0:	00000c06 	br	314 <handle_key_press+0x4c>
	}
	// Key 2
	else if (edge_capture == 4) {
     2e4:	d0e5d817 	ldw	r3,-26784(gp)
     2e8:	00800104 	movi	r2,4
     2ec:	1880021e 	bne	r3,r2,2f8 <handle_key_press+0x30>
		write_current_time_to_bot_row();
     2f0:	00001d00 	call	1d0 <write_current_time_to_bot_row>
     2f4:	00000706 	br	314 <handle_key_press+0x4c>
	}
	// Key 3
	else if (edge_capture == 8) {
     2f8:	d0e5d817 	ldw	r3,-26784(gp)
     2fc:	00800204 	movi	r2,8
     300:	1880041e 	bne	r3,r2,314 <handle_key_press+0x4c>
		half_second = 1;
     304:	00800044 	movi	r2,1
     308:	d0a5d715 	stw	r2,-26788(gp)
		init_timer_1(&half_second);
     30c:	d125d704 	addi	r4,gp,-26788
     310:	00005100 	call	510 <init_timer_1>
	}
	
	// Reset our edge capture back to 0
	edge_capture = 0;
     314:	d025d815 	stw	zero,-26784(gp)
}
     318:	dfc00017 	ldw	ra,0(sp)
     31c:	dec00104 	addi	sp,sp,4
     320:	f800283a 	ret

00000324 <main>:

int main(void)
{
     324:	defffb04 	addi	sp,sp,-20
     328:	dfc00415 	stw	ra,16(sp)
     32c:	dcc00315 	stw	r19,12(sp)
     330:	dc800215 	stw	r18,8(sp)
     334:	dc400115 	stw	r17,4(sp)
     338:	dc000015 	stw	r16,0(sp)
	// open the Character LCD port
	char_lcd_dev = alt_up_character_lcd_open_dev ("/dev/LCD");
     33c:	01000034 	movhi	r4,0
     340:	2107a004 	addi	r4,r4,7808
     344:	00013e80 	call	13e8 <alt_up_character_lcd_open_dev>
     348:	1009883a 	mov	r4,r2
     34c:	d0a5d915 	stw	r2,-26780(gp)
	/* Initialize the character display */
	alt_up_character_lcd_init(char_lcd_dev);
     350:	00011b00 	call	11b0 <alt_up_character_lcd_init>
	
	
	// Initialize the Timers
	init_timer_0(&tenths);
     354:	d125d604 	addi	r4,gp,-26792
     358:	00005640 	call	564 <init_timer_0>
{
	/* Recast the edge_capture pointer to match the
	alt_irq_register() function prototype. */
	void* edge_capture_ptr = (void*) &edge_capture;
	/* Enable all 4 button interrupts. */
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(KEY_BASE, 0xf);
     35c:	00c003c4 	movi	r3,15
     360:	00b40214 	movui	r2,53256
     364:	10c00035 	stwio	r3,0(r2)
	/* Reset the edge capture register. */
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEY_BASE, 0x0);
     368:	00b40314 	movui	r2,53260
     36c:	10000035 	stwio	zero,0(r2)
	/* Register the ISR. */
	alt_irq_register( 	KEY_IRQ,
     370:	010000c4 	movi	r4,3
     374:	d165d804 	addi	r5,gp,-26784
     378:	01800034 	movhi	r6,0
     37c:	31808104 	addi	r6,r6,516
     380:	00007a40 	call	7a4 <alt_irq_register>
     384:	0021883a 	mov	r16,zero
     388:	04400034 	movhi	r17,0
     38c:	8c47b804 	addi	r17,r17,7904
     390:	04800284 	movi	r18,10
     394:	04c00c04 	movi	r19,48
	while(1)  {
		// check the state of the context integer updated by various ISR functions	
		// Act accordingly, which means
		
		// Handle if a key was pressed
		if (edge_capture) {
     398:	d0a5d817 	ldw	r2,-26784(gp)
     39c:	10000126 	beq	r2,zero,3a4 <main+0x80>
			handle_key_press();
     3a0:	00002c80 	call	2c8 <handle_key_press>
		}
		
		// Flash on and off our displays
		if (half_second) {
     3a4:	d0a5d717 	ldw	r2,-26788(gp)
     3a8:	10000d26 	beq	r2,zero,3e0 <main+0xbc>
			// Odd numbers
			if (half_second % 2) {
     3ac:	d0a5d717 	ldw	r2,-26788(gp)
     3b0:	1080004c 	andi	r2,r2,1
     3b4:	1005003a 	cmpeq	r2,r2,zero
     3b8:	1000021e 	bne	r2,zero,3c4 <main+0xa0>
				// Turn hex on
				hex_on();
     3bc:	00001b80 	call	1b8 <hex_on>
     3c0:	00000106 	br	3c8 <main+0xa4>
			}
			else {
				// Turn hex off
				hex_off();
     3c4:	00001a40 	call	1a4 <hex_off>
			}
			
			if (half_second == 7) {
     3c8:	d0e5d717 	ldw	r3,-26788(gp)
     3cc:	008001c4 	movi	r2,7
     3d0:	1880031e 	bne	r3,r2,3e0 <main+0xbc>
				half_second = 0;
     3d4:	d025d715 	stw	zero,-26788(gp)
				// Turn hex off
				hex_off();
     3d8:	00001a40 	call	1a4 <hex_off>
				// Turn off timer.
				stop_timer_1();
     3dc:	00004c80 	call	4c8 <stop_timer_1>
			}
		}
		
		// Update the clock
		if (tenths != old_tenths) {
     3e0:	d0a5d617 	ldw	r2,-26792(gp)
     3e4:	80bfec26 	beq	r16,r2,398 <main+0x74>
			// Increment our seconds
			if (tenths >= 10) {
     3e8:	d0e5d617 	ldw	r3,-26792(gp)
     3ec:	00800244 	movi	r2,9
     3f0:	10c0290e 	bge	r2,r3,498 <main+0x174>
				seconds++;
     3f4:	d0a5d517 	ldw	r2,-26796(gp)
     3f8:	00c00044 	movi	r3,1
     3fc:	10c5883a 	add	r2,r2,r3
     400:	d0a5d515 	stw	r2,-26796(gp)
				if (seconds == 60) {
     404:	d165d517 	ldw	r5,-26796(gp)
     408:	00800f04 	movi	r2,60
     40c:	2880131e 	bne	r5,r2,45c <main+0x138>
					minutes = (minutes + 1) % 60;
     410:	d125d417 	ldw	r4,-26800(gp)
     414:	20c9883a 	add	r4,r4,r3
     418:	00006940 	call	694 <__modsi3>
     41c:	d0a5d415 	stw	r2,-26800(gp)
					seconds = 0;
     420:	d025d515 	stw	zero,-26796(gp)
					top_row[0] = '0' + (minutes - (minutes % 10)) / 10;
     424:	d425d417 	ldw	r16,-26800(gp)
     428:	d125d417 	ldw	r4,-26800(gp)
     42c:	900b883a 	mov	r5,r18
     430:	00006940 	call	694 <__modsi3>
     434:	8089c83a 	sub	r4,r16,r2
     438:	900b883a 	mov	r5,r18
     43c:	00006340 	call	634 <__divsi3>
     440:	14c5883a 	add	r2,r2,r19
     444:	88800005 	stb	r2,0(r17)
					top_row[1] = '0' + minutes % 10;
     448:	d125d417 	ldw	r4,-26800(gp)
     44c:	900b883a 	mov	r5,r18
     450:	00006940 	call	694 <__modsi3>
     454:	14c5883a 	add	r2,r2,r19
     458:	88800045 	stb	r2,1(r17)
				}
				top_row[3] = '0' + (seconds - (seconds % 10)) / 10;
     45c:	d425d517 	ldw	r16,-26796(gp)
     460:	d125d517 	ldw	r4,-26796(gp)
     464:	900b883a 	mov	r5,r18
     468:	00006940 	call	694 <__modsi3>
     46c:	8089c83a 	sub	r4,r16,r2
     470:	900b883a 	mov	r5,r18
     474:	00006340 	call	634 <__divsi3>
     478:	14c5883a 	add	r2,r2,r19
     47c:	888000c5 	stb	r2,3(r17)
				top_row[4] = '0' + seconds % 10;
     480:	d125d517 	ldw	r4,-26796(gp)
     484:	900b883a 	mov	r5,r18
     488:	00006940 	call	694 <__modsi3>
     48c:	14c5883a 	add	r2,r2,r19
     490:	88800105 	stb	r2,4(r17)
				tenths = 0;
     494:	d025d615 	stw	zero,-26792(gp)
			}
			old_tenths = tenths;
     498:	d425d617 	ldw	r16,-26792(gp)
			top_row[6] = '0' + tenths;
     49c:	d0a5d617 	ldw	r2,-26792(gp)
     4a0:	10800c04 	addi	r2,r2,48
     4a4:	88800185 	stb	r2,6(r17)
			alt_up_character_lcd_set_cursor_pos(char_lcd_dev, 0, 0);
     4a8:	d125d917 	ldw	r4,-26780(gp)
     4ac:	000b883a 	mov	r5,zero
     4b0:	000d883a 	mov	r6,zero
     4b4:	00013940 	call	1394 <alt_up_character_lcd_set_cursor_pos>
			alt_up_character_lcd_string(char_lcd_dev, top_row);
     4b8:	d125d917 	ldw	r4,-26780(gp)
     4bc:	880b883a 	mov	r5,r17
     4c0:	00011180 	call	1118 <alt_up_character_lcd_string>
     4c4:	003fb406 	br	398 <main+0x74>

000004c8 <stop_timer_1>:
	// Register the ISR. 
	alt_irq_register(TIMER_1_IRQ, half_second_ptr, timer1_isr);
}

void stop_timer_1() {
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_1_BASE, 0x0);
     4c8:	00a40114 	movui	r2,36868
     4cc:	10000035 	stwio	zero,0(r2)
     4d0:	f800283a 	ret

000004d4 <timer1_isr>:
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, 0x0);
}

void timer1_isr(void * context, alt_32 id) {
	volatile int* contextTimerPtr = (volatile int*) context;
	*contextTimerPtr = *contextTimerPtr + 1;
     4d4:	20800017 	ldw	r2,0(r4)
     4d8:	10800044 	addi	r2,r2,1
     4dc:	20800015 	stw	r2,0(r4)
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_1_BASE, 0x0);
     4e0:	00a40014 	movui	r2,36864
     4e4:	10000035 	stwio	zero,0(r2)
}
     4e8:	f800283a 	ret

000004ec <stop_timer_0>:
	// Register the ISR. 
	alt_irq_register(TIMER_0_IRQ, tenths_ptr, timer0_isr);
}

void stop_timer_0() {
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, 0x0);
     4ec:	00a00114 	movui	r2,32772
     4f0:	10000035 	stwio	zero,0(r2)
}
     4f4:	f800283a 	ret

000004f8 <timer0_isr>:
#include "timers.h"

/*		Timer setups 		*/
void timer0_isr(void * context, alt_32 id) {
	volatile int* contextTimerPtr = (volatile int*) context;
	*contextTimerPtr = *contextTimerPtr + 1;
     4f8:	20800017 	ldw	r2,0(r4)
     4fc:	10800044 	addi	r2,r2,1
     500:	20800015 	stw	r2,0(r4)
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE, 0x0);
     504:	00a00014 	movui	r2,32768
     508:	10000035 	stwio	zero,0(r2)
}
     50c:	f800283a 	ret

00000510 <init_timer_1>:
	volatile int* contextTimerPtr = (volatile int*) context;
	*contextTimerPtr = *contextTimerPtr + 1;
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_1_BASE, 0x0);
}

void init_timer_1(volatile int *half_second_int_ptr) {
     510:	deffff04 	addi	sp,sp,-4
     514:	dfc00015 	stw	ra,0(sp)
     518:	200b883a 	mov	r5,r4
	// Timer base is TIMER_1_BASE
	// Timer clock is 50,000,000 so to increment a counter every half second, move it every 50,000,000/2 ticks.
	// high 0x017D
	// low 0x7840
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_1_BASE, 0);
     51c:	00a40014 	movui	r2,36864
     520:	10000035 	stwio	zero,0(r2)
	// Used to use ALTERA_AVALON_TIMER_CONTROL_START_MSK, not sure which I need	
	IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_1_BASE, 0x017D);
     524:	00c05f44 	movi	r3,381
     528:	00a40314 	movui	r2,36876
     52c:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_1_BASE, 0x7840);
     530:	00de1004 	movi	r3,30784
     534:	00a40214 	movui	r2,36872
     538:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_1_BASE, 0x7);
     53c:	00c001c4 	movi	r3,7
     540:	00a40114 	movui	r2,36868
     544:	10c00035 	stwio	r3,0(r2)
	
	void* half_second_ptr = (void *) half_second_int_ptr;
	// Register the ISR. 
	alt_irq_register(TIMER_1_IRQ, half_second_ptr, timer1_isr);
     548:	01000044 	movi	r4,1
     54c:	01800034 	movhi	r6,0
     550:	31813504 	addi	r6,r6,1236
     554:	00007a40 	call	7a4 <alt_irq_register>
}
     558:	dfc00017 	ldw	ra,0(sp)
     55c:	dec00104 	addi	sp,sp,4
     560:	f800283a 	ret

00000564 <init_timer_0>:
	volatile int* contextTimerPtr = (volatile int*) context;
	*contextTimerPtr = *contextTimerPtr + 1;
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE, 0x0);
}

void init_timer_0(volatile int *tenths_int_ptr) {
     564:	deffff04 	addi	sp,sp,-4
     568:	dfc00015 	stw	ra,0(sp)
     56c:	200b883a 	mov	r5,r4
	// Timer base is TIMER_0_BASE
	// Timer clock is 50,000,000 so to increment a counter, move it every 5,000,000 ticks.
	// high 0x004C
	// low 0x4B40
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE, 0);
     570:	00a00014 	movui	r2,32768
     574:	10000035 	stwio	zero,0(r2)
	// Used to use ALTERA_AVALON_TIMER_CONTROL_START_MSK, not sure which I need	
	IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_0_BASE, 0x004C);
     578:	00c01304 	movi	r3,76
     57c:	00a00314 	movui	r2,32780
     580:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_0_BASE, 0x4B40);
     584:	00d2d004 	movi	r3,19264
     588:	00a00214 	movui	r2,32776
     58c:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, 0x7);
     590:	00c001c4 	movi	r3,7
     594:	00a00114 	movui	r2,32772
     598:	10c00035 	stwio	r3,0(r2)
	
	void* tenths_ptr = (void *) tenths_int_ptr;
	// Register the ISR. 
	alt_irq_register(TIMER_0_IRQ, tenths_ptr, timer0_isr);
     59c:	0009883a 	mov	r4,zero
     5a0:	01800034 	movhi	r6,0
     5a4:	31813e04 	addi	r6,r6,1272
     5a8:	00007a40 	call	7a4 <alt_irq_register>
}
     5ac:	dfc00017 	ldw	ra,0(sp)
     5b0:	dec00104 	addi	sp,sp,4
     5b4:	f800283a 	ret

000005b8 <udivmodsi4>:
     5b8:	29001b2e 	bgeu	r5,r4,628 <udivmodsi4+0x70>
     5bc:	28001a16 	blt	r5,zero,628 <udivmodsi4+0x70>
     5c0:	00800044 	movi	r2,1
     5c4:	0007883a 	mov	r3,zero
     5c8:	01c007c4 	movi	r7,31
     5cc:	00000306 	br	5dc <udivmodsi4+0x24>
     5d0:	19c01326 	beq	r3,r7,620 <udivmodsi4+0x68>
     5d4:	18c00044 	addi	r3,r3,1
     5d8:	28000416 	blt	r5,zero,5ec <udivmodsi4+0x34>
     5dc:	294b883a 	add	r5,r5,r5
     5e0:	1085883a 	add	r2,r2,r2
     5e4:	293ffa36 	bltu	r5,r4,5d0 <udivmodsi4+0x18>
     5e8:	10000d26 	beq	r2,zero,620 <udivmodsi4+0x68>
     5ec:	0007883a 	mov	r3,zero
     5f0:	21400236 	bltu	r4,r5,5fc <udivmodsi4+0x44>
     5f4:	2149c83a 	sub	r4,r4,r5
     5f8:	1886b03a 	or	r3,r3,r2
     5fc:	1004d07a 	srli	r2,r2,1
     600:	280ad07a 	srli	r5,r5,1
     604:	103ffa1e 	bne	r2,zero,5f0 <udivmodsi4+0x38>
     608:	30000226 	beq	r6,zero,614 <udivmodsi4+0x5c>
     60c:	2005883a 	mov	r2,r4
     610:	f800283a 	ret
     614:	1809883a 	mov	r4,r3
     618:	2005883a 	mov	r2,r4
     61c:	f800283a 	ret
     620:	0007883a 	mov	r3,zero
     624:	003ff806 	br	608 <udivmodsi4+0x50>
     628:	00800044 	movi	r2,1
     62c:	0007883a 	mov	r3,zero
     630:	003fef06 	br	5f0 <udivmodsi4+0x38>

00000634 <__divsi3>:
     634:	defffe04 	addi	sp,sp,-8
     638:	dc000015 	stw	r16,0(sp)
     63c:	dfc00115 	stw	ra,4(sp)
     640:	0021883a 	mov	r16,zero
     644:	20000c16 	blt	r4,zero,678 <__divsi3+0x44>
     648:	000d883a 	mov	r6,zero
     64c:	28000e16 	blt	r5,zero,688 <__divsi3+0x54>
     650:	00005b80 	call	5b8 <udivmodsi4>
     654:	1007883a 	mov	r3,r2
     658:	8005003a 	cmpeq	r2,r16,zero
     65c:	1000011e 	bne	r2,zero,664 <__divsi3+0x30>
     660:	00c7c83a 	sub	r3,zero,r3
     664:	1805883a 	mov	r2,r3
     668:	dfc00117 	ldw	ra,4(sp)
     66c:	dc000017 	ldw	r16,0(sp)
     670:	dec00204 	addi	sp,sp,8
     674:	f800283a 	ret
     678:	0109c83a 	sub	r4,zero,r4
     67c:	04000044 	movi	r16,1
     680:	000d883a 	mov	r6,zero
     684:	283ff20e 	bge	r5,zero,650 <__divsi3+0x1c>
     688:	014bc83a 	sub	r5,zero,r5
     68c:	8021003a 	cmpeq	r16,r16,zero
     690:	003fef06 	br	650 <__divsi3+0x1c>

00000694 <__modsi3>:
     694:	deffff04 	addi	sp,sp,-4
     698:	dfc00015 	stw	ra,0(sp)
     69c:	01800044 	movi	r6,1
     6a0:	2807883a 	mov	r3,r5
     6a4:	20000416 	blt	r4,zero,6b8 <__modsi3+0x24>
     6a8:	28000c16 	blt	r5,zero,6dc <__modsi3+0x48>
     6ac:	dfc00017 	ldw	ra,0(sp)
     6b0:	dec00104 	addi	sp,sp,4
     6b4:	00005b81 	jmpi	5b8 <udivmodsi4>
     6b8:	0109c83a 	sub	r4,zero,r4
     6bc:	28000b16 	blt	r5,zero,6ec <__modsi3+0x58>
     6c0:	180b883a 	mov	r5,r3
     6c4:	01800044 	movi	r6,1
     6c8:	00005b80 	call	5b8 <udivmodsi4>
     6cc:	0085c83a 	sub	r2,zero,r2
     6d0:	dfc00017 	ldw	ra,0(sp)
     6d4:	dec00104 	addi	sp,sp,4
     6d8:	f800283a 	ret
     6dc:	014bc83a 	sub	r5,zero,r5
     6e0:	dfc00017 	ldw	ra,0(sp)
     6e4:	dec00104 	addi	sp,sp,4
     6e8:	00005b81 	jmpi	5b8 <udivmodsi4>
     6ec:	0147c83a 	sub	r3,zero,r5
     6f0:	003ff306 	br	6c0 <__modsi3+0x2c>

000006f4 <__udivsi3>:
     6f4:	000d883a 	mov	r6,zero
     6f8:	00005b81 	jmpi	5b8 <udivmodsi4>

000006fc <__umodsi3>:
     6fc:	01800044 	movi	r6,1
     700:	00005b81 	jmpi	5b8 <udivmodsi4>

00000704 <memcpy>:
     704:	01c003c4 	movi	r7,15
     708:	2007883a 	mov	r3,r4
     70c:	3980032e 	bgeu	r7,r6,71c <memcpy+0x18>
     710:	2904b03a 	or	r2,r5,r4
     714:	108000cc 	andi	r2,r2,3
     718:	10000926 	beq	r2,zero,740 <memcpy+0x3c>
     71c:	30000626 	beq	r6,zero,738 <memcpy+0x34>
     720:	30cd883a 	add	r6,r6,r3
     724:	28800003 	ldbu	r2,0(r5)
     728:	29400044 	addi	r5,r5,1
     72c:	18800005 	stb	r2,0(r3)
     730:	18c00044 	addi	r3,r3,1
     734:	30fffb1e 	bne	r6,r3,724 <memcpy+0x20>
     738:	2005883a 	mov	r2,r4
     73c:	f800283a 	ret
     740:	3811883a 	mov	r8,r7
     744:	200f883a 	mov	r7,r4
     748:	28c00017 	ldw	r3,0(r5)
     74c:	31bffc04 	addi	r6,r6,-16
     750:	38c00015 	stw	r3,0(r7)
     754:	28800117 	ldw	r2,4(r5)
     758:	38800115 	stw	r2,4(r7)
     75c:	28c00217 	ldw	r3,8(r5)
     760:	38c00215 	stw	r3,8(r7)
     764:	28800317 	ldw	r2,12(r5)
     768:	29400404 	addi	r5,r5,16
     76c:	38800315 	stw	r2,12(r7)
     770:	39c00404 	addi	r7,r7,16
     774:	41bff436 	bltu	r8,r6,748 <memcpy+0x44>
     778:	008000c4 	movi	r2,3
     77c:	1180072e 	bgeu	r2,r6,79c <memcpy+0x98>
     780:	1007883a 	mov	r3,r2
     784:	28800017 	ldw	r2,0(r5)
     788:	31bfff04 	addi	r6,r6,-4
     78c:	29400104 	addi	r5,r5,4
     790:	38800015 	stw	r2,0(r7)
     794:	39c00104 	addi	r7,r7,4
     798:	19bffa36 	bltu	r3,r6,784 <memcpy+0x80>
     79c:	3807883a 	mov	r3,r7
     7a0:	003fde06 	br	71c <memcpy+0x18>

000007a4 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
     7a4:	200f883a 	mov	r7,r4
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
     7a8:	008007c4 	movi	r2,31
     7ac:	1100022e 	bgeu	r2,r4,7b8 <alt_irq_register+0x14>
     7b0:	00bffa84 	movi	r2,-22
     7b4:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     7b8:	0011303a 	rdctl	r8,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     7bc:	013fff84 	movi	r4,-2
     7c0:	4104703a 	and	r2,r8,r4
     7c4:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
     7c8:	380490fa 	slli	r2,r7,3
     7cc:	00c00034 	movhi	r3,0
     7d0:	18d35c04 	addi	r3,r3,19824
     7d4:	10c5883a 	add	r2,r2,r3
     7d8:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = context;
     7dc:	11400115 	stw	r5,4(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
     7e0:	30000e26 	beq	r6,zero,81c <alt_irq_register+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     7e4:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     7e8:	2904703a 	and	r2,r5,r4
     7ec:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
     7f0:	00c00034 	movhi	r3,0
     7f4:	18d35004 	addi	r3,r3,19776
     7f8:	19000017 	ldw	r4,0(r3)
     7fc:	00800044 	movi	r2,1
     800:	11c4983a 	sll	r2,r2,r7
     804:	1104b03a 	or	r2,r2,r4
     808:	18800015 	stw	r2,0(r3)
  NIOS2_WRITE_IENABLE (alt_irq_active);
     80c:	18800017 	ldw	r2,0(r3)
     810:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
     814:	2801703a 	wrctl	status,r5
     818:	00000e06 	br	854 <alt_irq_register+0xb0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     81c:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     820:	00bfff84 	movi	r2,-2
     824:	2884703a 	and	r2,r5,r2
     828:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
     82c:	00c00034 	movhi	r3,0
     830:	18d35004 	addi	r3,r3,19776
     834:	19000017 	ldw	r4,0(r3)
     838:	00bfff84 	movi	r2,-2
     83c:	11c4183a 	rol	r2,r2,r7
     840:	1104703a 	and	r2,r2,r4
     844:	18800015 	stw	r2,0(r3)
  NIOS2_WRITE_IENABLE (alt_irq_active);
     848:	18800017 	ldw	r2,0(r3)
     84c:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
     850:	2801703a 	wrctl	status,r5
     854:	4001703a 	wrctl	status,r8
     858:	0005883a 	mov	r2,zero

    alt_irq_enable_all(status);
  }
  return rc; 
}
     85c:	f800283a 	ret

00000860 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
     860:	deffff04 	addi	sp,sp,-4
     864:	dfc00015 	stw	ra,0(sp)
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
     868:	01000034 	movhi	r4,0
     86c:	210d8104 	addi	r4,r4,13828
     870:	00c00034 	movhi	r3,0
     874:	18c7b804 	addi	r3,r3,7904

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
     878:	20c00926 	beq	r4,r3,8a0 <alt_load+0x40>
     87c:	01800034 	movhi	r6,0
     880:	318d8104 	addi	r6,r6,13828
  {
    while( to != end )
     884:	19800626 	beq	r3,r6,8a0 <alt_load+0x40>
     888:	01400104 	movi	r5,4
    {
      *to++ = *from++;
     88c:	20800017 	ldw	r2,0(r4)
     890:	18800015 	stw	r2,0(r3)
     894:	1947883a 	add	r3,r3,r5
     898:	2149883a 	add	r4,r4,r5
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
     89c:	30fffb1e 	bne	r6,r3,88c <alt_load+0x2c>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
     8a0:	01000034 	movhi	r4,0
     8a4:	21000804 	addi	r4,r4,32
     8a8:	00c00034 	movhi	r3,0
     8ac:	18c00804 	addi	r3,r3,32

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
     8b0:	20c00926 	beq	r4,r3,8d8 <alt_load+0x78>
     8b4:	01800034 	movhi	r6,0
     8b8:	31805a04 	addi	r6,r6,360
  {
    while( to != end )
     8bc:	19800626 	beq	r3,r6,8d8 <alt_load+0x78>
     8c0:	01400104 	movi	r5,4
    {
      *to++ = *from++;
     8c4:	20800017 	ldw	r2,0(r4)
     8c8:	18800015 	stw	r2,0(r3)
     8cc:	1947883a 	add	r3,r3,r5
     8d0:	2149883a 	add	r4,r4,r5
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
     8d4:	30fffb1e 	bne	r6,r3,8c4 <alt_load+0x64>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
     8d8:	01000034 	movhi	r4,0
     8dc:	21079604 	addi	r4,r4,7768
     8e0:	00c00034 	movhi	r3,0
     8e4:	18c79604 	addi	r3,r3,7768

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
     8e8:	20c00926 	beq	r4,r3,910 <alt_load+0xb0>
     8ec:	01800034 	movhi	r6,0
     8f0:	3187b804 	addi	r6,r6,7904
  {
    while( to != end )
     8f4:	19800626 	beq	r3,r6,910 <alt_load+0xb0>
     8f8:	01400104 	movi	r5,4
    {
      *to++ = *from++;
     8fc:	20800017 	ldw	r2,0(r4)
     900:	18800015 	stw	r2,0(r3)
     904:	1947883a 	add	r3,r3,r5
     908:	2149883a 	add	r4,r4,r5
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
     90c:	30fffb1e 	bne	r6,r3,8fc <alt_load+0x9c>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
     910:	00015780 	call	1578 <alt_dcache_flush_all>
  alt_icache_flush_all();
     914:	00016640 	call	1664 <alt_icache_flush_all>
}
     918:	dfc00017 	ldw	ra,0(sp)
     91c:	dec00104 	addi	sp,sp,4
     920:	f800283a 	ret

00000924 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
     924:	defffe04 	addi	sp,sp,-8
     928:	dfc00115 	stw	ra,4(sp)
     92c:	dc000015 	stw	r16,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
     930:	0009883a 	mov	r4,zero
     934:	00009740 	call	974 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
     938:	00009940 	call	994 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
     93c:	01800034 	movhi	r6,0
     940:	3187a304 	addi	r6,r6,7820
     944:	3009883a 	mov	r4,r6
     948:	300b883a 	mov	r5,r6
     94c:	00016e80 	call	16e8 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
     950:	d125db17 	ldw	r4,-26772(gp)
     954:	d165dc17 	ldw	r5,-26768(gp)
     958:	d1a5dd17 	ldw	r6,-26764(gp)
     95c:	00003240 	call	324 <main>
     960:	1021883a 	mov	r16,r2
  close(STDOUT_FILENO);
     964:	01000044 	movi	r4,1
     968:	000149c0 	call	149c <close>
  exit (result);
     96c:	8009883a 	mov	r4,r16
     970:	0001b6c0 	call	1b6c <exit>

00000974 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
     974:	deffff04 	addi	sp,sp,-4
     978:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
     97c:	0001a000 	call	1a00 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
     980:	00800044 	movi	r2,1
     984:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
     988:	dfc00017 	ldw	ra,0(sp)
     98c:	dec00104 	addi	sp,sp,4
     990:	f800283a 	ret

00000994 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
     994:	defffd04 	addi	sp,sp,-12
     998:	dfc00215 	stw	ra,8(sp)
     99c:	dc400115 	stw	r17,4(sp)
     9a0:	dc000015 	stw	r16,0(sp)
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
     9a4:	01200014 	movui	r4,32768
     9a8:	000b883a 	mov	r5,zero
     9ac:	000d883a 	mov	r6,zero
     9b0:	01c01904 	movi	r7,100
     9b4:	000107c0 	call	107c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAGUART, JTAGUART);
     9b8:	04000034 	movhi	r16,0
     9bc:	8407c704 	addi	r16,r16,7964
     9c0:	8009883a 	mov	r4,r16
     9c4:	000b883a 	mov	r5,zero
     9c8:	01800084 	movi	r6,2
     9cc:	0000b780 	call	b78 <altera_avalon_jtag_uart_init>

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
     9d0:	04400034 	movhi	r17,0
     9d4:	8c4d7904 	addi	r17,r17,13796
     9d8:	813ff604 	addi	r4,r16,-40
     9dc:	880b883a 	mov	r5,r17
     9e0:	00015840 	call	1584 <alt_dev_llist_insert>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( LCD, LCD);
     9e4:	04000034 	movhi	r16,0
     9e8:	840bd504 	addi	r16,r16,12116
     9ec:	8009883a 	mov	r4,r16
     9f0:	00011b00 	call	11b0 <alt_up_character_lcd_init>
     9f4:	8009883a 	mov	r4,r16
     9f8:	880b883a 	mov	r5,r17
     9fc:	00015840 	call	1584 <alt_dev_llist_insert>
     a00:	01000034 	movhi	r4,0
     a04:	210be004 	addi	r4,r4,12160
     a08:	880b883a 	mov	r5,r17
     a0c:	00015840 	call	1584 <alt_dev_llist_insert>
     a10:	01000034 	movhi	r4,0
     a14:	210beb04 	addi	r4,r4,12204
     a18:	880b883a 	mov	r5,r17
     a1c:	00015840 	call	1584 <alt_dev_llist_insert>
     a20:	01000034 	movhi	r4,0
     a24:	210bf604 	addi	r4,r4,12248
     a28:	880b883a 	mov	r5,r17
     a2c:	00015840 	call	1584 <alt_dev_llist_insert>
     a30:	01000034 	movhi	r4,0
     a34:	210c0104 	addi	r4,r4,12292
     a38:	880b883a 	mov	r5,r17
     a3c:	00015840 	call	1584 <alt_dev_llist_insert>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( KEY, KEY);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SEVENSEG30, SevenSeg30);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SEVENSEG74, SevenSeg74);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SW, SW);
}
     a40:	dfc00217 	ldw	ra,8(sp)
     a44:	dc400117 	ldw	r17,4(sp)
     a48:	dc000017 	ldw	r16,0(sp)
     a4c:	dec00304 	addi	sp,sp,12
     a50:	f800283a 	ret

00000a54 <altera_avalon_jtag_uart_ioctl_fd>:
    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
}

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
     a54:	deffff04 	addi	sp,sp,-4
     a58:	dfc00015 	stw	ra,0(sp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
     a5c:	21000017 	ldw	r4,0(r4)
     a60:	21000a04 	addi	r4,r4,40
     a64:	0000d240 	call	d24 <altera_avalon_jtag_uart_ioctl>
}
     a68:	dfc00017 	ldw	ra,0(sp)
     a6c:	dec00104 	addi	sp,sp,4
     a70:	f800283a 	ret

00000a74 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
     a74:	deffff04 	addi	sp,sp,-4
     a78:	dfc00015 	stw	ra,0(sp)
     a7c:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
     a80:	21000017 	ldw	r4,0(r4)
     a84:	21000a04 	addi	r4,r4,40
     a88:	11400217 	ldw	r5,8(r2)
     a8c:	0000aec0 	call	aec <altera_avalon_jtag_uart_close>
}
     a90:	dfc00017 	ldw	ra,0(sp)
     a94:	dec00104 	addi	sp,sp,4
     a98:	f800283a 	ret

00000a9c <altera_avalon_jtag_uart_write_fd>:
      fd->fd_flags);
}

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
     a9c:	deffff04 	addi	sp,sp,-4
     aa0:	dfc00015 	stw	ra,0(sp)
     aa4:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
     aa8:	21000017 	ldw	r4,0(r4)
     aac:	21000a04 	addi	r4,r4,40
     ab0:	11c00217 	ldw	r7,8(r2)
     ab4:	0000f000 	call	f00 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
     ab8:	dfc00017 	ldw	ra,0(sp)
     abc:	dec00104 	addi	sp,sp,4
     ac0:	f800283a 	ret

00000ac4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
     ac4:	deffff04 	addi	sp,sp,-4
     ac8:	dfc00015 	stw	ra,0(sp)
     acc:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
     ad0:	21000017 	ldw	r4,0(r4)
     ad4:	21000a04 	addi	r4,r4,40
     ad8:	11c00217 	ldw	r7,8(r2)
     adc:	0000d980 	call	d98 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
     ae0:	dfc00017 	ldw	ra,0(sp)
     ae4:	dec00104 	addi	sp,sp,4
     ae8:	f800283a 	ret

00000aec <altera_avalon_jtag_uart_close>:
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
     aec:	21800c17 	ldw	r6,48(r4)
     af0:	2950000c 	andi	r5,r5,16384
     af4:	280b003a 	cmpeq	r5,r5,zero
     af8:	00000306 	br	b08 <altera_avalon_jtag_uart_close+0x1c>
    if (flags & O_NONBLOCK) {
     afc:	2800021e 	bne	r5,zero,b08 <altera_avalon_jtag_uart_close+0x1c>
     b00:	00bffd44 	movi	r2,-11
     b04:	f800283a 	ret
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
     b08:	20800d17 	ldw	r2,52(r4)
     b0c:	11800326 	beq	r2,r6,b1c <altera_avalon_jtag_uart_close+0x30>
     b10:	20c00917 	ldw	r3,36(r4)
     b14:	20800117 	ldw	r2,4(r4)
     b18:	18bff836 	bltu	r3,r2,afc <altera_avalon_jtag_uart_close+0x10>
     b1c:	0005883a 	mov	r2,zero
      return -EWOULDBLOCK; 
    }
  }

  return 0;
}
     b20:	f800283a 	ret

00000b24 <altera_avalon_jtag_uart_timeout>:
static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
     b24:	20800017 	ldw	r2,0(r4)
     b28:	10c00104 	addi	r3,r2,4
     b2c:	18800037 	ldwio	r2,0(r3)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
     b30:	01410004 	movi	r5,1024
     b34:	1144703a 	and	r2,r2,r5
     b38:	10000526 	beq	r2,zero,b50 <altera_avalon_jtag_uart_timeout+0x2c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
     b3c:	20800817 	ldw	r2,32(r4)
     b40:	1144b03a 	or	r2,r2,r5
     b44:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
     b48:	20000915 	stw	zero,36(r4)
     b4c:	00000606 	br	b68 <altera_avalon_jtag_uart_timeout+0x44>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
     b50:	20c00917 	ldw	r3,36(r4)
     b54:	00a00034 	movhi	r2,32768
     b58:	10bfff04 	addi	r2,r2,-4
     b5c:	10c00236 	bltu	r2,r3,b68 <altera_avalon_jtag_uart_timeout+0x44>
    sp->host_inactive++;
     b60:	18800044 	addi	r2,r3,1
     b64:	20800915 	stw	r2,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
     b68:	00800034 	movhi	r2,0
     b6c:	10935404 	addi	r2,r2,19792
     b70:	10800017 	ldw	r2,0(r2)
     b74:	f800283a 	ret

00000b78 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
     b78:	defffe04 	addi	sp,sp,-8
     b7c:	dfc00115 	stw	ra,4(sp)
     b80:	dc000015 	stw	r16,0(sp)
     b84:	2021883a 	mov	r16,r4
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
     b88:	00c00044 	movi	r3,1
     b8c:	20c00815 	stw	r3,32(r4)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
     b90:	20800017 	ldw	r2,0(r4)
     b94:	10c00135 	stwio	r3,4(r2)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
     b98:	3009883a 	mov	r4,r6
     b9c:	800b883a 	mov	r5,r16
     ba0:	01800034 	movhi	r6,0
     ba4:	3182fc04 	addi	r6,r6,3056
     ba8:	00007a40 	call	7a4 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
     bac:	80000915 	stw	zero,36(r16)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
     bb0:	81000204 	addi	r4,r16,8
     bb4:	00800034 	movhi	r2,0
     bb8:	10935404 	addi	r2,r2,19792
     bbc:	11400017 	ldw	r5,0(r2)
     bc0:	01800034 	movhi	r6,0
     bc4:	3182c904 	addi	r6,r6,2852
     bc8:	800f883a 	mov	r7,r16
     bcc:	00014080 	call	1408 <alt_alarm_start>
     bd0:	1000030e 	bge	r2,zero,be0 <altera_avalon_jtag_uart_init+0x68>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
     bd4:	00a00034 	movhi	r2,32768
     bd8:	10bfffc4 	addi	r2,r2,-1
     bdc:	80800115 	stw	r2,4(r16)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
     be0:	dfc00117 	ldw	ra,4(sp)
     be4:	dc000017 	ldw	r16,0(sp)
     be8:	dec00204 	addi	sp,sp,8
     bec:	f800283a 	ret

00000bf0 <altera_avalon_jtag_uart_irq>:
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  unsigned int base = sp->base;
     bf0:	22000017 	ldw	r8,0(r4)
     bf4:	03800104 	movi	r14,4
     bf8:	4399883a 	add	r12,r8,r14
     bfc:	037ffff4 	movhi	r13,65535
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     c00:	62c00037 	ldwio	r11,0(r12)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
     c04:	5880c00c 	andi	r2,r11,768
     c08:	10004526 	beq	r2,zero,d20 <altera_avalon_jtag_uart_irq+0x130>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
     c0c:	5880400c 	andi	r2,r11,256
     c10:	10002126 	beq	r2,zero,c98 <altera_avalon_jtag_uart_irq+0xa8>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     c14:	20800a17 	ldw	r2,40(r4)
        if (next == sp->rx_out)
     c18:	10800044 	addi	r2,r2,1
     c1c:	1081ffcc 	andi	r2,r2,2047
     c20:	20c00b17 	ldw	r3,44(r4)
     c24:	10c01626 	beq	r2,r3,c80 <altera_avalon_jtag_uart_irq+0x90>
     c28:	02a00014 	movui	r10,32768
     c2c:	02400e04 	movi	r9,56
     c30:	01c00044 	movi	r7,1
     c34:	0181ffc4 	movi	r6,2047
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
     c38:	41400037 	ldwio	r5,0(r8)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
     c3c:	2a84703a 	and	r2,r5,r10
     c40:	10000d26 	beq	r2,zero,c78 <altera_avalon_jtag_uart_irq+0x88>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
     c44:	20800a17 	ldw	r2,40(r4)
     c48:	1105883a 	add	r2,r2,r4
     c4c:	1245883a 	add	r2,r2,r9
     c50:	11400005 	stb	r5,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     c54:	20800a17 	ldw	r2,40(r4)
     c58:	11c5883a 	add	r2,r2,r7
     c5c:	1184703a 	and	r2,r2,r6
     c60:	20800a15 	stw	r2,40(r4)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     c64:	20800a17 	ldw	r2,40(r4)
        if (next == sp->rx_out)
     c68:	11c5883a 	add	r2,r2,r7
     c6c:	1184703a 	and	r2,r2,r6
     c70:	20c00b17 	ldw	r3,44(r4)
     c74:	10fff01e 	bne	r2,r3,c38 <altera_avalon_jtag_uart_irq+0x48>

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
     c78:	2b44703a 	and	r2,r5,r13
     c7c:	10000626 	beq	r2,zero,c98 <altera_avalon_jtag_uart_irq+0xa8>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
     c80:	20800817 	ldw	r2,32(r4)
     c84:	00ffff84 	movi	r3,-2
     c88:	10c4703a 	and	r2,r2,r3
     c8c:	20800815 	stw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
     c90:	60800035 	stwio	r2,0(r12)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     c94:	60800037 	ldwio	r2,0(r12)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
     c98:	5880800c 	andi	r2,r11,512
     c9c:	103fd826 	beq	r2,zero,c00 <altera_avalon_jtag_uart_irq+0x10>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
     ca0:	5b44703a 	and	r2,r11,r13
     ca4:	100ad43a 	srli	r5,r2,16

      while (space > 0 && sp->tx_out != sp->tx_in)
     ca8:	283fd526 	beq	r5,zero,c00 <altera_avalon_jtag_uart_irq+0x10>
     cac:	20c00d17 	ldw	r3,52(r4)
     cb0:	20800c17 	ldw	r2,48(r4)
     cb4:	18801126 	beq	r3,r2,cfc <altera_avalon_jtag_uart_irq+0x10c>
     cb8:	02420e04 	movi	r9,2104
     cbc:	01800044 	movi	r6,1
     cc0:	01c1ffc4 	movi	r7,2047
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
     cc4:	20800d17 	ldw	r2,52(r4)
     cc8:	1105883a 	add	r2,r2,r4
     ccc:	1245883a 	add	r2,r2,r9
     cd0:	10800007 	ldb	r2,0(r2)
     cd4:	40800035 	stwio	r2,0(r8)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     cd8:	20800d17 	ldw	r2,52(r4)
     cdc:	1185883a 	add	r2,r2,r6
     ce0:	11c4703a 	and	r2,r2,r7
     ce4:	20800d15 	stw	r2,52(r4)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
     ce8:	298bc83a 	sub	r5,r5,r6
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
     cec:	283fc426 	beq	r5,zero,c00 <altera_avalon_jtag_uart_irq+0x10>
     cf0:	20c00d17 	ldw	r3,52(r4)
     cf4:	20800c17 	ldw	r2,48(r4)
     cf8:	18bff21e 	bne	r3,r2,cc4 <altera_avalon_jtag_uart_irq+0xd4>
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
     cfc:	20c00817 	ldw	r3,32(r4)
     d00:	00bfff44 	movi	r2,-3
     d04:	1886703a 	and	r3,r3,r2
     d08:	20c00815 	stw	r3,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
     d0c:	20800017 	ldw	r2,0(r4)
     d10:	1385883a 	add	r2,r2,r14
     d14:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     d18:	60800037 	ldwio	r2,0(r12)
     d1c:	003fb806 	br	c00 <altera_avalon_jtag_uart_irq+0x10>
     d20:	f800283a 	ret

00000d24 <altera_avalon_jtag_uart_ioctl>:
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;

  switch (req)
     d24:	009a8044 	movi	r2,27137
     d28:	28800326 	beq	r5,r2,d38 <altera_avalon_jtag_uart_ioctl+0x14>
     d2c:	009a8084 	movi	r2,27138
     d30:	2880171e 	bne	r5,r2,d90 <altera_avalon_jtag_uart_ioctl+0x6c>
     d34:	00000d06 	br	d6c <altera_avalon_jtag_uart_ioctl+0x48>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
     d38:	20c00117 	ldw	r3,4(r4)
     d3c:	00a00034 	movhi	r2,32768
     d40:	10bfffc4 	addi	r2,r2,-1
     d44:	18801226 	beq	r3,r2,d90 <altera_avalon_jtag_uart_ioctl+0x6c>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
     d48:	31800017 	ldw	r6,0(r6)
     d4c:	30ffff84 	addi	r3,r6,-2
     d50:	10bfff44 	addi	r2,r2,-3
     d54:	10c0022e 	bgeu	r2,r3,d60 <altera_avalon_jtag_uart_ioctl+0x3c>
     d58:	01a00034 	movhi	r6,32768
     d5c:	31bfff84 	addi	r6,r6,-2
     d60:	21800115 	stw	r6,4(r4)
     d64:	0005883a 	mov	r2,zero
     d68:	f800283a 	ret
    }
    break;

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
     d6c:	20c00117 	ldw	r3,4(r4)
     d70:	00a00034 	movhi	r2,32768
     d74:	10bfffc4 	addi	r2,r2,-1
     d78:	18800526 	beq	r3,r2,d90 <altera_avalon_jtag_uart_ioctl+0x6c>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
     d7c:	20800917 	ldw	r2,36(r4)
     d80:	10c5803a 	cmpltu	r2,r2,r3
     d84:	30800015 	stw	r2,0(r6)
     d88:	0005883a 	mov	r2,zero
     d8c:	f800283a 	ret
     d90:	00bff9c4 	movi	r2,-25
  default:
    break;
  }

  return rc;
}
     d94:	f800283a 	ret

00000d98 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
     d98:	defff604 	addi	sp,sp,-40
     d9c:	dfc00915 	stw	ra,36(sp)
     da0:	df000815 	stw	fp,32(sp)
     da4:	ddc00715 	stw	r23,28(sp)
     da8:	dd800615 	stw	r22,24(sp)
     dac:	dd400515 	stw	r21,20(sp)
     db0:	dd000415 	stw	r20,16(sp)
     db4:	dcc00315 	stw	r19,12(sp)
     db8:	dc800215 	stw	r18,8(sp)
     dbc:	dc400115 	stw	r17,4(sp)
     dc0:	dc000015 	stw	r16,0(sp)
     dc4:	2025883a 	mov	r18,r4
     dc8:	282f883a 	mov	r23,r5
     dcc:	3027883a 	mov	r19,r6
     dd0:	3839883a 	mov	fp,r7
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
     dd4:	0180220e 	bge	zero,r6,e60 <altera_avalon_jtag_uart_read+0xc8>
     dd8:	b82b883a 	mov	r21,r23
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
     ddc:	95800a17 	ldw	r22,40(r18)
      out = sp->rx_out;
     de0:	94400b17 	ldw	r17,44(r18)

      if (in >= out)
     de4:	b4400236 	bltu	r22,r17,df0 <altera_avalon_jtag_uart_read+0x58>
        n = in - out;
     de8:	b461c83a 	sub	r16,r22,r17
     dec:	00000206 	br	df8 <altera_avalon_jtag_uart_read+0x60>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
     df0:	00820004 	movi	r2,2048
     df4:	1461c83a 	sub	r16,r2,r17

      if (n == 0)
     df8:	80000d26 	beq	r16,zero,e30 <altera_avalon_jtag_uart_read+0x98>
        break; /* No more data available */

      if (n > space)
     dfc:	9829883a 	mov	r20,r19
     e00:	9c001d36 	bltu	r19,r16,e78 <altera_avalon_jtag_uart_read+0xe0>
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
     e04:	91400e04 	addi	r5,r18,56
     e08:	a809883a 	mov	r4,r21
     e0c:	2c4b883a 	add	r5,r5,r17
     e10:	800d883a 	mov	r6,r16
     e14:	00007040 	call	704 <memcpy>
      ptr   += n;
     e18:	ac2b883a 	add	r21,r21,r16
      space -= n;
     e1c:	9c27c83a 	sub	r19,r19,r16

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     e20:	8445883a 	add	r2,r16,r17
     e24:	1081ffcc 	andi	r2,r2,2047
     e28:	90800b15 	stw	r2,44(r18)
    }
    while (space > 0);
     e2c:	04ffeb16 	blt	zero,r19,ddc <altera_avalon_jtag_uart_read+0x44>

    /* If we read any data then return it */
    if (ptr != buffer)
     e30:	adc01c1e 	bne	r21,r23,ea4 <altera_avalon_jtag_uart_read+0x10c>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
     e34:	e090000c 	andi	r2,fp,16384
     e38:	10000d1e 	bne	r2,zero,e70 <altera_avalon_jtag_uart_read+0xd8>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
     e3c:	90800a17 	ldw	r2,40(r18)
     e40:	b080031e 	bne	r22,r2,e50 <altera_avalon_jtag_uart_read+0xb8>
     e44:	90c00917 	ldw	r3,36(r18)
     e48:	90800117 	ldw	r2,4(r18)
     e4c:	18bffb36 	bltu	r3,r2,e3c <altera_avalon_jtag_uart_read+0xa4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
     e50:	90800a17 	ldw	r2,40(r18)
     e54:	b0800426 	beq	r22,r2,e68 <altera_avalon_jtag_uart_read+0xd0>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
     e58:	04c0030e 	bge	zero,r19,e68 <altera_avalon_jtag_uart_read+0xd0>
     e5c:	003fde06 	br	dd8 <altera_avalon_jtag_uart_read+0x40>
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
     e60:	3890000c 	andi	r2,r7,16384
     e64:	1000021e 	bne	r2,zero,e70 <altera_avalon_jtag_uart_read+0xd8>
     e68:	00bffec4 	movi	r2,-5
     e6c:	00001806 	br	ed0 <altera_avalon_jtag_uart_read+0x138>
     e70:	00bffd44 	movi	r2,-11
     e74:	00001606 	br	ed0 <altera_avalon_jtag_uart_read+0x138>
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
     e78:	91400e04 	addi	r5,r18,56
     e7c:	a809883a 	mov	r4,r21
     e80:	894b883a 	add	r5,r17,r5
     e84:	980d883a 	mov	r6,r19
     e88:	00007040 	call	704 <memcpy>
      ptr   += n;
     e8c:	aceb883a 	add	r21,r21,r19
      space -= n;
     e90:	0027883a 	mov	r19,zero

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     e94:	a445883a 	add	r2,r20,r17
     e98:	1081ffcc 	andi	r2,r2,2047
     e9c:	90800b15 	stw	r2,44(r18)
     ea0:	003fe306 	br	e30 <altera_avalon_jtag_uart_read+0x98>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     ea4:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     ea8:	00bfff84 	movi	r2,-2
     eac:	2084703a 	and	r2,r4,r2
     eb0:	1001703a 	wrctl	status,r2

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
     eb4:	90800817 	ldw	r2,32(r18)
     eb8:	10800054 	ori	r2,r2,1
     ebc:	90800815 	stw	r2,32(r18)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
     ec0:	90c00017 	ldw	r3,0(r18)
     ec4:	18800135 	stwio	r2,4(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
     ec8:	2001703a 	wrctl	status,r4
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
     ecc:	adc5c83a 	sub	r2,r21,r23
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO;
}
     ed0:	dfc00917 	ldw	ra,36(sp)
     ed4:	df000817 	ldw	fp,32(sp)
     ed8:	ddc00717 	ldw	r23,28(sp)
     edc:	dd800617 	ldw	r22,24(sp)
     ee0:	dd400517 	ldw	r21,20(sp)
     ee4:	dd000417 	ldw	r20,16(sp)
     ee8:	dcc00317 	ldw	r19,12(sp)
     eec:	dc800217 	ldw	r18,8(sp)
     ef0:	dc400117 	ldw	r17,4(sp)
     ef4:	dc000017 	ldw	r16,0(sp)
     ef8:	dec00a04 	addi	sp,sp,40
     efc:	f800283a 	ret

00000f00 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
     f00:	defff804 	addi	sp,sp,-32
     f04:	dfc00715 	stw	ra,28(sp)
     f08:	dd800615 	stw	r22,24(sp)
     f0c:	dd400515 	stw	r21,20(sp)
     f10:	dd000415 	stw	r20,16(sp)
     f14:	dcc00315 	stw	r19,12(sp)
     f18:	dc800215 	stw	r18,8(sp)
     f1c:	dc400115 	stw	r17,4(sp)
     f20:	dc000015 	stw	r16,0(sp)
     f24:	2021883a 	mov	r16,r4
     f28:	282d883a 	mov	r22,r5
     f2c:	3011883a 	mov	r8,r6
     f30:	382b883a 	mov	r21,r7
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
     f34:	01800616 	blt	zero,r6,f50 <altera_avalon_jtag_uart_write+0x50>
     f38:	2829883a 	mov	r20,r5
     f3c:	00002106 	br	fc4 <altera_avalon_jtag_uart_write+0xc4>
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    return ptr - start;
     f40:	a585c83a 	sub	r2,r20,r22
     f44:	00004306 	br	1054 <altera_avalon_jtag_uart_write+0x154>
  else if (flags & O_NONBLOCK)
     f48:	00bffd44 	movi	r2,-11
     f4c:	00004106 	br	1054 <altera_avalon_jtag_uart_write+0x154>
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
     f50:	2829883a 	mov	r20,r5
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
     f54:	84800c17 	ldw	r18,48(r16)
      out = sp->tx_out;
     f58:	81400d17 	ldw	r5,52(r16)

      if (in < out)
     f5c:	9140032e 	bgeu	r18,r5,f6c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
     f60:	2c85c83a 	sub	r2,r5,r18
     f64:	11bfffc4 	addi	r6,r2,-1
     f68:	00000606 	br	f84 <altera_avalon_jtag_uart_write+0x84>
      else if (out > 0)
     f6c:	28000326 	beq	r5,zero,f7c <altera_avalon_jtag_uart_write+0x7c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
     f70:	00820004 	movi	r2,2048
     f74:	148dc83a 	sub	r6,r2,r18
     f78:	00000206 	br	f84 <altera_avalon_jtag_uart_write+0x84>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
     f7c:	0081ffc4 	movi	r2,2047
     f80:	148dc83a 	sub	r6,r2,r18

      if (n == 0)
     f84:	30002626 	beq	r6,zero,1020 <altera_avalon_jtag_uart_write+0x120>
        break;

      if (n > count)
     f88:	4027883a 	mov	r19,r8
     f8c:	3023883a 	mov	r17,r6
     f90:	4180012e 	bgeu	r8,r6,f98 <altera_avalon_jtag_uart_write+0x98>
     f94:	4023883a 	mov	r17,r8
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
     f98:	81020e04 	addi	r4,r16,2104
     f9c:	2489883a 	add	r4,r4,r18
     fa0:	a00b883a 	mov	r5,r20
     fa4:	880d883a 	mov	r6,r17
     fa8:	00007040 	call	704 <memcpy>
      ptr   += n;
     fac:	a469883a 	add	r20,r20,r17
      count -= n;
     fb0:	9c51c83a 	sub	r8,r19,r17

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     fb4:	9445883a 	add	r2,r18,r17
     fb8:	1081ffcc 	andi	r2,r2,2047
     fbc:	80800c15 	stw	r2,48(r16)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
     fc0:	023fe416 	blt	zero,r8,f54 <altera_avalon_jtag_uart_write+0x54>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     fc4:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     fc8:	00bfff84 	movi	r2,-2
     fcc:	2084703a 	and	r2,r4,r2
     fd0:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
     fd4:	80800817 	ldw	r2,32(r16)
     fd8:	10800094 	ori	r2,r2,2
     fdc:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
     fe0:	80c00017 	ldw	r3,0(r16)
     fe4:	18800135 	stwio	r2,4(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
     fe8:	2001703a 	wrctl	status,r4
     fec:	00000706 	br	100c <altera_avalon_jtag_uart_write+0x10c>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
     ff0:	80800d17 	ldw	r2,52(r16)
     ff4:	1140031e 	bne	r2,r5,1004 <altera_avalon_jtag_uart_write+0x104>
     ff8:	80c00917 	ldw	r3,36(r16)
     ffc:	80800117 	ldw	r2,4(r16)
    1000:	18bffb36 	bltu	r3,r2,ff0 <altera_avalon_jtag_uart_write+0xf0>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
    1004:	80800d17 	ldw	r2,52(r16)
    1008:	117fed1e 	bne	r2,r5,fc0 <altera_avalon_jtag_uart_write+0xc0>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    100c:	b53fcc1e 	bne	r22,r20,f40 <altera_avalon_jtag_uart_write+0x40>
    return ptr - start;
  else if (flags & O_NONBLOCK)
    1010:	a890000c 	andi	r2,r21,16384
    1014:	103fcc1e 	bne	r2,zero,f48 <altera_avalon_jtag_uart_write+0x48>
    1018:	00bffec4 	movi	r2,-5
    101c:	00000d06 	br	1054 <altera_avalon_jtag_uart_write+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1020:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1024:	00bfff84 	movi	r2,-2
    1028:	2084703a 	and	r2,r4,r2
    102c:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    1030:	80800817 	ldw	r2,32(r16)
    1034:	10800094 	ori	r2,r2,2
    1038:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    103c:	80c00017 	ldw	r3,0(r16)
    1040:	18800135 	stwio	r2,4(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1044:	2001703a 	wrctl	status,r4
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
    1048:	a890000c 	andi	r2,r21,16384
    104c:	103fe826 	beq	r2,zero,ff0 <altera_avalon_jtag_uart_write+0xf0>
    1050:	003fee06 	br	100c <altera_avalon_jtag_uart_write+0x10c>
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
}
    1054:	dfc00717 	ldw	ra,28(sp)
    1058:	dd800617 	ldw	r22,24(sp)
    105c:	dd400517 	ldw	r21,20(sp)
    1060:	dd000417 	ldw	r20,16(sp)
    1064:	dcc00317 	ldw	r19,12(sp)
    1068:	dc800217 	ldw	r18,8(sp)
    106c:	dc400117 	ldw	r17,4(sp)
    1070:	dc000017 	ldw	r16,0(sp)
    1074:	dec00804 	addi	sp,sp,32
    1078:	f800283a 	ret

0000107c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    107c:	deffff04 	addi	sp,sp,-4
    1080:	dfc00015 	stw	ra,0(sp)
    1084:	200b883a 	mov	r5,r4
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    1088:	00c00034 	movhi	r3,0
    108c:	18d35404 	addi	r3,r3,19792
    1090:	18800017 	ldw	r2,0(r3)
    1094:	1000011e 	bne	r2,zero,109c <alt_avalon_timer_sc_init+0x20>
  {
    _alt_tick_rate = nticks;
    1098:	19c00015 	stw	r7,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    109c:	008001c4 	movi	r2,7
    10a0:	28800135 	stwio	r2,4(r5)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
    10a4:	3009883a 	mov	r4,r6
    10a8:	01800034 	movhi	r6,0
    10ac:	31843004 	addi	r6,r6,4288
    10b0:	00007a40 	call	7a4 <alt_irq_register>
#endif  
}
    10b4:	dfc00017 	ldw	ra,0(sp)
    10b8:	dec00104 	addi	sp,sp,4
    10bc:	f800283a 	ret

000010c0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    10c0:	defffe04 	addi	sp,sp,-8
    10c4:	dfc00115 	stw	ra,4(sp)
    10c8:	dc000015 	stw	r16,0(sp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    10cc:	20000035 	stwio	zero,0(r4)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    10d0:	20800137 	ldwio	r2,4(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    10d4:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    10d8:	00bfff84 	movi	r2,-2
    10dc:	8084703a 	and	r2,r16,r2
    10e0:	1001703a 	wrctl	status,r2
  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  alt_tick ();
    10e4:	00019540 	call	1954 <alt_tick>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    10e8:	8001703a 	wrctl	status,r16
  alt_irq_enable_all(cpu_sr);
}
    10ec:	dfc00117 	ldw	ra,4(sp)
    10f0:	dc000017 	ldw	r16,0(sp)
    10f4:	dec00204 	addi	sp,sp,8
    10f8:	f800283a 	ret

000010fc <get_DDRAM_addr>:
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
	//assume valid inputs
	unsigned char addr = 0x00000000;
	if (y_pos == 0)
    10fc:	2800021e 	bne	r5,zero,1108 <get_DDRAM_addr+0xc>
	{
		addr |= x_pos;
    1100:	2005883a 	mov	r2,r4
    1104:	00000106 	br	110c <get_DDRAM_addr+0x10>
	}
	else
	{
		addr |= x_pos;
		addr |= 0x00000040;
    1108:	20801014 	ori	r2,r4,64
    110c:	10803fcc 	andi	r2,r2,255
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
}
    1110:	10802014 	ori	r2,r2,128
    1114:	f800283a 	ret

00001118 <alt_up_character_lcd_string>:
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
    1118:	28c00003 	ldbu	r3,0(r5)
    111c:	18803fcc 	andi	r2,r3,255
    1120:	1080201c 	xori	r2,r2,128
    1124:	10bfe004 	addi	r2,r2,-128
    1128:	10000d26 	beq	r2,zero,1160 <alt_up_character_lcd_string+0x48>
    112c:	01800044 	movi	r6,1
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
    1130:	20800a17 	ldw	r2,40(r4)
    1134:	1185883a 	add	r2,r2,r6
    1138:	18c03fcc 	andi	r3,r3,255
    113c:	18c0201c 	xori	r3,r3,128
    1140:	18ffe004 	addi	r3,r3,-128
    1144:	10c00025 	stbio	r3,0(r2)
		++ptr;
    1148:	298b883a 	add	r5,r5,r6
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
    114c:	28c00003 	ldbu	r3,0(r5)
    1150:	18803fcc 	andi	r2,r3,255
    1154:	1080201c 	xori	r2,r2,128
    1158:	10bfe004 	addi	r2,r2,-128
    115c:	103ff41e 	bne	r2,zero,1130 <alt_up_character_lcd_string+0x18>
    1160:	f800283a 	ret

00001164 <alt_up_character_lcd_write>:
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
    1164:	30000926 	beq	r6,zero,118c <alt_up_character_lcd_write+0x28>
    1168:	000f883a 	mov	r7,zero
    116c:	02000044 	movi	r8,1
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
    1170:	20800a17 	ldw	r2,40(r4)
    1174:	1205883a 	add	r2,r2,r8
    1178:	3947883a 	add	r3,r7,r5
    117c:	18c00007 	ldb	r3,0(r3)
    1180:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
    1184:	3a0f883a 	add	r7,r7,r8
    1188:	31fff91e 	bne	r6,r7,1170 <alt_up_character_lcd_write+0xc>
    118c:	f800283a 	ret

00001190 <alt_up_character_lcd_write_fd>:
	}
}

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
    1190:	deffff04 	addi	sp,sp,-4
    1194:	dfc00015 	stw	ra,0(sp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
    1198:	21000017 	ldw	r4,0(r4)
    119c:	00011640 	call	1164 <alt_up_character_lcd_write>
	return 0;
}
    11a0:	0005883a 	mov	r2,zero
    11a4:	dfc00017 	ldw	ra,0(sp)
    11a8:	dec00104 	addi	sp,sp,4
    11ac:	f800283a 	ret

000011b0 <alt_up_character_lcd_init>:
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
    11b0:	20c00a17 	ldw	r3,40(r4)
    11b4:	00800044 	movi	r2,1
    11b8:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
    11bc:	f800283a 	ret

000011c0 <alt_up_character_lcd_send_cmd>:
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
    11c0:	20800a17 	ldw	r2,40(r4)
    11c4:	29403fcc 	andi	r5,r5,255
    11c8:	11400025 	stbio	r5,0(r2)
}
    11cc:	f800283a 	ret

000011d0 <alt_up_character_lcd_cursor_blink_on>:
{
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
}

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
    11d0:	deffff04 	addi	sp,sp,-4
    11d4:	dfc00015 	stw	ra,0(sp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
    11d8:	014003c4 	movi	r5,15
    11dc:	00011c00 	call	11c0 <alt_up_character_lcd_send_cmd>
}
    11e0:	dfc00017 	ldw	ra,0(sp)
    11e4:	dec00104 	addi	sp,sp,4
    11e8:	f800283a 	ret

000011ec <alt_up_character_lcd_cursor_off>:
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
	return 0;
}

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
    11ec:	deffff04 	addi	sp,sp,-4
    11f0:	dfc00015 	stw	ra,0(sp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
    11f4:	01400304 	movi	r5,12
    11f8:	00011c00 	call	11c0 <alt_up_character_lcd_send_cmd>
}
    11fc:	dfc00017 	ldw	ra,0(sp)
    1200:	dec00104 	addi	sp,sp,4
    1204:	f800283a 	ret

00001208 <alt_up_character_lcd_erase_pos>:
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
    1208:	defffd04 	addi	sp,sp,-12
    120c:	dfc00215 	stw	ra,8(sp)
    1210:	dc400115 	stw	r17,4(sp)
    1214:	dc000015 	stw	r16,0(sp)
    1218:	2021883a 	mov	r16,r4
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
    121c:	008009c4 	movi	r2,39
    1220:	11400e36 	bltu	r2,r5,125c <alt_up_character_lcd_erase_pos+0x54>
    1224:	04400044 	movi	r17,1
    1228:	89800c36 	bltu	r17,r6,125c <alt_up_character_lcd_erase_pos+0x54>
		return -1;

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    122c:	2809883a 	mov	r4,r5
    1230:	300b883a 	mov	r5,r6
    1234:	00010fc0 	call	10fc <get_DDRAM_addr>
    1238:	8009883a 	mov	r4,r16
    123c:	11403fcc 	andi	r5,r2,255
    1240:	00011c00 	call	11c0 <alt_up_character_lcd_send_cmd>
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
    1244:	80800a17 	ldw	r2,40(r16)
    1248:	1445883a 	add	r2,r2,r17
    124c:	00c00084 	movi	r3,2
    1250:	10c00025 	stbio	r3,0(r2)
    1254:	0005883a 	mov	r2,zero
    1258:	00000106 	br	1260 <alt_up_character_lcd_erase_pos+0x58>
	return 0;
    125c:	00bfffc4 	movi	r2,-1
}
    1260:	dfc00217 	ldw	ra,8(sp)
    1264:	dc400117 	ldw	r17,4(sp)
    1268:	dc000017 	ldw	r16,0(sp)
    126c:	dec00304 	addi	sp,sp,12
    1270:	f800283a 	ret

00001274 <alt_up_character_lcd_shift_display>:
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    1274:	defffa04 	addi	sp,sp,-24
    1278:	dfc00515 	stw	ra,20(sp)
    127c:	dd000415 	stw	r20,16(sp)
    1280:	dcc00315 	stw	r19,12(sp)
    1284:	dc800215 	stw	r18,8(sp)
    1288:	dc400115 	stw	r17,4(sp)
    128c:	dc000015 	stw	r16,0(sp)
    1290:	2027883a 	mov	r19,r4
	if (x_right_shift_offset == 0) 
    1294:	28001326 	beq	r5,zero,12e4 <alt_up_character_lcd_shift_display+0x70>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
    1298:	0140020e 	bge	zero,r5,12a4 <alt_up_character_lcd_shift_display+0x30>
    129c:	05000704 	movi	r20,28
    12a0:	00000106 	br	12a8 <alt_up_character_lcd_shift_display+0x34>
    12a4:	05000604 	movi	r20,24
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
    12a8:	2800010e 	bge	r5,zero,12b0 <alt_up_character_lcd_shift_display+0x3c>
    12ac:	014bc83a 	sub	r5,zero,r5
	// do the shift
	while (num_offset-- > 0)
    12b0:	00bfffc4 	movi	r2,-1
    12b4:	28a1883a 	add	r16,r5,r2
    12b8:	80c03fcc 	andi	r3,r16,255
    12bc:	10803fcc 	andi	r2,r2,255
    12c0:	18800826 	beq	r3,r2,12e4 <alt_up_character_lcd_shift_display+0x70>
    12c4:	04bfffc4 	movi	r18,-1
    12c8:	04403fc4 	movi	r17,255
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    12cc:	9809883a 	mov	r4,r19
    12d0:	a1403fcc 	andi	r5,r20,255
    12d4:	00011c00 	call	11c0 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    12d8:	84a1883a 	add	r16,r16,r18
    12dc:	80803fcc 	andi	r2,r16,255
    12e0:	147ffa1e 	bne	r2,r17,12cc <alt_up_character_lcd_shift_display+0x58>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
    12e4:	dfc00517 	ldw	ra,20(sp)
    12e8:	dd000417 	ldw	r20,16(sp)
    12ec:	dcc00317 	ldw	r19,12(sp)
    12f0:	dc800217 	ldw	r18,8(sp)
    12f4:	dc400117 	ldw	r17,4(sp)
    12f8:	dc000017 	ldw	r16,0(sp)
    12fc:	dec00604 	addi	sp,sp,24
    1300:	f800283a 	ret

00001304 <alt_up_character_lcd_shift_cursor>:
	alt_up_character_lcd_send_cmd(lcd, addr);
	return 0;
}

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    1304:	defffa04 	addi	sp,sp,-24
    1308:	dfc00515 	stw	ra,20(sp)
    130c:	dd000415 	stw	r20,16(sp)
    1310:	dcc00315 	stw	r19,12(sp)
    1314:	dc800215 	stw	r18,8(sp)
    1318:	dc400115 	stw	r17,4(sp)
    131c:	dc000015 	stw	r16,0(sp)
    1320:	2027883a 	mov	r19,r4
	if (x_right_shift_offset == 0) 
    1324:	28001326 	beq	r5,zero,1374 <alt_up_character_lcd_shift_cursor+0x70>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
    1328:	0140020e 	bge	zero,r5,1334 <alt_up_character_lcd_shift_cursor+0x30>
    132c:	05000504 	movi	r20,20
    1330:	00000106 	br	1338 <alt_up_character_lcd_shift_cursor+0x34>
    1334:	05000404 	movi	r20,16
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
    1338:	2800010e 	bge	r5,zero,1340 <alt_up_character_lcd_shift_cursor+0x3c>
    133c:	014bc83a 	sub	r5,zero,r5
	// do the shift
	while (num_offset-- > 0)
    1340:	00bfffc4 	movi	r2,-1
    1344:	28a1883a 	add	r16,r5,r2
    1348:	80c03fcc 	andi	r3,r16,255
    134c:	10803fcc 	andi	r2,r2,255
    1350:	18800826 	beq	r3,r2,1374 <alt_up_character_lcd_shift_cursor+0x70>
    1354:	04bfffc4 	movi	r18,-1
    1358:	04403fc4 	movi	r17,255
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    135c:	9809883a 	mov	r4,r19
    1360:	a1403fcc 	andi	r5,r20,255
    1364:	00011c00 	call	11c0 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    1368:	84a1883a 	add	r16,r16,r18
    136c:	80803fcc 	andi	r2,r16,255
    1370:	147ffa1e 	bne	r2,r17,135c <alt_up_character_lcd_shift_cursor+0x58>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
    1374:	dfc00517 	ldw	ra,20(sp)
    1378:	dd000417 	ldw	r20,16(sp)
    137c:	dcc00317 	ldw	r19,12(sp)
    1380:	dc800217 	ldw	r18,8(sp)
    1384:	dc400117 	ldw	r17,4(sp)
    1388:	dc000017 	ldw	r16,0(sp)
    138c:	dec00604 	addi	sp,sp,24
    1390:	f800283a 	ret

00001394 <alt_up_character_lcd_set_cursor_pos>:
	return 0;
}

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
    1394:	defffe04 	addi	sp,sp,-8
    1398:	dfc00115 	stw	ra,4(sp)
    139c:	dc000015 	stw	r16,0(sp)
    13a0:	2021883a 	mov	r16,r4
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
    13a4:	008009c4 	movi	r2,39
    13a8:	11400a36 	bltu	r2,r5,13d4 <alt_up_character_lcd_set_cursor_pos+0x40>
    13ac:	00800044 	movi	r2,1
    13b0:	11800836 	bltu	r2,r6,13d4 <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    13b4:	2809883a 	mov	r4,r5
    13b8:	300b883a 	mov	r5,r6
    13bc:	00010fc0 	call	10fc <get_DDRAM_addr>
    13c0:	8009883a 	mov	r4,r16
    13c4:	11403fcc 	andi	r5,r2,255
    13c8:	00011c00 	call	11c0 <alt_up_character_lcd_send_cmd>
    13cc:	0005883a 	mov	r2,zero
    13d0:	00000106 	br	13d8 <alt_up_character_lcd_set_cursor_pos+0x44>
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
	return 0;
    13d4:	00bfffc4 	movi	r2,-1
}
    13d8:	dfc00117 	ldw	ra,4(sp)
    13dc:	dc000017 	ldw	r16,0(sp)
    13e0:	dec00204 	addi	sp,sp,8
    13e4:	f800283a 	ret

000013e8 <alt_up_character_lcd_open_dev>:
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
    13e8:	deffff04 	addi	sp,sp,-4
    13ec:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
    13f0:	01400034 	movhi	r5,0
    13f4:	294d7904 	addi	r5,r5,13796
    13f8:	00015f40 	call	15f4 <alt_find_dev>

  return dev;
}
    13fc:	dfc00017 	ldw	ra,0(sp)
    1400:	dec00104 	addi	sp,sp,4
    1404:	f800283a 	ret

00001408 <alt_alarm_start>:
                     void* context)
{
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
    1408:	00800034 	movhi	r2,0
    140c:	10935404 	addi	r2,r2,19792
    1410:	10800017 	ldw	r2,0(r2)
    1414:	1000021e 	bne	r2,zero,1420 <alt_alarm_start+0x18>
    1418:	00bfde84 	movi	r2,-134
    141c:	f800283a 	ret
  {
    if (alarm)
    1420:	2000021e 	bne	r4,zero,142c <alt_alarm_start+0x24>
    1424:	00bffa84 	movi	r2,-22
    1428:	f800283a 	ret
    {
      alarm->callback = callback;
    142c:	21800315 	stw	r6,12(r4)
      alarm->context  = context;
    1430:	21c00515 	stw	r7,20(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1434:	000f303a 	rdctl	r7,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1438:	00bfff84 	movi	r2,-2
    143c:	3884703a 	and	r2,r7,r2
    1440:	1001703a 	wrctl	status,r2
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    1444:	00800034 	movhi	r2,0
    1448:	10935504 	addi	r2,r2,19796
    144c:	10c00017 	ldw	r3,0(r2)
 
      irq_context = alt_irq_disable_all ();
      
      current_nticks = alt_nticks();
      
      alarm->time = nticks + current_nticks + 1; 
    1450:	01800044 	movi	r6,1
    1454:	1985883a 	add	r2,r3,r6
    1458:	2885883a 	add	r2,r5,r2
    145c:	20800215 	stw	r2,8(r4)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    1460:	10c0022e 	bgeu	r2,r3,146c <alt_alarm_start+0x64>
      {
        alarm->rollover = 1;
    1464:	21800405 	stb	r6,16(r4)
    1468:	00000106 	br	1470 <alt_alarm_start+0x68>
      }
      else
      {
        alarm->rollover = 0;
    146c:	20000405 	stb	zero,16(r4)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    1470:	00800034 	movhi	r2,0
    1474:	108d7d04 	addi	r2,r2,13812
    1478:	20800115 	stw	r2,4(r4)
  entry->next     = list->next;
    147c:	10c00017 	ldw	r3,0(r2)
    1480:	20c00015 	stw	r3,0(r4)

  list->next->previous = entry;
    1484:	10c00017 	ldw	r3,0(r2)
    1488:	19000115 	stw	r4,4(r3)
  list->next           = entry;
    148c:	11000015 	stw	r4,0(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1490:	3801703a 	wrctl	status,r7
    1494:	0005883a 	mov	r2,zero
  }
  else
  {
    return -ENOTSUP;
  }
}
    1498:	f800283a 	ret

0000149c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    149c:	defffd04 	addi	sp,sp,-12
    14a0:	dfc00215 	stw	ra,8(sp)
    14a4:	dc400115 	stw	r17,4(sp)
    14a8:	dc000015 	stw	r16,0(sp)
    14ac:	2021883a 	mov	r16,r4
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    14b0:	20001c16 	blt	r4,zero,1524 <close+0x88>
    14b4:	20c00324 	muli	r3,r4,12
    14b8:	00800034 	movhi	r2,0
    14bc:	108c1604 	addi	r2,r2,12376
    14c0:	1889883a 	add	r4,r3,r2

  if (fd)
    14c4:	20001726 	beq	r4,zero,1524 <close+0x88>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    14c8:	20800017 	ldw	r2,0(r4)
    14cc:	10800417 	ldw	r2,16(r2)
    14d0:	10002126 	beq	r2,zero,1558 <close+0xbc>
    14d4:	103ee83a 	callr	r2
    14d8:	1023883a 	mov	r17,r2

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    14dc:	8009883a 	mov	r4,r16
    14e0:	00018fc0 	call	18fc <alt_release_fd>
    if (rval < 0)
    14e4:	88000216 	blt	r17,zero,14f0 <close+0x54>
    14e8:	0005883a 	mov	r2,zero
    14ec:	00001d06 	br	1564 <close+0xc8>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    14f0:	00800034 	movhi	r2,0
    14f4:	108d7c04 	addi	r2,r2,13808
    14f8:	10800017 	ldw	r2,0(r2)
    14fc:	1000031e 	bne	r2,zero,150c <close+0x70>
    1500:	00c00034 	movhi	r3,0
    1504:	18d35604 	addi	r3,r3,19800
    1508:	00000206 	br	1514 <close+0x78>
    150c:	103ee83a 	callr	r2
    1510:	1007883a 	mov	r3,r2
    {
      ALT_ERRNO = -rval;
    1514:	0445c83a 	sub	r2,zero,r17
    1518:	18800015 	stw	r2,0(r3)
    151c:	00bfffc4 	movi	r2,-1
    1520:	00001006 	br	1564 <close+0xc8>
    1524:	00800034 	movhi	r2,0
    1528:	108d7c04 	addi	r2,r2,13808
    152c:	10800017 	ldw	r2,0(r2)
    1530:	1000031e 	bne	r2,zero,1540 <close+0xa4>
    1534:	00c00034 	movhi	r3,0
    1538:	18d35604 	addi	r3,r3,19800
    153c:	00000206 	br	1548 <close+0xac>
    1540:	103ee83a 	callr	r2
    1544:	1007883a 	mov	r3,r2
    }
    return 0;
  }
  else
  {
    ALT_ERRNO = EBADFD;
    1548:	00801444 	movi	r2,81
    154c:	18800015 	stw	r2,0(r3)
    1550:	00bfffc4 	movi	r2,-1
    1554:	00000306 	br	1564 <close+0xc8>

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    1558:	8009883a 	mov	r4,r16
    155c:	00018fc0 	call	18fc <alt_release_fd>
    1560:	0005883a 	mov	r2,zero
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
    1564:	dfc00217 	ldw	ra,8(sp)
    1568:	dc400117 	ldw	r17,4(sp)
    156c:	dc000017 	ldw	r16,0(sp)
    1570:	dec00304 	addi	sp,sp,12
    1574:	f800283a 	ret

00001578 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    1578:	f800283a 	ret

0000157c <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
    157c:	3005883a 	mov	r2,r6
    1580:	f800283a 	ret

00001584 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    1584:	deffff04 	addi	sp,sp,-4
    1588:	dfc00015 	stw	ra,0(sp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    158c:	20000226 	beq	r4,zero,1598 <alt_dev_llist_insert+0x14>
    1590:	20800217 	ldw	r2,8(r4)
    1594:	10000d1e 	bne	r2,zero,15cc <alt_dev_llist_insert+0x48>
    1598:	00800034 	movhi	r2,0
    159c:	108d7c04 	addi	r2,r2,13808
    15a0:	10800017 	ldw	r2,0(r2)
    15a4:	1000031e 	bne	r2,zero,15b4 <alt_dev_llist_insert+0x30>
    15a8:	00c00034 	movhi	r3,0
    15ac:	18d35604 	addi	r3,r3,19800
    15b0:	00000206 	br	15bc <alt_dev_llist_insert+0x38>
    15b4:	103ee83a 	callr	r2
    15b8:	1007883a 	mov	r3,r2
  {
    ALT_ERRNO = EINVAL;
    15bc:	00800584 	movi	r2,22
    15c0:	18800015 	stw	r2,0(r3)
    15c4:	00bffa84 	movi	r2,-22
    15c8:	00000706 	br	15e8 <alt_dev_llist_insert+0x64>
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    15cc:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
    15d0:	28800017 	ldw	r2,0(r5)
    15d4:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
    15d8:	28800017 	ldw	r2,0(r5)
    15dc:	11000115 	stw	r4,4(r2)
  list->next           = entry;
    15e0:	29000015 	stw	r4,0(r5)
    15e4:	0005883a 	mov	r2,zero
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
    15e8:	dfc00017 	ldw	ra,0(sp)
    15ec:	dec00104 	addi	sp,sp,4
    15f0:	f800283a 	ret

000015f4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    15f4:	defffb04 	addi	sp,sp,-20
    15f8:	dfc00415 	stw	ra,16(sp)
    15fc:	dcc00315 	stw	r19,12(sp)
    1600:	dc800215 	stw	r18,8(sp)
    1604:	dc400115 	stw	r17,4(sp)
    1608:	dc000015 	stw	r16,0(sp)
    160c:	2027883a 	mov	r19,r4
    1610:	2821883a 	mov	r16,r5
  alt_dev* next = (alt_dev*) llist->next;
    1614:	2c400017 	ldw	r17,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
    1618:	0001c180 	call	1c18 <strlen>
    161c:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    1620:	8c000726 	beq	r17,r16,1640 <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    1624:	89000217 	ldw	r4,8(r17)
    1628:	980b883a 	mov	r5,r19
    162c:	900d883a 	mov	r6,r18
    1630:	0001ba40 	call	1ba4 <memcmp>
    1634:	10000326 	beq	r2,zero,1644 <alt_find_dev+0x50>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    1638:	8c400017 	ldw	r17,0(r17)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    163c:	847ff91e 	bne	r16,r17,1624 <alt_find_dev+0x30>
    1640:	0023883a 	mov	r17,zero
  }
  
  /* No match found */
  
  return NULL;
}
    1644:	8805883a 	mov	r2,r17
    1648:	dfc00417 	ldw	ra,16(sp)
    164c:	dcc00317 	ldw	r19,12(sp)
    1650:	dc800217 	ldw	r18,8(sp)
    1654:	dc400117 	ldw	r17,4(sp)
    1658:	dc000017 	ldw	r16,0(sp)
    165c:	dec00504 	addi	sp,sp,20
    1660:	f800283a 	ret

00001664 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    1664:	deffff04 	addi	sp,sp,-4
    1668:	dfc00015 	stw	ra,0(sp)
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    166c:	0009883a 	mov	r4,zero
    1670:	01440004 	movi	r5,4096
    1674:	0001b300 	call	1b30 <alt_icache_flush>
#endif
}
    1678:	dfc00017 	ldw	ra,0(sp)
    167c:	dec00104 	addi	sp,sp,4
    1680:	f800283a 	ret

00001684 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    1684:	defffe04 	addi	sp,sp,-8
    1688:	dfc00115 	stw	ra,4(sp)
    168c:	dc000015 	stw	r16,0(sp)
    1690:	2021883a 	mov	r16,r4
  int old;

  old = open (name, flags, mode);
    1694:	2809883a 	mov	r4,r5
    1698:	300b883a 	mov	r5,r6
    169c:	380d883a 	mov	r6,r7
    16a0:	00017800 	call	1780 <open>
    16a4:	1009883a 	mov	r4,r2

  if (old >= 0)
    16a8:	10000b16 	blt	r2,zero,16d8 <alt_open_fd+0x54>
  {
    fd->dev      = alt_fd_list[old].dev;
    16ac:	10c00324 	muli	r3,r2,12
    16b0:	00800034 	movhi	r2,0
    16b4:	108c1604 	addi	r2,r2,12376
    16b8:	1887883a 	add	r3,r3,r2
    16bc:	18800017 	ldw	r2,0(r3)
    16c0:	80800015 	stw	r2,0(r16)
    fd->priv     = alt_fd_list[old].priv;
    16c4:	18800117 	ldw	r2,4(r3)
    16c8:	80800115 	stw	r2,4(r16)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    16cc:	18800217 	ldw	r2,8(r3)
    16d0:	80800215 	stw	r2,8(r16)

    alt_release_fd (old);
    16d4:	00018fc0 	call	18fc <alt_release_fd>
  }
} 
    16d8:	dfc00117 	ldw	ra,4(sp)
    16dc:	dc000017 	ldw	r16,0(sp)
    16e0:	dec00204 	addi	sp,sp,8
    16e4:	f800283a 	ret

000016e8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    16e8:	defffa04 	addi	sp,sp,-24
    16ec:	dfc00515 	stw	ra,20(sp)
    16f0:	dd000415 	stw	r20,16(sp)
    16f4:	dcc00315 	stw	r19,12(sp)
    16f8:	dc800215 	stw	r18,8(sp)
    16fc:	dc400115 	stw	r17,4(sp)
    1700:	dc000015 	stw	r16,0(sp)
    1704:	2005883a 	mov	r2,r4
    1708:	2827883a 	mov	r19,r5
    170c:	3029883a 	mov	r20,r6
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    1710:	04000034 	movhi	r16,0
    1714:	840c1904 	addi	r16,r16,12388
    1718:	04800044 	movi	r18,1
    171c:	04407fc4 	movi	r17,511
    1720:	8009883a 	mov	r4,r16
    1724:	100b883a 	mov	r5,r2
    1728:	900d883a 	mov	r6,r18
    172c:	880f883a 	mov	r7,r17
    1730:	00016840 	call	1684 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    1734:	843ffd04 	addi	r16,r16,-12
    1738:	8009883a 	mov	r4,r16
    173c:	980b883a 	mov	r5,r19
    1740:	000d883a 	mov	r6,zero
    1744:	880f883a 	mov	r7,r17
    1748:	00016840 	call	1684 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    174c:	81000604 	addi	r4,r16,24
    1750:	a00b883a 	mov	r5,r20
    1754:	900d883a 	mov	r6,r18
    1758:	880f883a 	mov	r7,r17
    175c:	00016840 	call	1684 <alt_open_fd>
}  
    1760:	dfc00517 	ldw	ra,20(sp)
    1764:	dd000417 	ldw	r20,16(sp)
    1768:	dcc00317 	ldw	r19,12(sp)
    176c:	dc800217 	ldw	r18,8(sp)
    1770:	dc400117 	ldw	r17,4(sp)
    1774:	dc000017 	ldw	r16,0(sp)
    1778:	dec00604 	addi	sp,sp,24
    177c:	f800283a 	ret

00001780 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    1780:	defff904 	addi	sp,sp,-28
    1784:	dfc00615 	stw	ra,24(sp)
    1788:	dd400515 	stw	r21,20(sp)
    178c:	dd000415 	stw	r20,16(sp)
    1790:	dcc00315 	stw	r19,12(sp)
    1794:	dc800215 	stw	r18,8(sp)
    1798:	dc400115 	stw	r17,4(sp)
    179c:	dc000015 	stw	r16,0(sp)
    17a0:	2029883a 	mov	r20,r4
    17a4:	2827883a 	mov	r19,r5
    17a8:	302b883a 	mov	r21,r6
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    17ac:	01400034 	movhi	r5,0
    17b0:	294d7904 	addi	r5,r5,13796
    17b4:	00015f40 	call	15f4 <alt_find_dev>
    17b8:	1021883a 	mov	r16,r2
    17bc:	10000226 	beq	r2,zero,17c8 <open+0x48>
    17c0:	0025883a 	mov	r18,zero
    17c4:	00000a06 	br	17f0 <open+0x70>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    17c8:	a009883a 	mov	r4,r20
    17cc:	0001a080 	call	1a08 <alt_find_file>
    17d0:	1021883a 	mov	r16,r2

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    17d4:	1000051e 	bne	r2,zero,17ec <open+0x6c>
    17d8:	047fffc4 	movi	r17,-1
    17dc:	043ffb44 	movi	r16,-19
    17e0:	00002b06 	br	1890 <open+0x110>
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    17e4:	043ffcc4 	movi	r16,-13
    17e8:	00002906 	br	1890 <open+0x110>

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    17ec:	04800044 	movi	r18,1
  {
    if ((index = alt_get_fd (dev)) < 0)
    17f0:	8009883a 	mov	r4,r16
    17f4:	0001ac40 	call	1ac4 <alt_get_fd>
    17f8:	1023883a 	mov	r17,r2
    17fc:	10003316 	blt	r2,zero,18cc <open+0x14c>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
    1800:	10800324 	muli	r2,r2,12
    1804:	02000034 	movhi	r8,0
    1808:	420c1604 	addi	r8,r8,12376
    180c:	1209883a 	add	r4,r2,r8
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    1810:	00900034 	movhi	r2,16384
    1814:	10bfffc4 	addi	r2,r2,-1
    1818:	9886703a 	and	r3,r19,r2
    181c:	20c00215 	stw	r3,8(r4)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    1820:	9004c03a 	cmpne	r2,r18,zero
    1824:	1000121e 	bne	r2,zero,1870 <open+0xf0>

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    1828:	18900034 	orhi	r2,r3,16384
    182c:	20800215 	stw	r2,8(r4)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    1830:	00800034 	movhi	r2,0
    1834:	108d7b04 	addi	r2,r2,13804
    1838:	11c00017 	ldw	r7,0(r2)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    183c:	21800017 	ldw	r6,0(r4)
    1840:	000b883a 	mov	r5,zero
    1844:	4007883a 	mov	r3,r8
    1848:	02400044 	movi	r9,1
    184c:	02000304 	movi	r8,12
    1850:	18800017 	ldw	r2,0(r3)
    1854:	1180031e 	bne	r2,r6,1864 <open+0xe4>
    1858:	18800217 	ldw	r2,8(r3)
    185c:	1000010e 	bge	r2,zero,1864 <open+0xe4>
    1860:	193fe01e 	bne	r3,r4,17e4 <open+0x64>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    1864:	2a4b883a 	add	r5,r5,r9
    1868:	1a07883a 	add	r3,r3,r8
    186c:	397ff82e 	bgeu	r7,r5,1850 <open+0xd0>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    1870:	80800317 	ldw	r2,12(r16)
    1874:	10001726 	beq	r2,zero,18d4 <open+0x154>
    1878:	a00b883a 	mov	r5,r20
    187c:	980d883a 	mov	r6,r19
    1880:	a80f883a 	mov	r7,r21
    1884:	103ee83a 	callr	r2
    1888:	1021883a 	mov	r16,r2
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    188c:	1000110e 	bge	r2,zero,18d4 <open+0x154>
  {
    alt_release_fd (index);  
    1890:	8809883a 	mov	r4,r17
    1894:	00018fc0 	call	18fc <alt_release_fd>
    1898:	00800034 	movhi	r2,0
    189c:	108d7c04 	addi	r2,r2,13808
    18a0:	10800017 	ldw	r2,0(r2)
    18a4:	1000031e 	bne	r2,zero,18b4 <open+0x134>
    18a8:	00c00034 	movhi	r3,0
    18ac:	18d35604 	addi	r3,r3,19800
    18b0:	00000206 	br	18bc <open+0x13c>
    18b4:	103ee83a 	callr	r2
    18b8:	1007883a 	mov	r3,r2
    ALT_ERRNO = -status;
    18bc:	0405c83a 	sub	r2,zero,r16
    18c0:	18800015 	stw	r2,0(r3)
    18c4:	047fffc4 	movi	r17,-1
    18c8:	00000206 	br	18d4 <open+0x154>
    18cc:	1021883a 	mov	r16,r2
    18d0:	003fef06 	br	1890 <open+0x110>
  }
  
  /* return the reference upon success */

  return index;
}
    18d4:	8805883a 	mov	r2,r17
    18d8:	dfc00617 	ldw	ra,24(sp)
    18dc:	dd400517 	ldw	r21,20(sp)
    18e0:	dd000417 	ldw	r20,16(sp)
    18e4:	dcc00317 	ldw	r19,12(sp)
    18e8:	dc800217 	ldw	r18,8(sp)
    18ec:	dc400117 	ldw	r17,4(sp)
    18f0:	dc000017 	ldw	r16,0(sp)
    18f4:	dec00704 	addi	sp,sp,28
    18f8:	f800283a 	ret

000018fc <alt_release_fd>:
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  if (fd > 2)
    18fc:	00800084 	movi	r2,2
    1900:	1100060e 	bge	r2,r4,191c <alt_release_fd+0x20>
  {
    alt_fd_list[fd].fd_flags = 0;
    1904:	20800324 	muli	r2,r4,12
    1908:	00c00034 	movhi	r3,0
    190c:	18cc1604 	addi	r3,r3,12376
    1910:	10c5883a 	add	r2,r2,r3
    1914:	10000215 	stw	zero,8(r2)
    alt_fd_list[fd].dev      = 0;
    1918:	10000015 	stw	zero,0(r2)
    191c:	f800283a 	ret

00001920 <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1920:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1924:	00bfff84 	movi	r2,-2
    1928:	2884703a 	and	r2,r5,r2
    192c:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    1930:	20c00017 	ldw	r3,0(r4)
    1934:	20800117 	ldw	r2,4(r4)
    1938:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
    193c:	20800117 	ldw	r2,4(r4)
    1940:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    1944:	21000115 	stw	r4,4(r4)
  entry->next     = entry;
    1948:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    194c:	2801703a 	wrctl	status,r5
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  alt_llist_remove (&alarm->llist);
  alt_irq_enable_all (irq_context);
}
    1950:	f800283a 	ret

00001954 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    1954:	defffd04 	addi	sp,sp,-12
    1958:	dfc00215 	stw	ra,8(sp)
    195c:	dc400115 	stw	r17,4(sp)
    1960:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    1964:	d4200717 	ldw	r16,-32740(gp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    1968:	d0a5df17 	ldw	r2,-26756(gp)
    196c:	10800044 	addi	r2,r2,1
    1970:	d0a5df15 	stw	r2,-26756(gp)
    1974:	00001b06 	br	19e4 <alt_tick+0x90>

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
    1978:	84400017 	ldw	r17,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    197c:	80800403 	ldbu	r2,16(r16)
    1980:	10000326 	beq	r2,zero,1990 <alt_tick+0x3c>
    1984:	d0a5df17 	ldw	r2,-26756(gp)
    1988:	1000011e 	bne	r2,zero,1990 <alt_tick+0x3c>
    {
      alarm->rollover = 0;
    198c:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    1990:	d0e5df17 	ldw	r3,-26756(gp)
    1994:	80800217 	ldw	r2,8(r16)
    1998:	18801136 	bltu	r3,r2,19e0 <alt_tick+0x8c>
    199c:	80800403 	ldbu	r2,16(r16)
    19a0:	10000f1e 	bne	r2,zero,19e0 <alt_tick+0x8c>
    {
      next_callback = alarm->callback (alarm->context);
    19a4:	80800317 	ldw	r2,12(r16)
    19a8:	81000517 	ldw	r4,20(r16)
    19ac:	103ee83a 	callr	r2
    19b0:	1007883a 	mov	r3,r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    19b4:	1000031e 	bne	r2,zero,19c4 <alt_tick+0x70>
      {
        alt_alarm_stop (alarm);
    19b8:	8009883a 	mov	r4,r16
    19bc:	00019200 	call	1920 <alt_alarm_stop>
    19c0:	00000706 	br	19e0 <alt_tick+0x8c>
      }
      else
      {
        alarm->time += next_callback;
    19c4:	80800217 	ldw	r2,8(r16)
    19c8:	1885883a 	add	r2,r3,r2
    19cc:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    19d0:	d0e5df17 	ldw	r3,-26756(gp)
    19d4:	10c0022e 	bgeu	r2,r3,19e0 <alt_tick+0x8c>
        {
          alarm->rollover = 1;
    19d8:	00800044 	movi	r2,1
    19dc:	80800405 	stb	r2,16(r16)
    19e0:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    19e4:	d0a00704 	addi	r2,gp,-32740
    19e8:	80bfe31e 	bne	r16,r2,1978 <alt_tick+0x24>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    19ec:	dfc00217 	ldw	ra,8(sp)
    19f0:	dc400117 	ldw	r17,4(sp)
    19f4:	dc000017 	ldw	r16,0(sp)
    19f8:	dec00304 	addi	sp,sp,12
    19fc:	f800283a 	ret

00001a00 <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    1a00:	000170fa 	wrctl	ienable,zero
}
    1a04:	f800283a 	ret

00001a08 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    1a08:	defff904 	addi	sp,sp,-28
    1a0c:	dfc00615 	stw	ra,24(sp)
    1a10:	dd400515 	stw	r21,20(sp)
    1a14:	dd000415 	stw	r20,16(sp)
    1a18:	dcc00315 	stw	r19,12(sp)
    1a1c:	dc800215 	stw	r18,8(sp)
    1a20:	dc400115 	stw	r17,4(sp)
    1a24:	dc000015 	stw	r16,0(sp)
    1a28:	2025883a 	mov	r18,r4
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    1a2c:	00800034 	movhi	r2,0
    1a30:	108d7704 	addi	r2,r2,13788
    1a34:	14400017 	ldw	r17,0(r2)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    1a38:	102b883a 	mov	r21,r2
    1a3c:	88801626 	beq	r17,r2,1a98 <alt_find_file+0x90>
    1a40:	053fffc4 	movi	r20,-1
    1a44:	04c00bc4 	movi	r19,47
  {
    len = strlen(next->name);
    1a48:	8c000217 	ldw	r16,8(r17)
    1a4c:	8009883a 	mov	r4,r16
    1a50:	0001c180 	call	1c18 <strlen>
    1a54:	1007883a 	mov	r3,r2
    
    if (next->name[len-1] == '/')
    1a58:	8085883a 	add	r2,r16,r2
    1a5c:	1505883a 	add	r2,r2,r20
    1a60:	10800007 	ldb	r2,0(r2)
    1a64:	14c0011e 	bne	r2,r19,1a6c <alt_find_file+0x64>
    {
      len -= 1;
    1a68:	1d07883a 	add	r3,r3,r20
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    1a6c:	1c85883a 	add	r2,r3,r18
    1a70:	10800007 	ldb	r2,0(r2)
    1a74:	14c00126 	beq	r2,r19,1a7c <alt_find_file+0x74>
    1a78:	1000051e 	bne	r2,zero,1a90 <alt_find_file+0x88>
    1a7c:	8009883a 	mov	r4,r16
    1a80:	900b883a 	mov	r5,r18
    1a84:	180d883a 	mov	r6,r3
    1a88:	0001ba40 	call	1ba4 <memcmp>
    1a8c:	10000326 	beq	r2,zero,1a9c <alt_find_file+0x94>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    1a90:	8c400017 	ldw	r17,0(r17)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    1a94:	8d7fec1e 	bne	r17,r21,1a48 <alt_find_file+0x40>
    1a98:	0023883a 	mov	r17,zero
  }
  
  /* No match found */
  
  return NULL;     
}
    1a9c:	8805883a 	mov	r2,r17
    1aa0:	dfc00617 	ldw	ra,24(sp)
    1aa4:	dd400517 	ldw	r21,20(sp)
    1aa8:	dd000417 	ldw	r20,16(sp)
    1aac:	dcc00317 	ldw	r19,12(sp)
    1ab0:	dc800217 	ldw	r18,8(sp)
    1ab4:	dc400117 	ldw	r17,4(sp)
    1ab8:	dc000017 	ldw	r16,0(sp)
    1abc:	dec00704 	addi	sp,sp,28
    1ac0:	f800283a 	ret

00001ac4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    1ac4:	000b883a 	mov	r5,zero
    1ac8:	00c00034 	movhi	r3,0
    1acc:	18cc1604 	addi	r3,r3,12376
    1ad0:	02000304 	movi	r8,12
    1ad4:	02400034 	movhi	r9,0
    1ad8:	4a4d7b04 	addi	r9,r9,13804
    1adc:	01c00044 	movi	r7,1
    1ae0:	01800804 	movi	r6,32
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  {
    if (!alt_fd_list[i].dev)
    1ae4:	18800017 	ldw	r2,0(r3)
    1ae8:	10000c1e 	bne	r2,zero,1b1c <alt_get_fd+0x58>
    {
      alt_fd_list[i].dev = dev;
    1aec:	2a05383a 	mul	r2,r5,r8
    1af0:	00c00034 	movhi	r3,0
    1af4:	18cc1604 	addi	r3,r3,12376
    1af8:	10c5883a 	add	r2,r2,r3
    1afc:	11000015 	stw	r4,0(r2)
      if (i > alt_max_fd)
    1b00:	48800017 	ldw	r2,0(r9)
    1b04:	11400216 	blt	r2,r5,1b10 <alt_get_fd+0x4c>
    1b08:	2805883a 	mov	r2,r5
    1b0c:	f800283a 	ret
      {
        alt_max_fd = i;
    1b10:	49400015 	stw	r5,0(r9)
    1b14:	2805883a 	mov	r2,r5
    1b18:	f800283a 	ret
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    1b1c:	29cb883a 	add	r5,r5,r7
    1b20:	1a07883a 	add	r3,r3,r8
    1b24:	29bfef1e 	bne	r5,r6,1ae4 <alt_get_fd+0x20>
    1b28:	00bffa04 	movi	r2,-24
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
}
    1b2c:	f800283a 	ret

00001b30 <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
    1b30:	2007883a 	mov	r3,r4
    1b34:	00840004 	movi	r2,4096
    1b38:	1140012e 	bgeu	r2,r5,1b40 <alt_icache_flush+0x10>
    1b3c:	100b883a 	mov	r5,r2
    1b40:	194b883a 	add	r5,r3,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    1b44:	1940042e 	bgeu	r3,r5,1b58 <alt_icache_flush+0x28>
    1b48:	00800804 	movi	r2,32
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    1b4c:	1800603a 	flushi	r3
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    1b50:	1887883a 	add	r3,r3,r2
    1b54:	197ffd36 	bltu	r3,r5,1b4c <alt_icache_flush+0x1c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    1b58:	208007cc 	andi	r2,r4,31
    1b5c:	10000126 	beq	r2,zero,1b64 <alt_icache_flush+0x34>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    1b60:	1800603a 	flushi	r3
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    1b64:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    1b68:	f800283a 	ret

00001b6c <exit>:
    1b6c:	defffe04 	addi	sp,sp,-8
    1b70:	000b883a 	mov	r5,zero
    1b74:	dc000015 	stw	r16,0(sp)
    1b78:	dfc00115 	stw	ra,4(sp)
    1b7c:	2021883a 	mov	r16,r4
    1b80:	0001c900 	call	1c90 <__call_exitprocs>
    1b84:	00800034 	movhi	r2,0
    1b88:	108d8004 	addi	r2,r2,13824
    1b8c:	11000017 	ldw	r4,0(r2)
    1b90:	20800f17 	ldw	r2,60(r4)
    1b94:	10000126 	beq	r2,zero,1b9c <exit+0x30>
    1b98:	103ee83a 	callr	r2
    1b9c:	8009883a 	mov	r4,r16
    1ba0:	0001e400 	call	1e40 <_exit>

00001ba4 <memcmp>:
    1ba4:	00c000c4 	movi	r3,3
    1ba8:	1980032e 	bgeu	r3,r6,1bb8 <memcmp+0x14>
    1bac:	2144b03a 	or	r2,r4,r5
    1bb0:	10c4703a 	and	r2,r2,r3
    1bb4:	10000f26 	beq	r2,zero,1bf4 <memcmp+0x50>
    1bb8:	31ffffc4 	addi	r7,r6,-1
    1bbc:	3000061e 	bne	r6,zero,1bd8 <memcmp+0x34>
    1bc0:	00000a06 	br	1bec <memcmp+0x48>
    1bc4:	39ffffc4 	addi	r7,r7,-1
    1bc8:	00bfffc4 	movi	r2,-1
    1bcc:	21000044 	addi	r4,r4,1
    1bd0:	29400044 	addi	r5,r5,1
    1bd4:	38800526 	beq	r7,r2,1bec <memcmp+0x48>
    1bd8:	20c00003 	ldbu	r3,0(r4)
    1bdc:	28800003 	ldbu	r2,0(r5)
    1be0:	18bff826 	beq	r3,r2,1bc4 <memcmp+0x20>
    1be4:	1885c83a 	sub	r2,r3,r2
    1be8:	f800283a 	ret
    1bec:	0005883a 	mov	r2,zero
    1bf0:	f800283a 	ret
    1bf4:	180f883a 	mov	r7,r3
    1bf8:	20c00017 	ldw	r3,0(r4)
    1bfc:	28800017 	ldw	r2,0(r5)
    1c00:	18bfed1e 	bne	r3,r2,1bb8 <memcmp+0x14>
    1c04:	31bfff04 	addi	r6,r6,-4
    1c08:	21000104 	addi	r4,r4,4
    1c0c:	29400104 	addi	r5,r5,4
    1c10:	39bff936 	bltu	r7,r6,1bf8 <memcmp+0x54>
    1c14:	003fe806 	br	1bb8 <memcmp+0x14>

00001c18 <strlen>:
    1c18:	208000cc 	andi	r2,r4,3
    1c1c:	2011883a 	mov	r8,r4
    1c20:	1000161e 	bne	r2,zero,1c7c <strlen+0x64>
    1c24:	20c00017 	ldw	r3,0(r4)
    1c28:	017fbff4 	movhi	r5,65279
    1c2c:	297fbfc4 	addi	r5,r5,-257
    1c30:	01e02074 	movhi	r7,32897
    1c34:	39e02004 	addi	r7,r7,-32640
    1c38:	1945883a 	add	r2,r3,r5
    1c3c:	11c4703a 	and	r2,r2,r7
    1c40:	00c6303a 	nor	r3,zero,r3
    1c44:	1886703a 	and	r3,r3,r2
    1c48:	18000c1e 	bne	r3,zero,1c7c <strlen+0x64>
    1c4c:	280d883a 	mov	r6,r5
    1c50:	380b883a 	mov	r5,r7
    1c54:	21000104 	addi	r4,r4,4
    1c58:	20800017 	ldw	r2,0(r4)
    1c5c:	1187883a 	add	r3,r2,r6
    1c60:	1946703a 	and	r3,r3,r5
    1c64:	0084303a 	nor	r2,zero,r2
    1c68:	10c4703a 	and	r2,r2,r3
    1c6c:	103ff926 	beq	r2,zero,1c54 <strlen+0x3c>
    1c70:	20800007 	ldb	r2,0(r4)
    1c74:	10000326 	beq	r2,zero,1c84 <strlen+0x6c>
    1c78:	21000044 	addi	r4,r4,1
    1c7c:	20800007 	ldb	r2,0(r4)
    1c80:	103ffd1e 	bne	r2,zero,1c78 <strlen+0x60>
    1c84:	2205c83a 	sub	r2,r4,r8
    1c88:	f800283a 	ret

00001c8c <register_fini>:
    1c8c:	f800283a 	ret

00001c90 <__call_exitprocs>:
    1c90:	00800034 	movhi	r2,0
    1c94:	108d8004 	addi	r2,r2,13824
    1c98:	10800017 	ldw	r2,0(r2)
    1c9c:	defff304 	addi	sp,sp,-52
    1ca0:	df000b15 	stw	fp,44(sp)
    1ca4:	d8800115 	stw	r2,4(sp)
    1ca8:	00800034 	movhi	r2,0
    1cac:	10800004 	addi	r2,r2,0
    1cb0:	1005003a 	cmpeq	r2,r2,zero
    1cb4:	d8800215 	stw	r2,8(sp)
    1cb8:	d8800117 	ldw	r2,4(sp)
    1cbc:	dd400815 	stw	r21,32(sp)
    1cc0:	dd000715 	stw	r20,28(sp)
    1cc4:	10805204 	addi	r2,r2,328
    1cc8:	dfc00c15 	stw	ra,48(sp)
    1ccc:	ddc00a15 	stw	r23,40(sp)
    1cd0:	dd800915 	stw	r22,36(sp)
    1cd4:	dcc00615 	stw	r19,24(sp)
    1cd8:	dc800515 	stw	r18,20(sp)
    1cdc:	dc400415 	stw	r17,16(sp)
    1ce0:	dc000315 	stw	r16,12(sp)
    1ce4:	282b883a 	mov	r21,r5
    1ce8:	2039883a 	mov	fp,r4
    1cec:	d8800015 	stw	r2,0(sp)
    1cf0:	2829003a 	cmpeq	r20,r5,zero
    1cf4:	d8800117 	ldw	r2,4(sp)
    1cf8:	14405217 	ldw	r17,328(r2)
    1cfc:	88001026 	beq	r17,zero,1d40 <__call_exitprocs+0xb0>
    1d00:	ddc00017 	ldw	r23,0(sp)
    1d04:	88800117 	ldw	r2,4(r17)
    1d08:	8c802204 	addi	r18,r17,136
    1d0c:	143fffc4 	addi	r16,r2,-1
    1d10:	80000916 	blt	r16,zero,1d38 <__call_exitprocs+0xa8>
    1d14:	05bfffc4 	movi	r22,-1
    1d18:	a000151e 	bne	r20,zero,1d70 <__call_exitprocs+0xe0>
    1d1c:	8409883a 	add	r4,r16,r16
    1d20:	2105883a 	add	r2,r4,r4
    1d24:	1485883a 	add	r2,r2,r18
    1d28:	10c02017 	ldw	r3,128(r2)
    1d2c:	a8c01126 	beq	r21,r3,1d74 <__call_exitprocs+0xe4>
    1d30:	843fffc4 	addi	r16,r16,-1
    1d34:	85bff81e 	bne	r16,r22,1d18 <__call_exitprocs+0x88>
    1d38:	d8800217 	ldw	r2,8(sp)
    1d3c:	10003126 	beq	r2,zero,1e04 <__call_exitprocs+0x174>
    1d40:	dfc00c17 	ldw	ra,48(sp)
    1d44:	df000b17 	ldw	fp,44(sp)
    1d48:	ddc00a17 	ldw	r23,40(sp)
    1d4c:	dd800917 	ldw	r22,36(sp)
    1d50:	dd400817 	ldw	r21,32(sp)
    1d54:	dd000717 	ldw	r20,28(sp)
    1d58:	dcc00617 	ldw	r19,24(sp)
    1d5c:	dc800517 	ldw	r18,20(sp)
    1d60:	dc400417 	ldw	r17,16(sp)
    1d64:	dc000317 	ldw	r16,12(sp)
    1d68:	dec00d04 	addi	sp,sp,52
    1d6c:	f800283a 	ret
    1d70:	8409883a 	add	r4,r16,r16
    1d74:	88c00117 	ldw	r3,4(r17)
    1d78:	2105883a 	add	r2,r4,r4
    1d7c:	1445883a 	add	r2,r2,r17
    1d80:	18ffffc4 	addi	r3,r3,-1
    1d84:	11800217 	ldw	r6,8(r2)
    1d88:	1c001526 	beq	r3,r16,1de0 <__call_exitprocs+0x150>
    1d8c:	10000215 	stw	zero,8(r2)
    1d90:	303fe726 	beq	r6,zero,1d30 <__call_exitprocs+0xa0>
    1d94:	00c00044 	movi	r3,1
    1d98:	1c06983a 	sll	r3,r3,r16
    1d9c:	90804017 	ldw	r2,256(r18)
    1da0:	8cc00117 	ldw	r19,4(r17)
    1da4:	1884703a 	and	r2,r3,r2
    1da8:	10001426 	beq	r2,zero,1dfc <__call_exitprocs+0x16c>
    1dac:	90804117 	ldw	r2,260(r18)
    1db0:	1884703a 	and	r2,r3,r2
    1db4:	10000c1e 	bne	r2,zero,1de8 <__call_exitprocs+0x158>
    1db8:	2105883a 	add	r2,r4,r4
    1dbc:	1485883a 	add	r2,r2,r18
    1dc0:	11400017 	ldw	r5,0(r2)
    1dc4:	e009883a 	mov	r4,fp
    1dc8:	303ee83a 	callr	r6
    1dcc:	88800117 	ldw	r2,4(r17)
    1dd0:	98bfc81e 	bne	r19,r2,1cf4 <__call_exitprocs+0x64>
    1dd4:	b8800017 	ldw	r2,0(r23)
    1dd8:	147fd526 	beq	r2,r17,1d30 <__call_exitprocs+0xa0>
    1ddc:	003fc506 	br	1cf4 <__call_exitprocs+0x64>
    1de0:	8c000115 	stw	r16,4(r17)
    1de4:	003fea06 	br	1d90 <__call_exitprocs+0x100>
    1de8:	2105883a 	add	r2,r4,r4
    1dec:	1485883a 	add	r2,r2,r18
    1df0:	11000017 	ldw	r4,0(r2)
    1df4:	303ee83a 	callr	r6
    1df8:	003ff406 	br	1dcc <__call_exitprocs+0x13c>
    1dfc:	303ee83a 	callr	r6
    1e00:	003ff206 	br	1dcc <__call_exitprocs+0x13c>
    1e04:	88800117 	ldw	r2,4(r17)
    1e08:	1000081e 	bne	r2,zero,1e2c <__call_exitprocs+0x19c>
    1e0c:	89000017 	ldw	r4,0(r17)
    1e10:	20000726 	beq	r4,zero,1e30 <__call_exitprocs+0x1a0>
    1e14:	b9000015 	stw	r4,0(r23)
    1e18:	8809883a 	mov	r4,r17
    1e1c:	00000000 	call	0 <__alt_mem_RAM>
    1e20:	bc400017 	ldw	r17,0(r23)
    1e24:	883fb71e 	bne	r17,zero,1d04 <__call_exitprocs+0x74>
    1e28:	003fc506 	br	1d40 <__call_exitprocs+0xb0>
    1e2c:	89000017 	ldw	r4,0(r17)
    1e30:	882f883a 	mov	r23,r17
    1e34:	2023883a 	mov	r17,r4
    1e38:	883fb21e 	bne	r17,zero,1d04 <__call_exitprocs+0x74>
    1e3c:	003fc006 	br	1d40 <__call_exitprocs+0xb0>

00001e40 <_exit>:
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    1e40:	20000226 	beq	r4,zero,1e4c <_exit+0xc>
    ALT_SIM_FAIL();
    1e44:	002af070 	cmpltui	zero,zero,43969
    1e48:	00000106 	br	1e50 <_exit+0x10>
  } else {
    ALT_SIM_PASS();
    1e4c:	002af0b0 	cmpltui	zero,zero,43970
    1e50:	003fff06 	br	1e50 <_exit+0x10>
    1e54:	00001c8c 	andi	zero,zero,114
