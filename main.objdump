
H:/E_325/Lab/nios_alarm_clock/main.elf:     file format elf32-littlenios2
H:/E_325/Lab/nios_alarm_clock/main.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000168

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00002038 memsz 0x00002038 flags r-x
    LOAD off    0x00003058 vaddr 0x00002058 paddr 0x00003794 align 2**12
         filesz 0x0000173c memsz 0x0000173c flags rw-
    LOAD off    0x00004ed0 vaddr 0x00004ed0 paddr 0x00004ed0 align 2**12
         filesz 0x00000000 memsz 0x00000148 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000148  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00001e54  00000168  00000168  00001168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000009c  00001fbc  00001fbc  00002fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000173c  00002058  00003794  00003058  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000148  00004ed0  00004ed0  00004ed0  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00004794  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000558  00000000  00000000  000047c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000ae2  00000000  00000000  00004d18  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00007ebe  00000000  00000000  000057fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002963  00000000  00000000  0000d6b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00006683  00000000  00000000  0001001b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000920  00000000  00000000  000166a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001932  00000000  00000000  00016fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001b15  00000000  00000000  000188f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  0001a408  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000180  00000000  00000000  0001a428  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0001c3d1  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0001c3d4  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0001c3e0  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0001c3e1  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000008  00000000  00000000  0001c3e2  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000008  00000000  00000000  0001c3ea  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000008  00000000  00000000  0001c3f2  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  0001c3fa  2**0
                  CONTENTS, READONLY
 25 .jdi          000050cc  00000000  00000000  0001c405  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     000520ec  00000000  00000000  000214d1  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000168 l    d  .text	00000000 .text
00001fbc l    d  .rodata	00000000 .rodata
00002058 l    d  .rwdata	00000000 .rwdata
00004ed0 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001a0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hex.c
00000000 l    df *ABS*	00000000 main.c
00000204 l     F .text	00000020 handle_button_interrupts
00000000 l    df *ABS*	00000000 timers.c
00000000 l    df *ABS*	00000000 util.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0000071c l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000206c l     O .rwdata	00001060 JTAGUART
000030cc l     O .rwdata	0000002c LCD
000030f8 l     O .rwdata	0000002c KEY
00003124 l     O .rwdata	0000002c SevenSeg30
00003150 l     O .rwdata	0000002c SevenSeg74
0000317c l     O .rwdata	0000002c SW
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00000c88 l     F .text	00000054 altera_avalon_jtag_uart_timeout
00000d54 l     F .text	00000134 altera_avalon_jtag_uart_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00001224 l     F .text	0000003c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
000016e0 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000017e8 l     F .text	00000064 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
00003350 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00001df0 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
000001d0 g     F .text	00000034 write_current_time_to_bot_row
00000a88 g     F .text	00000050 alt_main
00004f18 g     O .bss	00000100 alt_irq
00003794 g       *ABS*	00000000 __flash_rwdata_start
00001324 g     F .text	00000010 alt_up_character_lcd_send_cmd
00002058 g     O .rwdata	00000011 top_row
00004f04 g     O .bss	00000011 bot_row
000004f0 g     F .text	00000018 timer1_isr
00000000  w      *UND*	00000000 __errno
00001260 g     F .text	0000001c get_DDRAM_addr
00000000 g     F .entry	0000001c __reset
00004ee0 g     O .bss	00000004 edge_capture
00000020 g       *ABS*	00000000 __flash_exceptions_start
00004f00 g     O .bss	00000004 errno
00004ef0 g     O .bss	00000004 alt_argv
0000b750 g       *ABS*	00000000 _gp
000005d4 g     F .text	0000013c update_time
00003750 g     O .rwdata	00000004 hours_1
000031d0 g     O .rwdata	00000180 alt_fd_list
00000508 g     F .text	0000000c stop_timer_0
000004e4 g     F .text	0000000c stop_timer_1
00001758 g     F .text	00000070 alt_find_dev
00000868 g     F .text	000000a0 memcpy
000012f4 g     F .text	00000020 alt_up_character_lcd_write_fd
0000184c g     F .text	00000098 alt_io_redirect
00000580 g     F .text	00000054 init_timer_0
000001a4 g     F .text	00000014 hex_off
000002c8 g     F .text	0000005c handle_key_press
00000efc g     F .text	00000168 altera_avalon_jtag_uart_read
00000858 g     F .text	00000008 __udivsi3
00001c94 g     F .text	0000003c alt_icache_flush
00003758 g     O .rwdata	00000004 min_1
00000710 g     F .text	00000004 update_hour
00003760 g     O .rwdata	00000004 sec_1
0000377c g     O .rwdata	00000004 alt_max_fd
00000908 g     F .text	000000bc alt_irq_register
00003790 g     O .rwdata	00000004 _global_impure_ptr
00005018 g       *ABS*	00000000 __bss_end
00001ab8 g     F .text	000000ac alt_tick
00001a84 g     F .text	00000034 alt_alarm_stop
00004ee8 g     O .bss	00000004 alt_irq_active
000000ec g     F .exceptions	0000007c alt_irq_handler
000031a8 g     O .rwdata	00000028 alt_dev_null
00004ee4 g     O .bss	00000004 char_lcd_dev
00001334 g     F .text	0000001c alt_up_character_lcd_cursor_blink_on
000001b8 g     F .text	00000018 hex_on
000016dc g     F .text	00000004 alt_dcache_flush_all
0000375c g     O .rwdata	00000004 min_2
00003794 g       *ABS*	00000000 __ram_rwdata_end
0000052c g     F .text	00000054 init_timer_1
00003774 g     O .rwdata	00000008 alt_dev_list
00002058 g       *ABS*	00000000 __ram_rodata_end
00000860 g     F .text	00000008 __umodsi3
00005018 g       *ABS*	00000000 end
00000cdc g     F .text	00000078 altera_avalon_jtag_uart_init
00006000 g       *ABS*	00000000 __alt_stack_pointer
000011e0 g     F .text	00000044 alt_avalon_timer_sc_init
00001064 g     F .text	0000017c altera_avalon_jtag_uart_write
000012c8 g     F .text	0000002c alt_up_character_lcd_write
00001df4 g     F .text	000001b0 __call_exitprocs
00000168 g     F .text	0000003c _start
00004ef8 g     O .bss	00000004 _alt_tick_rate
00004efc g     O .bss	00000004 _alt_nticks
00000af8 g     F .text	000000c0 alt_sys_init
000013d8 g     F .text	00000090 alt_up_character_lcd_shift_display
0000136c g     F .text	0000006c alt_up_character_lcd_erase_pos
00000c50 g     F .text	00000038 altera_avalon_jtag_uart_close
00002058 g       *ABS*	00000000 __ram_rwdata_start
00001fbc g       *ABS*	00000000 __ram_rodata_start
00000c28 g     F .text	00000028 altera_avalon_jtag_uart_read_fd
00001c28 g     F .text	0000006c alt_get_fd
00001d08 g     F .text	00000074 memcmp
00000bd8 g     F .text	00000028 altera_avalon_jtag_uart_close_fd
00005018 g       *ABS*	00000000 __alt_stack_base
00000bb8 g     F .text	00000020 altera_avalon_jtag_uart_ioctl_fd
00004ed8 g     O .bss	00000004 tenths
00001b6c g     F .text	000000bc alt_find_file
000016e8 g     F .text	00000070 alt_dev_llist_insert
00000718 g     F .text	00000004 update_sec
00004ed0 g       *ABS*	00000000 __bss_start
00000324 g     F .text	000001c0 main
00000000 g       *ABS*	00000000 __alt_mem_RAM
00004ef4 g     O .bss	00000004 alt_envp
00000c00 g     F .text	00000028 altera_avalon_jtag_uart_write_fd
00001468 g     F .text	00000090 alt_up_character_lcd_shift_cursor
00003780 g     O .rwdata	00000004 alt_errno
00004ed4 g     O .bss	00000004 seconds
00000224 g     F .text	000000a4 reset_display
00003754 g     O .rwdata	00000004 hours_2
00000798 g     F .text	00000060 __divsi3
0000154c g     F .text	00000020 alt_up_character_lcd_open_dev
00001314 g     F .text	00000010 alt_up_character_lcd_init
00001fbc g       *ABS*	00000000 __flash_rodata_start
00000ad8 g     F .text	00000020 alt_irq_init
00001a60 g     F .text	00000024 alt_release_fd
00001350 g     F .text	0000001c alt_up_character_lcd_cursor_off
0000378c g     O .rwdata	00000004 _impure_ptr
00004eec g     O .bss	00000004 alt_argc
00000020 g       .exceptions	00000000 alt_irq_entry
0000376c g     O .rwdata	00000008 alt_fs_list
00003764 g     O .rwdata	00000004 sec_2
00000020 g       *ABS*	00000000 __ram_exceptions_start
00003794 g       *ABS*	00000000 _edata
00005018 g       *ABS*	00000000 _end
00000168 g       *ABS*	00000000 __ram_exceptions_end
00000e88 g     F .text	00000074 altera_avalon_jtag_uart_ioctl
00001b64 g     F .text	00000008 altera_nios2_qsys_irq_init
00001cd0 g     F .text	00000038 exit
000007f8 g     F .text	00000060 __modsi3
00006000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
0000127c g     F .text	0000004c alt_up_character_lcd_string
00001fa4 g     F .text	00000014 _exit
0000156c g     F .text	00000094 alt_alarm_start
00004ed0 g     O .bss	00000004 minutes
00001d7c g     F .text	00000074 strlen
000018e4 g     F .text	0000017c open
00000514 g     F .text	00000018 timer0_isr
000017c8 g     F .text	00000020 alt_icache_flush_all
00000714 g     F .text	00000004 update_min
000014f8 g     F .text	00000054 alt_up_character_lcd_set_cursor_pos
00003768 g     O .rwdata	00000004 alt_priority_mask
00003784 g     O .rwdata	00000008 alt_alarm_list
00001600 g     F .text	000000dc close
000009c4 g     F .text	000000c4 alt_load
00004edc g     O .bss	00000004 half_second
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08405a14 	ori	at,at,360
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defffe04 	addi	sp,sp,-8
  f0:	dfc00115 	stw	ra,4(sp)
  f4:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  f8:	000d313a 	rdctl	r6,ipending
  fc:	04000034 	movhi	r16,0
 100:	8413c604 	addi	r16,r16,20248
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 104:	3080004c 	andi	r2,r6,1
 108:	1005003a 	cmpeq	r2,r2,zero
 10c:	10000a1e 	bne	r2,zero,138 <alt_irq_handler+0x4c>
 110:	000b883a 	mov	r5,zero
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 114:	280490fa 	slli	r2,r5,3
 118:	1405883a 	add	r2,r2,r16
 11c:	10c00017 	ldw	r3,0(r2)
 120:	11000117 	ldw	r4,4(r2)
 124:	183ee83a 	callr	r3
 128:	0005313a 	rdctl	r2,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
 12c:	10000a26 	beq	r2,zero,158 <alt_irq_handler+0x6c>
 130:	100d883a 	mov	r6,r2
 134:	003ff306 	br	104 <alt_irq_handler+0x18>
 138:	00c00044 	movi	r3,1
 13c:	000b883a 	mov	r5,zero
 140:	1809883a 	mov	r4,r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 144:	18c7883a 	add	r3,r3,r3
      i++;
 148:	290b883a 	add	r5,r5,r4
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 14c:	30c4703a 	and	r2,r6,r3
 150:	103ff01e 	bne	r2,zero,114 <alt_irq_handler+0x28>
 154:	003ffb06 	br	144 <alt_irq_handler+0x58>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 158:	dfc00117 	ldw	ra,4(sp)
 15c:	dc000017 	ldw	r16,0(sp)
 160:	dec00204 	addi	sp,sp,8
 164:	f800283a 	ret

Disassembly of section .text:

00000168 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     168:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
     16c:	ded80014 	ori	sp,sp,24576

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     170:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
     174:	d6add414 	ori	gp,gp,46928
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     178:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
     17c:	1093b414 	ori	r2,r2,20176

    movhi r3, %hi(__bss_end)
     180:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
     184:	18d40614 	ori	r3,r3,20504

    beq r2, r3, 1f
     188:	10c00326 	beq	r2,r3,198 <_start+0x30>

0:
    stw zero, (r2)
     18c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     190:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     194:	10fffd36 	bltu	r2,r3,18c <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     198:	00009c40 	call	9c4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     19c:	0000a880 	call	a88 <alt_main>

000001a0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1a0:	003fff06 	br	1a0 <alt_after_alt_main>

000001a4 <hex_off>:
	IOWR_ALTERA_AVALON_PIO_DATA(SEVENSEG30_BASE, 0xFFFFFFFF);
	IOWR_ALTERA_AVALON_PIO_DATA(SEVENSEG74_BASE, 0xFFFFFFFF);
}

void hex_off() {
	IOWR_ALTERA_AVALON_PIO_DATA(SEVENSEG30_BASE, 0x00000000);
     1a4:	00ac0014 	movui	r2,45056
     1a8:	10000035 	stwio	zero,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(SEVENSEG74_BASE, 0x00000000);
     1ac:	00b00014 	movui	r2,49152
     1b0:	10000035 	stwio	zero,0(r2)
     1b4:	f800283a 	ret

000001b8 <hex_on>:
#include "hex.h"

void hex_on() {
	IOWR_ALTERA_AVALON_PIO_DATA(SEVENSEG30_BASE, 0xFFFFFFFF);
     1b8:	00bfffc4 	movi	r2,-1
     1bc:	00ec0014 	movui	r3,45056
     1c0:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(SEVENSEG74_BASE, 0xFFFFFFFF);
     1c4:	00f00014 	movui	r3,49152
     1c8:	18800035 	stwio	r2,0(r3)
}
     1cc:	f800283a 	ret

000001d0 <write_current_time_to_bot_row>:
	seconds = 0;
	tenths = 0;
}

// For the Key 2 press
void write_current_time_to_bot_row() {
     1d0:	deffff04 	addi	sp,sp,-4
     1d4:	dfc00015 	stw	ra,0(sp)
	alt_up_character_lcd_set_cursor_pos(char_lcd_dev, 0, 1);
     1d8:	d125e517 	ldw	r4,-26732(gp)
     1dc:	000b883a 	mov	r5,zero
     1e0:	01800044 	movi	r6,1
     1e4:	00014f80 	call	14f8 <alt_up_character_lcd_set_cursor_pos>
	alt_up_character_lcd_string(char_lcd_dev, top_row);
     1e8:	d125e517 	ldw	r4,-26732(gp)
     1ec:	01400034 	movhi	r5,0
     1f0:	29481604 	addi	r5,r5,8280
     1f4:	000127c0 	call	127c <alt_up_character_lcd_string>
}
     1f8:	dfc00017 	ldw	ra,0(sp)
     1fc:	dec00104 	addi	sp,sp,4
     200:	f800283a 	ret

00000204 <handle_button_interrupts>:
	volatile int* edge_capture_ptr = (volatile int*) context;
	/*
	* Read the edge capture register on the button PIO.
	* Store value.
	*/
	*edge_capture_ptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(KEY_BASE);
     204:	00f40314 	movui	r3,53260
     208:	18800037 	ldwio	r2,0(r3)
     20c:	20800015 	stw	r2,0(r4)
	/* Write to the edge capture register to reset it. */
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEY_BASE, 0);
     210:	18000035 	stwio	zero,0(r3)
	/* reset interrupt capability for the Button PIO. */
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(KEY_BASE, 0xf);
     214:	00c003c4 	movi	r3,15
     218:	00b40214 	movui	r2,53256
     21c:	10c00035 	stwio	r3,0(r2)
}
     220:	f800283a 	ret

00000224 <reset_display>:
char bot_row[17];

/* Functions used for updating displays */

// For the Key 1 press
void reset_display() {
     224:	defffd04 	addi	sp,sp,-12
     228:	dfc00215 	stw	ra,8(sp)
     22c:	dc400115 	stw	r17,4(sp)
     230:	dc000015 	stw	r16,0(sp)
	// Clear the top row
	strcpy(top_row, "    12:00:00    ");
     234:	04000034 	movhi	r16,0
     238:	84081604 	addi	r16,r16,8280
     23c:	04400444 	movi	r17,17
     240:	8009883a 	mov	r4,r16
     244:	01400034 	movhi	r5,0
     248:	2947ef04 	addi	r5,r5,8124
     24c:	880d883a 	mov	r6,r17
     250:	00008680 	call	868 <memcpy>
	alt_up_character_lcd_set_cursor_pos(char_lcd_dev, 0, 0);
     254:	d125e517 	ldw	r4,-26732(gp)
     258:	000b883a 	mov	r5,zero
     25c:	000d883a 	mov	r6,zero
     260:	00014f80 	call	14f8 <alt_up_character_lcd_set_cursor_pos>
	alt_up_character_lcd_string(char_lcd_dev, top_row);
     264:	d125e517 	ldw	r4,-26732(gp)
     268:	800b883a 	mov	r5,r16
     26c:	000127c0 	call	127c <alt_up_character_lcd_string>
	
	// Clear the bottom row
	strcpy(bot_row, "                ");
     270:	04000034 	movhi	r16,0
     274:	8413c104 	addi	r16,r16,20228
     278:	8009883a 	mov	r4,r16
     27c:	01400034 	movhi	r5,0
     280:	2947f404 	addi	r5,r5,8144
     284:	880d883a 	mov	r6,r17
     288:	00008680 	call	868 <memcpy>
	alt_up_character_lcd_set_cursor_pos(char_lcd_dev, 0, 1);
     28c:	d125e517 	ldw	r4,-26732(gp)
     290:	000b883a 	mov	r5,zero
     294:	01800044 	movi	r6,1
     298:	00014f80 	call	14f8 <alt_up_character_lcd_set_cursor_pos>
	alt_up_character_lcd_string(char_lcd_dev, bot_row);
     29c:	d125e517 	ldw	r4,-26732(gp)
     2a0:	800b883a 	mov	r5,r16
     2a4:	000127c0 	call	127c <alt_up_character_lcd_string>
	
	// Reset our counters
	minutes = 0;
     2a8:	d025e015 	stw	zero,-26752(gp)
	seconds = 0;
     2ac:	d025e115 	stw	zero,-26748(gp)
	tenths = 0;
     2b0:	d025e215 	stw	zero,-26744(gp)
}
     2b4:	dfc00217 	ldw	ra,8(sp)
     2b8:	dc400117 	ldw	r17,4(sp)
     2bc:	dc000017 	ldw	r16,0(sp)
     2c0:	dec00304 	addi	sp,sp,12
     2c4:	f800283a 	ret

000002c8 <handle_key_press>:
						edge_capture_ptr,
						handle_button_interrupts );
}

/* Our function that handles the key presses */
void handle_key_press() {
     2c8:	deffff04 	addi	sp,sp,-4
     2cc:	dfc00015 	stw	ra,0(sp)
	// Key 1
	if (edge_capture == 2) {
     2d0:	d0e5e417 	ldw	r3,-26736(gp)
     2d4:	00800084 	movi	r2,2
     2d8:	1880021e 	bne	r3,r2,2e4 <handle_key_press+0x1c>
		reset_display();
     2dc:	00002240 	call	224 <reset_display>
     2e0:	00000c06 	br	314 <handle_key_press+0x4c>
	}
	// Key 2
	else if (edge_capture == 4) {
     2e4:	d0e5e417 	ldw	r3,-26736(gp)
     2e8:	00800104 	movi	r2,4
     2ec:	1880021e 	bne	r3,r2,2f8 <handle_key_press+0x30>
		write_current_time_to_bot_row();
     2f0:	00001d00 	call	1d0 <write_current_time_to_bot_row>
     2f4:	00000706 	br	314 <handle_key_press+0x4c>
	}
	// Key 3
	else if (edge_capture == 8) {
     2f8:	d0e5e417 	ldw	r3,-26736(gp)
     2fc:	00800204 	movi	r2,8
     300:	1880041e 	bne	r3,r2,314 <handle_key_press+0x4c>
		half_second = 1;
     304:	00800044 	movi	r2,1
     308:	d0a5e315 	stw	r2,-26740(gp)
		init_timer_1(&half_second);
     30c:	d125e304 	addi	r4,gp,-26740
     310:	000052c0 	call	52c <init_timer_1>
	}
	
	// Reset our edge capture back to 0
	edge_capture = 0;
     314:	d025e415 	stw	zero,-26736(gp)
}
     318:	dfc00017 	ldw	ra,0(sp)
     31c:	dec00104 	addi	sp,sp,4
     320:	f800283a 	ret

00000324 <main>:

int main(void)
{
     324:	defffa04 	addi	sp,sp,-24
     328:	dfc00515 	stw	ra,20(sp)
     32c:	dd000415 	stw	r20,16(sp)
     330:	dcc00315 	stw	r19,12(sp)
     334:	dc800215 	stw	r18,8(sp)
     338:	dc400115 	stw	r17,4(sp)
     33c:	dc000015 	stw	r16,0(sp)
	// open the Character LCD port
	char_lcd_dev = alt_up_character_lcd_open_dev ("/dev/LCD");
     340:	01000034 	movhi	r4,0
     344:	2107f904 	addi	r4,r4,8164
     348:	000154c0 	call	154c <alt_up_character_lcd_open_dev>
     34c:	1009883a 	mov	r4,r2
     350:	d0a5e515 	stw	r2,-26732(gp)
	/* Initialize the character display */
	alt_up_character_lcd_init(char_lcd_dev);
     354:	00013140 	call	1314 <alt_up_character_lcd_init>
	
	
	// Initialize the Timers
	init_timer_0(&tenths);
     358:	d125e204 	addi	r4,gp,-26744
     35c:	00005800 	call	580 <init_timer_0>
{
	/* Recast the edge_capture pointer to match the
	alt_irq_register() function prototype. */
	void* edge_capture_ptr = (void*) &edge_capture;
	/* Enable all 4 button interrupts. */
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(KEY_BASE, 0xf);
     360:	00c003c4 	movi	r3,15
     364:	00b40214 	movui	r2,53256
     368:	10c00035 	stwio	r3,0(r2)
	/* Reset the edge capture register. */
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEY_BASE, 0x0);
     36c:	00b40314 	movui	r2,53260
     370:	10000035 	stwio	zero,0(r2)
	/* Register the ISR. */
	alt_irq_register( 	KEY_IRQ,
     374:	010000c4 	movi	r4,3
     378:	d165e404 	addi	r5,gp,-26736
     37c:	01800034 	movhi	r6,0
     380:	31808104 	addi	r6,r6,516
     384:	00009080 	call	908 <alt_irq_register>
     388:	0021883a 	mov	r16,zero
     38c:	05000034 	movhi	r20,0
     390:	a5081604 	addi	r20,r20,8280
     394:	04800284 	movi	r18,10
     398:	04c00c04 	movi	r19,48
	while(1)  {
		// check the state of the context integer updated by various ISR functions	
		// Act accordingly, which means
		
		// Handle if a key was pressed
		if (edge_capture) {
     39c:	d0a5e417 	ldw	r2,-26736(gp)
     3a0:	10000126 	beq	r2,zero,3a8 <main+0x84>
			handle_key_press();
     3a4:	00002c80 	call	2c8 <handle_key_press>
		}
		
		// Flash on and off our displays
		if (half_second) {
     3a8:	d0a5e317 	ldw	r2,-26740(gp)
     3ac:	10000d26 	beq	r2,zero,3e4 <main+0xc0>
			// Odd numbers
			if (half_second % 2) {
     3b0:	d0a5e317 	ldw	r2,-26740(gp)
     3b4:	1080004c 	andi	r2,r2,1
     3b8:	1005003a 	cmpeq	r2,r2,zero
     3bc:	1000021e 	bne	r2,zero,3c8 <main+0xa4>
				// Turn hex on
				hex_on();
     3c0:	00001b80 	call	1b8 <hex_on>
     3c4:	00000106 	br	3cc <main+0xa8>
			}
			else {
				// Turn hex off
				hex_off();
     3c8:	00001a40 	call	1a4 <hex_off>
			}
			
			if (half_second == 7) {
     3cc:	d0e5e317 	ldw	r3,-26740(gp)
     3d0:	008001c4 	movi	r2,7
     3d4:	1880031e 	bne	r3,r2,3e4 <main+0xc0>
				half_second = 0;
     3d8:	d025e315 	stw	zero,-26740(gp)
				// Turn hex off
				hex_off();
     3dc:	00001a40 	call	1a4 <hex_off>
				// Turn off timer.
				stop_timer_1();
     3e0:	00004e40 	call	4e4 <stop_timer_1>
			}
		}
		
		// Update the clock
		if (tenths != old_tenths) {
     3e4:	d0a5e217 	ldw	r2,-26744(gp)
     3e8:	80bfec26 	beq	r16,r2,39c <main+0x78>
			// Increment our seconds
			if (tenths >= 10) {
     3ec:	d0e5e217 	ldw	r3,-26744(gp)
     3f0:	00800244 	movi	r2,9
     3f4:	10c0310e 	bge	r2,r3,4bc <main+0x198>
				seconds++;
     3f8:	d0a5e117 	ldw	r2,-26748(gp)
     3fc:	00c00044 	movi	r3,1
     400:	10c5883a 	add	r2,r2,r3
     404:	d0a5e115 	stw	r2,-26748(gp)
				if (seconds == 60) {
     408:	d165e117 	ldw	r5,-26748(gp)
     40c:	00800f04 	movi	r2,60
     410:	2880171e 	bne	r5,r2,470 <main+0x14c>
					minutes = (minutes + 1) % 60;
     414:	d125e017 	ldw	r4,-26752(gp)
     418:	20c9883a 	add	r4,r4,r3
     41c:	00007f80 	call	7f8 <__modsi3>
     420:	d0a5e015 	stw	r2,-26752(gp)
					seconds = 0;
     424:	d025e115 	stw	zero,-26748(gp)
					
					// Write our minutes out to the top row
					top_row[min_1] = '0' + (minutes - (minutes % 10)) / 10;
     428:	d465e017 	ldw	r17,-26752(gp)
     42c:	d125e017 	ldw	r4,-26752(gp)
     430:	d4200217 	ldw	r16,-32760(gp)
     434:	8521883a 	add	r16,r16,r20
     438:	900b883a 	mov	r5,r18
     43c:	00007f80 	call	7f8 <__modsi3>
     440:	8889c83a 	sub	r4,r17,r2
     444:	900b883a 	mov	r5,r18
     448:	00007980 	call	798 <__divsi3>
     44c:	14c5883a 	add	r2,r2,r19
     450:	80800005 	stb	r2,0(r16)
					top_row[min_2] = '0' + minutes % 10;
     454:	d125e017 	ldw	r4,-26752(gp)
     458:	d4200317 	ldw	r16,-32756(gp)
     45c:	8521883a 	add	r16,r16,r20
     460:	900b883a 	mov	r5,r18
     464:	00007f80 	call	7f8 <__modsi3>
     468:	14c5883a 	add	r2,r2,r19
     46c:	80800005 	stb	r2,0(r16)
				}
				top_row[sec_1] = '0' + (seconds - (seconds % 10)) / 10;
     470:	d465e117 	ldw	r17,-26748(gp)
     474:	d125e117 	ldw	r4,-26748(gp)
     478:	d4200417 	ldw	r16,-32752(gp)
     47c:	8521883a 	add	r16,r16,r20
     480:	900b883a 	mov	r5,r18
     484:	00007f80 	call	7f8 <__modsi3>
     488:	8889c83a 	sub	r4,r17,r2
     48c:	900b883a 	mov	r5,r18
     490:	00007980 	call	798 <__divsi3>
     494:	14c5883a 	add	r2,r2,r19
     498:	80800005 	stb	r2,0(r16)
				top_row[sec_2] = '0' + seconds % 10;
     49c:	d125e117 	ldw	r4,-26748(gp)
     4a0:	d4200517 	ldw	r16,-32748(gp)
     4a4:	8521883a 	add	r16,r16,r20
     4a8:	900b883a 	mov	r5,r18
     4ac:	00007f80 	call	7f8 <__modsi3>
     4b0:	14c5883a 	add	r2,r2,r19
     4b4:	80800005 	stb	r2,0(r16)
				tenths = 0;
     4b8:	d025e215 	stw	zero,-26744(gp)
			}
			old_tenths = tenths;
     4bc:	d425e217 	ldw	r16,-26744(gp)
			alt_up_character_lcd_set_cursor_pos(char_lcd_dev, 0, 0);
     4c0:	d125e517 	ldw	r4,-26732(gp)
     4c4:	000b883a 	mov	r5,zero
     4c8:	000d883a 	mov	r6,zero
     4cc:	00014f80 	call	14f8 <alt_up_character_lcd_set_cursor_pos>
			alt_up_character_lcd_string(char_lcd_dev, top_row);
     4d0:	d125e517 	ldw	r4,-26732(gp)
     4d4:	01400034 	movhi	r5,0
     4d8:	29481604 	addi	r5,r5,8280
     4dc:	000127c0 	call	127c <alt_up_character_lcd_string>
     4e0:	003fae06 	br	39c <main+0x78>

000004e4 <stop_timer_1>:
	// Register the ISR. 
	alt_irq_register(TIMER_1_IRQ, half_second_ptr, timer1_isr);
}

void stop_timer_1() {
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_1_BASE, 0x0);
     4e4:	00a40114 	movui	r2,36868
     4e8:	10000035 	stwio	zero,0(r2)
     4ec:	f800283a 	ret

000004f0 <timer1_isr>:
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, 0x0);
}

void timer1_isr(void * context, alt_32 id) {
	volatile int* contextTimerPtr = (volatile int*) context;
	*contextTimerPtr = *contextTimerPtr + 1;
     4f0:	20800017 	ldw	r2,0(r4)
     4f4:	10800044 	addi	r2,r2,1
     4f8:	20800015 	stw	r2,0(r4)
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_1_BASE, 0x0);
     4fc:	00a40014 	movui	r2,36864
     500:	10000035 	stwio	zero,0(r2)
}
     504:	f800283a 	ret

00000508 <stop_timer_0>:
	// Register the ISR. 
	alt_irq_register(TIMER_0_IRQ, tenths_ptr, timer0_isr);
}

void stop_timer_0() {
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, 0x0);
     508:	00a00114 	movui	r2,32772
     50c:	10000035 	stwio	zero,0(r2)
}
     510:	f800283a 	ret

00000514 <timer0_isr>:
#include "timers.h"

/*		Timer setups 		*/
void timer0_isr(void * context, alt_32 id) {
	volatile int* contextTimerPtr = (volatile int*) context;
	*contextTimerPtr = *contextTimerPtr + 1;
     514:	20800017 	ldw	r2,0(r4)
     518:	10800044 	addi	r2,r2,1
     51c:	20800015 	stw	r2,0(r4)
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE, 0x0);
     520:	00a00014 	movui	r2,32768
     524:	10000035 	stwio	zero,0(r2)
}
     528:	f800283a 	ret

0000052c <init_timer_1>:
	volatile int* contextTimerPtr = (volatile int*) context;
	*contextTimerPtr = *contextTimerPtr + 1;
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_1_BASE, 0x0);
}

void init_timer_1(volatile int *half_second_int_ptr) {
     52c:	deffff04 	addi	sp,sp,-4
     530:	dfc00015 	stw	ra,0(sp)
     534:	200b883a 	mov	r5,r4
	// Timer base is TIMER_1_BASE
	// Timer clock is 50,000,000 so to increment a counter every half second, move it every 50,000,000/2 ticks.
	// high 0x017D
	// low 0x7840
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_1_BASE, 0);
     538:	00a40014 	movui	r2,36864
     53c:	10000035 	stwio	zero,0(r2)
	// Used to use ALTERA_AVALON_TIMER_CONTROL_START_MSK, not sure which I need	
	IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_1_BASE, 0x017D);
     540:	00c05f44 	movi	r3,381
     544:	00a40314 	movui	r2,36876
     548:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_1_BASE, 0x7840);
     54c:	00de1004 	movi	r3,30784
     550:	00a40214 	movui	r2,36872
     554:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_1_BASE, 0x7);
     558:	00c001c4 	movi	r3,7
     55c:	00a40114 	movui	r2,36868
     560:	10c00035 	stwio	r3,0(r2)
	
	void* half_second_ptr = (void *) half_second_int_ptr;
	// Register the ISR. 
	alt_irq_register(TIMER_1_IRQ, half_second_ptr, timer1_isr);
     564:	01000044 	movi	r4,1
     568:	01800034 	movhi	r6,0
     56c:	31813c04 	addi	r6,r6,1264
     570:	00009080 	call	908 <alt_irq_register>
}
     574:	dfc00017 	ldw	ra,0(sp)
     578:	dec00104 	addi	sp,sp,4
     57c:	f800283a 	ret

00000580 <init_timer_0>:
	volatile int* contextTimerPtr = (volatile int*) context;
	*contextTimerPtr = *contextTimerPtr + 1;
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE, 0x0);
}

void init_timer_0(volatile int *tenths_int_ptr) {
     580:	deffff04 	addi	sp,sp,-4
     584:	dfc00015 	stw	ra,0(sp)
     588:	200b883a 	mov	r5,r4
	// Timer base is TIMER_0_BASE
	// Timer clock is 50,000,000 so to increment a counter, move it every 5,000,000 ticks.
	// high 0x004C
	// low 0x4B40
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE, 0);
     58c:	00a00014 	movui	r2,32768
     590:	10000035 	stwio	zero,0(r2)
	// Used to use ALTERA_AVALON_TIMER_CONTROL_START_MSK, not sure which I need	
	IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_0_BASE, 0x004C);
     594:	00c01304 	movi	r3,76
     598:	00a00314 	movui	r2,32780
     59c:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_0_BASE, 0x4B40);
     5a0:	00d2d004 	movi	r3,19264
     5a4:	00a00214 	movui	r2,32776
     5a8:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, 0x7);
     5ac:	00c001c4 	movi	r3,7
     5b0:	00a00114 	movui	r2,32772
     5b4:	10c00035 	stwio	r3,0(r2)
	
	void* tenths_ptr = (void *) tenths_int_ptr;
	// Register the ISR. 
	alt_irq_register(TIMER_0_IRQ, tenths_ptr, timer0_isr);
     5b8:	0009883a 	mov	r4,zero
     5bc:	01800034 	movhi	r6,0
     5c0:	31814504 	addi	r6,r6,1300
     5c4:	00009080 	call	908 <alt_irq_register>
}
     5c8:	dfc00017 	ldw	ra,0(sp)
     5cc:	dec00104 	addi	sp,sp,4
     5d0:	f800283a 	ret

000005d4 <update_time>:


char * update_time(int *old_tenths_ptr, volatile int *tenths_ptr, int *seconds_ptr, int *minutes_ptr, int *hours_ptr, int tenths_displayed) {
     5d4:	defff404 	addi	sp,sp,-48
     5d8:	dfc00b15 	stw	ra,44(sp)
     5dc:	dd400a15 	stw	r21,40(sp)
     5e0:	dd000915 	stw	r20,36(sp)
     5e4:	dcc00815 	stw	r19,32(sp)
     5e8:	dc800715 	stw	r18,28(sp)
     5ec:	dc400615 	stw	r17,24(sp)
     5f0:	dc000515 	stw	r16,20(sp)
     5f4:	202b883a 	mov	r21,r4
     5f8:	2829883a 	mov	r20,r5
     5fc:	3027883a 	mov	r19,r6
     600:	3821883a 	mov	r16,r7
	int min_2 = 8;
	int sec_1 = 10;
	int sec_2 = 11;
	
	
	char top_row[17] = "    00:00:00    ";
     604:	00c00034 	movhi	r3,0
     608:	18c7fc04 	addi	r3,r3,8176
     60c:	18800017 	ldw	r2,0(r3)
     610:	d8800015 	stw	r2,0(sp)
     614:	18800117 	ldw	r2,4(r3)
     618:	d8800115 	stw	r2,4(sp)
     61c:	18800217 	ldw	r2,8(r3)
     620:	d8800215 	stw	r2,8(sp)
     624:	18800317 	ldw	r2,12(r3)
     628:	d8800315 	stw	r2,12(sp)
     62c:	18800403 	ldbu	r2,16(r3)
     630:	d8800405 	stb	r2,16(sp)
	// Increment our seconds
	if ( (*tenths_ptr) >= 10) {
     634:	28c00017 	ldw	r3,0(r5)
     638:	00800244 	movi	r2,9
     63c:	10c0280e 	bge	r2,r3,6e0 <update_time+0x10c>
		(*seconds_ptr) = (*seconds_ptr) + 1;
     640:	30800017 	ldw	r2,0(r6)
     644:	00c00044 	movi	r3,1
     648:	10cb883a 	add	r5,r2,r3
     64c:	31400015 	stw	r5,0(r6)
		if ((*seconds_ptr) == 60) {
     650:	00800f04 	movi	r2,60
     654:	2880131e 	bne	r5,r2,6a4 <update_time+0xd0>
			(*minutes_ptr) = ((*minutes_ptr) + 1) % 60;
     658:	39000017 	ldw	r4,0(r7)
     65c:	20c9883a 	add	r4,r4,r3
     660:	00007f80 	call	7f8 <__modsi3>
     664:	80800015 	stw	r2,0(r16)
			(*seconds_ptr) = 0;
     668:	98000015 	stw	zero,0(r19)
			// Write the new minutes out to the display 
			top_row[min_1] = '0' + ((*minutes_ptr) - ((*minutes_ptr) % 10)) / 10;
     66c:	84400017 	ldw	r17,0(r16)
     670:	04800284 	movi	r18,10
     674:	8809883a 	mov	r4,r17
     678:	900b883a 	mov	r5,r18
     67c:	00007f80 	call	7f8 <__modsi3>
     680:	1021883a 	mov	r16,r2
     684:	8889c83a 	sub	r4,r17,r2
     688:	900b883a 	mov	r5,r18
     68c:	00007980 	call	798 <__divsi3>
     690:	00c00c04 	movi	r3,48
     694:	10c5883a 	add	r2,r2,r3
     698:	d88001c5 	stb	r2,7(sp)
			top_row[min_2] = '0' + (*minutes_ptr) % 10;
     69c:	80e1883a 	add	r16,r16,r3
     6a0:	dc000205 	stb	r16,8(sp)
		}
		// Write out our new seconds to the display.
		top_row[sec_1] = '0' + ((*seconds_ptr) - ((*seconds_ptr) % 10)) / 10;
     6a4:	9c400017 	ldw	r17,0(r19)
     6a8:	04800284 	movi	r18,10
     6ac:	8809883a 	mov	r4,r17
     6b0:	900b883a 	mov	r5,r18
     6b4:	00007f80 	call	7f8 <__modsi3>
     6b8:	1021883a 	mov	r16,r2
     6bc:	8889c83a 	sub	r4,r17,r2
     6c0:	900b883a 	mov	r5,r18
     6c4:	00007980 	call	798 <__divsi3>
     6c8:	00c00c04 	movi	r3,48
     6cc:	10c5883a 	add	r2,r2,r3
     6d0:	d8800285 	stb	r2,10(sp)
		top_row[sec_2] = '0' + (*seconds_ptr) % 10;
     6d4:	80e1883a 	add	r16,r16,r3
     6d8:	dc0002c5 	stb	r16,11(sp)
		(*tenths_ptr) = 0;
     6dc:	a0000015 	stw	zero,0(r20)
	}
	(*old_tenths_ptr) = (*tenths_ptr);
     6e0:	a0800017 	ldw	r2,0(r20)
     6e4:	a8800015 	stw	r2,0(r21)
	return top_row;
}
     6e8:	d805883a 	mov	r2,sp
     6ec:	dfc00b17 	ldw	ra,44(sp)
     6f0:	dd400a17 	ldw	r21,40(sp)
     6f4:	dd000917 	ldw	r20,36(sp)
     6f8:	dcc00817 	ldw	r19,32(sp)
     6fc:	dc800717 	ldw	r18,28(sp)
     700:	dc400617 	ldw	r17,24(sp)
     704:	dc000517 	ldw	r16,20(sp)
     708:	dec00c04 	addi	sp,sp,48
     70c:	f800283a 	ret

00000710 <update_hour>:

void update_hour() {

}
     710:	f800283a 	ret

00000714 <update_min>:

void update_min() {

}
     714:	f800283a 	ret

00000718 <update_sec>:

void update_sec() {

     718:	f800283a 	ret

0000071c <udivmodsi4>:
     71c:	29001b2e 	bgeu	r5,r4,78c <udivmodsi4+0x70>
     720:	28001a16 	blt	r5,zero,78c <udivmodsi4+0x70>
     724:	00800044 	movi	r2,1
     728:	0007883a 	mov	r3,zero
     72c:	01c007c4 	movi	r7,31
     730:	00000306 	br	740 <udivmodsi4+0x24>
     734:	19c01326 	beq	r3,r7,784 <udivmodsi4+0x68>
     738:	18c00044 	addi	r3,r3,1
     73c:	28000416 	blt	r5,zero,750 <udivmodsi4+0x34>
     740:	294b883a 	add	r5,r5,r5
     744:	1085883a 	add	r2,r2,r2
     748:	293ffa36 	bltu	r5,r4,734 <udivmodsi4+0x18>
     74c:	10000d26 	beq	r2,zero,784 <udivmodsi4+0x68>
     750:	0007883a 	mov	r3,zero
     754:	21400236 	bltu	r4,r5,760 <udivmodsi4+0x44>
     758:	2149c83a 	sub	r4,r4,r5
     75c:	1886b03a 	or	r3,r3,r2
     760:	1004d07a 	srli	r2,r2,1
     764:	280ad07a 	srli	r5,r5,1
     768:	103ffa1e 	bne	r2,zero,754 <udivmodsi4+0x38>
     76c:	30000226 	beq	r6,zero,778 <udivmodsi4+0x5c>
     770:	2005883a 	mov	r2,r4
     774:	f800283a 	ret
     778:	1809883a 	mov	r4,r3
     77c:	2005883a 	mov	r2,r4
     780:	f800283a 	ret
     784:	0007883a 	mov	r3,zero
     788:	003ff806 	br	76c <udivmodsi4+0x50>
     78c:	00800044 	movi	r2,1
     790:	0007883a 	mov	r3,zero
     794:	003fef06 	br	754 <udivmodsi4+0x38>

00000798 <__divsi3>:
     798:	defffe04 	addi	sp,sp,-8
     79c:	dc000015 	stw	r16,0(sp)
     7a0:	dfc00115 	stw	ra,4(sp)
     7a4:	0021883a 	mov	r16,zero
     7a8:	20000c16 	blt	r4,zero,7dc <__divsi3+0x44>
     7ac:	000d883a 	mov	r6,zero
     7b0:	28000e16 	blt	r5,zero,7ec <__divsi3+0x54>
     7b4:	000071c0 	call	71c <udivmodsi4>
     7b8:	1007883a 	mov	r3,r2
     7bc:	8005003a 	cmpeq	r2,r16,zero
     7c0:	1000011e 	bne	r2,zero,7c8 <__divsi3+0x30>
     7c4:	00c7c83a 	sub	r3,zero,r3
     7c8:	1805883a 	mov	r2,r3
     7cc:	dfc00117 	ldw	ra,4(sp)
     7d0:	dc000017 	ldw	r16,0(sp)
     7d4:	dec00204 	addi	sp,sp,8
     7d8:	f800283a 	ret
     7dc:	0109c83a 	sub	r4,zero,r4
     7e0:	04000044 	movi	r16,1
     7e4:	000d883a 	mov	r6,zero
     7e8:	283ff20e 	bge	r5,zero,7b4 <__divsi3+0x1c>
     7ec:	014bc83a 	sub	r5,zero,r5
     7f0:	8021003a 	cmpeq	r16,r16,zero
     7f4:	003fef06 	br	7b4 <__divsi3+0x1c>

000007f8 <__modsi3>:
     7f8:	deffff04 	addi	sp,sp,-4
     7fc:	dfc00015 	stw	ra,0(sp)
     800:	01800044 	movi	r6,1
     804:	2807883a 	mov	r3,r5
     808:	20000416 	blt	r4,zero,81c <__modsi3+0x24>
     80c:	28000c16 	blt	r5,zero,840 <__modsi3+0x48>
     810:	dfc00017 	ldw	ra,0(sp)
     814:	dec00104 	addi	sp,sp,4
     818:	000071c1 	jmpi	71c <udivmodsi4>
     81c:	0109c83a 	sub	r4,zero,r4
     820:	28000b16 	blt	r5,zero,850 <__modsi3+0x58>
     824:	180b883a 	mov	r5,r3
     828:	01800044 	movi	r6,1
     82c:	000071c0 	call	71c <udivmodsi4>
     830:	0085c83a 	sub	r2,zero,r2
     834:	dfc00017 	ldw	ra,0(sp)
     838:	dec00104 	addi	sp,sp,4
     83c:	f800283a 	ret
     840:	014bc83a 	sub	r5,zero,r5
     844:	dfc00017 	ldw	ra,0(sp)
     848:	dec00104 	addi	sp,sp,4
     84c:	000071c1 	jmpi	71c <udivmodsi4>
     850:	0147c83a 	sub	r3,zero,r5
     854:	003ff306 	br	824 <__modsi3+0x2c>

00000858 <__udivsi3>:
     858:	000d883a 	mov	r6,zero
     85c:	000071c1 	jmpi	71c <udivmodsi4>

00000860 <__umodsi3>:
     860:	01800044 	movi	r6,1
     864:	000071c1 	jmpi	71c <udivmodsi4>

00000868 <memcpy>:
     868:	01c003c4 	movi	r7,15
     86c:	2007883a 	mov	r3,r4
     870:	3980032e 	bgeu	r7,r6,880 <memcpy+0x18>
     874:	2904b03a 	or	r2,r5,r4
     878:	108000cc 	andi	r2,r2,3
     87c:	10000926 	beq	r2,zero,8a4 <memcpy+0x3c>
     880:	30000626 	beq	r6,zero,89c <memcpy+0x34>
     884:	30cd883a 	add	r6,r6,r3
     888:	28800003 	ldbu	r2,0(r5)
     88c:	29400044 	addi	r5,r5,1
     890:	18800005 	stb	r2,0(r3)
     894:	18c00044 	addi	r3,r3,1
     898:	30fffb1e 	bne	r6,r3,888 <memcpy+0x20>
     89c:	2005883a 	mov	r2,r4
     8a0:	f800283a 	ret
     8a4:	3811883a 	mov	r8,r7
     8a8:	200f883a 	mov	r7,r4
     8ac:	28c00017 	ldw	r3,0(r5)
     8b0:	31bffc04 	addi	r6,r6,-16
     8b4:	38c00015 	stw	r3,0(r7)
     8b8:	28800117 	ldw	r2,4(r5)
     8bc:	38800115 	stw	r2,4(r7)
     8c0:	28c00217 	ldw	r3,8(r5)
     8c4:	38c00215 	stw	r3,8(r7)
     8c8:	28800317 	ldw	r2,12(r5)
     8cc:	29400404 	addi	r5,r5,16
     8d0:	38800315 	stw	r2,12(r7)
     8d4:	39c00404 	addi	r7,r7,16
     8d8:	41bff436 	bltu	r8,r6,8ac <memcpy+0x44>
     8dc:	008000c4 	movi	r2,3
     8e0:	1180072e 	bgeu	r2,r6,900 <memcpy+0x98>
     8e4:	1007883a 	mov	r3,r2
     8e8:	28800017 	ldw	r2,0(r5)
     8ec:	31bfff04 	addi	r6,r6,-4
     8f0:	29400104 	addi	r5,r5,4
     8f4:	38800015 	stw	r2,0(r7)
     8f8:	39c00104 	addi	r7,r7,4
     8fc:	19bffa36 	bltu	r3,r6,8e8 <memcpy+0x80>
     900:	3807883a 	mov	r3,r7
     904:	003fde06 	br	880 <memcpy+0x18>

00000908 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
     908:	200f883a 	mov	r7,r4
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
     90c:	008007c4 	movi	r2,31
     910:	1100022e 	bgeu	r2,r4,91c <alt_irq_register+0x14>
     914:	00bffa84 	movi	r2,-22
     918:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     91c:	0011303a 	rdctl	r8,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     920:	013fff84 	movi	r4,-2
     924:	4104703a 	and	r2,r8,r4
     928:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
     92c:	380490fa 	slli	r2,r7,3
     930:	00c00034 	movhi	r3,0
     934:	18d3c604 	addi	r3,r3,20248
     938:	10c5883a 	add	r2,r2,r3
     93c:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = context;
     940:	11400115 	stw	r5,4(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
     944:	30000e26 	beq	r6,zero,980 <alt_irq_register+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     948:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     94c:	2904703a 	and	r2,r5,r4
     950:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
     954:	00c00034 	movhi	r3,0
     958:	18d3ba04 	addi	r3,r3,20200
     95c:	19000017 	ldw	r4,0(r3)
     960:	00800044 	movi	r2,1
     964:	11c4983a 	sll	r2,r2,r7
     968:	1104b03a 	or	r2,r2,r4
     96c:	18800015 	stw	r2,0(r3)
  NIOS2_WRITE_IENABLE (alt_irq_active);
     970:	18800017 	ldw	r2,0(r3)
     974:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
     978:	2801703a 	wrctl	status,r5
     97c:	00000e06 	br	9b8 <alt_irq_register+0xb0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     980:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     984:	00bfff84 	movi	r2,-2
     988:	2884703a 	and	r2,r5,r2
     98c:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
     990:	00c00034 	movhi	r3,0
     994:	18d3ba04 	addi	r3,r3,20200
     998:	19000017 	ldw	r4,0(r3)
     99c:	00bfff84 	movi	r2,-2
     9a0:	11c4183a 	rol	r2,r2,r7
     9a4:	1104703a 	and	r2,r2,r4
     9a8:	18800015 	stw	r2,0(r3)
  NIOS2_WRITE_IENABLE (alt_irq_active);
     9ac:	18800017 	ldw	r2,0(r3)
     9b0:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
     9b4:	2801703a 	wrctl	status,r5
     9b8:	4001703a 	wrctl	status,r8
     9bc:	0005883a 	mov	r2,zero

    alt_irq_enable_all(status);
  }
  return rc; 
}
     9c0:	f800283a 	ret

000009c4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
     9c4:	deffff04 	addi	sp,sp,-4
     9c8:	dfc00015 	stw	ra,0(sp)
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
     9cc:	01000034 	movhi	r4,0
     9d0:	210de504 	addi	r4,r4,14228
     9d4:	00c00034 	movhi	r3,0
     9d8:	18c81604 	addi	r3,r3,8280

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
     9dc:	20c00926 	beq	r4,r3,a04 <alt_load+0x40>
     9e0:	01800034 	movhi	r6,0
     9e4:	318de504 	addi	r6,r6,14228
  {
    while( to != end )
     9e8:	19800626 	beq	r3,r6,a04 <alt_load+0x40>
     9ec:	01400104 	movi	r5,4
    {
      *to++ = *from++;
     9f0:	20800017 	ldw	r2,0(r4)
     9f4:	18800015 	stw	r2,0(r3)
     9f8:	1947883a 	add	r3,r3,r5
     9fc:	2149883a 	add	r4,r4,r5
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
     a00:	30fffb1e 	bne	r6,r3,9f0 <alt_load+0x2c>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
     a04:	01000034 	movhi	r4,0
     a08:	21000804 	addi	r4,r4,32
     a0c:	00c00034 	movhi	r3,0
     a10:	18c00804 	addi	r3,r3,32

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
     a14:	20c00926 	beq	r4,r3,a3c <alt_load+0x78>
     a18:	01800034 	movhi	r6,0
     a1c:	31805a04 	addi	r6,r6,360
  {
    while( to != end )
     a20:	19800626 	beq	r3,r6,a3c <alt_load+0x78>
     a24:	01400104 	movi	r5,4
    {
      *to++ = *from++;
     a28:	20800017 	ldw	r2,0(r4)
     a2c:	18800015 	stw	r2,0(r3)
     a30:	1947883a 	add	r3,r3,r5
     a34:	2149883a 	add	r4,r4,r5
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
     a38:	30fffb1e 	bne	r6,r3,a28 <alt_load+0x64>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
     a3c:	01000034 	movhi	r4,0
     a40:	2107ef04 	addi	r4,r4,8124
     a44:	00c00034 	movhi	r3,0
     a48:	18c7ef04 	addi	r3,r3,8124

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
     a4c:	20c00926 	beq	r4,r3,a74 <alt_load+0xb0>
     a50:	01800034 	movhi	r6,0
     a54:	31881604 	addi	r6,r6,8280
  {
    while( to != end )
     a58:	19800626 	beq	r3,r6,a74 <alt_load+0xb0>
     a5c:	01400104 	movi	r5,4
    {
      *to++ = *from++;
     a60:	20800017 	ldw	r2,0(r4)
     a64:	18800015 	stw	r2,0(r3)
     a68:	1947883a 	add	r3,r3,r5
     a6c:	2149883a 	add	r4,r4,r5
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
     a70:	30fffb1e 	bne	r6,r3,a60 <alt_load+0x9c>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
     a74:	00016dc0 	call	16dc <alt_dcache_flush_all>
  alt_icache_flush_all();
     a78:	00017c80 	call	17c8 <alt_icache_flush_all>
}
     a7c:	dfc00017 	ldw	ra,0(sp)
     a80:	dec00104 	addi	sp,sp,4
     a84:	f800283a 	ret

00000a88 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
     a88:	defffe04 	addi	sp,sp,-8
     a8c:	dfc00115 	stw	ra,4(sp)
     a90:	dc000015 	stw	r16,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
     a94:	0009883a 	mov	r4,zero
     a98:	0000ad80 	call	ad8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
     a9c:	0000af80 	call	af8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
     aa0:	01800034 	movhi	r6,0
     aa4:	31880104 	addi	r6,r6,8196
     aa8:	3009883a 	mov	r4,r6
     aac:	300b883a 	mov	r5,r6
     ab0:	000184c0 	call	184c <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
     ab4:	d125e717 	ldw	r4,-26724(gp)
     ab8:	d165e817 	ldw	r5,-26720(gp)
     abc:	d1a5e917 	ldw	r6,-26716(gp)
     ac0:	00003240 	call	324 <main>
     ac4:	1021883a 	mov	r16,r2
  close(STDOUT_FILENO);
     ac8:	01000044 	movi	r4,1
     acc:	00016000 	call	1600 <close>
  exit (result);
     ad0:	8009883a 	mov	r4,r16
     ad4:	0001cd00 	call	1cd0 <exit>

00000ad8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
     ad8:	deffff04 	addi	sp,sp,-4
     adc:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
     ae0:	0001b640 	call	1b64 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
     ae4:	00800044 	movi	r2,1
     ae8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
     aec:	dfc00017 	ldw	ra,0(sp)
     af0:	dec00104 	addi	sp,sp,4
     af4:	f800283a 	ret

00000af8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
     af8:	defffd04 	addi	sp,sp,-12
     afc:	dfc00215 	stw	ra,8(sp)
     b00:	dc400115 	stw	r17,4(sp)
     b04:	dc000015 	stw	r16,0(sp)
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
     b08:	01200014 	movui	r4,32768
     b0c:	000b883a 	mov	r5,zero
     b10:	000d883a 	mov	r6,zero
     b14:	01c01904 	movi	r7,100
     b18:	00011e00 	call	11e0 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAGUART, JTAGUART);
     b1c:	04000034 	movhi	r16,0
     b20:	84082504 	addi	r16,r16,8340
     b24:	8009883a 	mov	r4,r16
     b28:	000b883a 	mov	r5,zero
     b2c:	01800084 	movi	r6,2
     b30:	0000cdc0 	call	cdc <altera_avalon_jtag_uart_init>

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
     b34:	04400034 	movhi	r17,0
     b38:	8c4ddd04 	addi	r17,r17,14196
     b3c:	813ff604 	addi	r4,r16,-40
     b40:	880b883a 	mov	r5,r17
     b44:	00016e80 	call	16e8 <alt_dev_llist_insert>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( LCD, LCD);
     b48:	04000034 	movhi	r16,0
     b4c:	840c3304 	addi	r16,r16,12492
     b50:	8009883a 	mov	r4,r16
     b54:	00013140 	call	1314 <alt_up_character_lcd_init>
     b58:	8009883a 	mov	r4,r16
     b5c:	880b883a 	mov	r5,r17
     b60:	00016e80 	call	16e8 <alt_dev_llist_insert>
     b64:	01000034 	movhi	r4,0
     b68:	210c3e04 	addi	r4,r4,12536
     b6c:	880b883a 	mov	r5,r17
     b70:	00016e80 	call	16e8 <alt_dev_llist_insert>
     b74:	01000034 	movhi	r4,0
     b78:	210c4904 	addi	r4,r4,12580
     b7c:	880b883a 	mov	r5,r17
     b80:	00016e80 	call	16e8 <alt_dev_llist_insert>
     b84:	01000034 	movhi	r4,0
     b88:	210c5404 	addi	r4,r4,12624
     b8c:	880b883a 	mov	r5,r17
     b90:	00016e80 	call	16e8 <alt_dev_llist_insert>
     b94:	01000034 	movhi	r4,0
     b98:	210c5f04 	addi	r4,r4,12668
     b9c:	880b883a 	mov	r5,r17
     ba0:	00016e80 	call	16e8 <alt_dev_llist_insert>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( KEY, KEY);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SEVENSEG30, SevenSeg30);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SEVENSEG74, SevenSeg74);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SW, SW);
}
     ba4:	dfc00217 	ldw	ra,8(sp)
     ba8:	dc400117 	ldw	r17,4(sp)
     bac:	dc000017 	ldw	r16,0(sp)
     bb0:	dec00304 	addi	sp,sp,12
     bb4:	f800283a 	ret

00000bb8 <altera_avalon_jtag_uart_ioctl_fd>:
    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
}

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
     bb8:	deffff04 	addi	sp,sp,-4
     bbc:	dfc00015 	stw	ra,0(sp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
     bc0:	21000017 	ldw	r4,0(r4)
     bc4:	21000a04 	addi	r4,r4,40
     bc8:	0000e880 	call	e88 <altera_avalon_jtag_uart_ioctl>
}
     bcc:	dfc00017 	ldw	ra,0(sp)
     bd0:	dec00104 	addi	sp,sp,4
     bd4:	f800283a 	ret

00000bd8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
     bd8:	deffff04 	addi	sp,sp,-4
     bdc:	dfc00015 	stw	ra,0(sp)
     be0:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
     be4:	21000017 	ldw	r4,0(r4)
     be8:	21000a04 	addi	r4,r4,40
     bec:	11400217 	ldw	r5,8(r2)
     bf0:	0000c500 	call	c50 <altera_avalon_jtag_uart_close>
}
     bf4:	dfc00017 	ldw	ra,0(sp)
     bf8:	dec00104 	addi	sp,sp,4
     bfc:	f800283a 	ret

00000c00 <altera_avalon_jtag_uart_write_fd>:
      fd->fd_flags);
}

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
     c00:	deffff04 	addi	sp,sp,-4
     c04:	dfc00015 	stw	ra,0(sp)
     c08:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
     c0c:	21000017 	ldw	r4,0(r4)
     c10:	21000a04 	addi	r4,r4,40
     c14:	11c00217 	ldw	r7,8(r2)
     c18:	00010640 	call	1064 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
     c1c:	dfc00017 	ldw	ra,0(sp)
     c20:	dec00104 	addi	sp,sp,4
     c24:	f800283a 	ret

00000c28 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
     c28:	deffff04 	addi	sp,sp,-4
     c2c:	dfc00015 	stw	ra,0(sp)
     c30:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
     c34:	21000017 	ldw	r4,0(r4)
     c38:	21000a04 	addi	r4,r4,40
     c3c:	11c00217 	ldw	r7,8(r2)
     c40:	0000efc0 	call	efc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
     c44:	dfc00017 	ldw	ra,0(sp)
     c48:	dec00104 	addi	sp,sp,4
     c4c:	f800283a 	ret

00000c50 <altera_avalon_jtag_uart_close>:
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
     c50:	21800c17 	ldw	r6,48(r4)
     c54:	2950000c 	andi	r5,r5,16384
     c58:	280b003a 	cmpeq	r5,r5,zero
     c5c:	00000306 	br	c6c <altera_avalon_jtag_uart_close+0x1c>
    if (flags & O_NONBLOCK) {
     c60:	2800021e 	bne	r5,zero,c6c <altera_avalon_jtag_uart_close+0x1c>
     c64:	00bffd44 	movi	r2,-11
     c68:	f800283a 	ret
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
     c6c:	20800d17 	ldw	r2,52(r4)
     c70:	11800326 	beq	r2,r6,c80 <altera_avalon_jtag_uart_close+0x30>
     c74:	20c00917 	ldw	r3,36(r4)
     c78:	20800117 	ldw	r2,4(r4)
     c7c:	18bff836 	bltu	r3,r2,c60 <altera_avalon_jtag_uart_close+0x10>
     c80:	0005883a 	mov	r2,zero
      return -EWOULDBLOCK; 
    }
  }

  return 0;
}
     c84:	f800283a 	ret

00000c88 <altera_avalon_jtag_uart_timeout>:
static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
     c88:	20800017 	ldw	r2,0(r4)
     c8c:	10c00104 	addi	r3,r2,4
     c90:	18800037 	ldwio	r2,0(r3)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
     c94:	01410004 	movi	r5,1024
     c98:	1144703a 	and	r2,r2,r5
     c9c:	10000526 	beq	r2,zero,cb4 <altera_avalon_jtag_uart_timeout+0x2c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
     ca0:	20800817 	ldw	r2,32(r4)
     ca4:	1144b03a 	or	r2,r2,r5
     ca8:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
     cac:	20000915 	stw	zero,36(r4)
     cb0:	00000606 	br	ccc <altera_avalon_jtag_uart_timeout+0x44>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
     cb4:	20c00917 	ldw	r3,36(r4)
     cb8:	00a00034 	movhi	r2,32768
     cbc:	10bfff04 	addi	r2,r2,-4
     cc0:	10c00236 	bltu	r2,r3,ccc <altera_avalon_jtag_uart_timeout+0x44>
    sp->host_inactive++;
     cc4:	18800044 	addi	r2,r3,1
     cc8:	20800915 	stw	r2,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
     ccc:	00800034 	movhi	r2,0
     cd0:	1093be04 	addi	r2,r2,20216
     cd4:	10800017 	ldw	r2,0(r2)
     cd8:	f800283a 	ret

00000cdc <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
     cdc:	defffe04 	addi	sp,sp,-8
     ce0:	dfc00115 	stw	ra,4(sp)
     ce4:	dc000015 	stw	r16,0(sp)
     ce8:	2021883a 	mov	r16,r4
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
     cec:	00c00044 	movi	r3,1
     cf0:	20c00815 	stw	r3,32(r4)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
     cf4:	20800017 	ldw	r2,0(r4)
     cf8:	10c00135 	stwio	r3,4(r2)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
     cfc:	3009883a 	mov	r4,r6
     d00:	800b883a 	mov	r5,r16
     d04:	01800034 	movhi	r6,0
     d08:	31835504 	addi	r6,r6,3412
     d0c:	00009080 	call	908 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
     d10:	80000915 	stw	zero,36(r16)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
     d14:	81000204 	addi	r4,r16,8
     d18:	00800034 	movhi	r2,0
     d1c:	1093be04 	addi	r2,r2,20216
     d20:	11400017 	ldw	r5,0(r2)
     d24:	01800034 	movhi	r6,0
     d28:	31832204 	addi	r6,r6,3208
     d2c:	800f883a 	mov	r7,r16
     d30:	000156c0 	call	156c <alt_alarm_start>
     d34:	1000030e 	bge	r2,zero,d44 <altera_avalon_jtag_uart_init+0x68>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
     d38:	00a00034 	movhi	r2,32768
     d3c:	10bfffc4 	addi	r2,r2,-1
     d40:	80800115 	stw	r2,4(r16)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
     d44:	dfc00117 	ldw	ra,4(sp)
     d48:	dc000017 	ldw	r16,0(sp)
     d4c:	dec00204 	addi	sp,sp,8
     d50:	f800283a 	ret

00000d54 <altera_avalon_jtag_uart_irq>:
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  unsigned int base = sp->base;
     d54:	22000017 	ldw	r8,0(r4)
     d58:	03800104 	movi	r14,4
     d5c:	4399883a 	add	r12,r8,r14
     d60:	037ffff4 	movhi	r13,65535
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     d64:	62c00037 	ldwio	r11,0(r12)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
     d68:	5880c00c 	andi	r2,r11,768
     d6c:	10004526 	beq	r2,zero,e84 <altera_avalon_jtag_uart_irq+0x130>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
     d70:	5880400c 	andi	r2,r11,256
     d74:	10002126 	beq	r2,zero,dfc <altera_avalon_jtag_uart_irq+0xa8>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     d78:	20800a17 	ldw	r2,40(r4)
        if (next == sp->rx_out)
     d7c:	10800044 	addi	r2,r2,1
     d80:	1081ffcc 	andi	r2,r2,2047
     d84:	20c00b17 	ldw	r3,44(r4)
     d88:	10c01626 	beq	r2,r3,de4 <altera_avalon_jtag_uart_irq+0x90>
     d8c:	02a00014 	movui	r10,32768
     d90:	02400e04 	movi	r9,56
     d94:	01c00044 	movi	r7,1
     d98:	0181ffc4 	movi	r6,2047
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
     d9c:	41400037 	ldwio	r5,0(r8)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
     da0:	2a84703a 	and	r2,r5,r10
     da4:	10000d26 	beq	r2,zero,ddc <altera_avalon_jtag_uart_irq+0x88>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
     da8:	20800a17 	ldw	r2,40(r4)
     dac:	1105883a 	add	r2,r2,r4
     db0:	1245883a 	add	r2,r2,r9
     db4:	11400005 	stb	r5,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     db8:	20800a17 	ldw	r2,40(r4)
     dbc:	11c5883a 	add	r2,r2,r7
     dc0:	1184703a 	and	r2,r2,r6
     dc4:	20800a15 	stw	r2,40(r4)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     dc8:	20800a17 	ldw	r2,40(r4)
        if (next == sp->rx_out)
     dcc:	11c5883a 	add	r2,r2,r7
     dd0:	1184703a 	and	r2,r2,r6
     dd4:	20c00b17 	ldw	r3,44(r4)
     dd8:	10fff01e 	bne	r2,r3,d9c <altera_avalon_jtag_uart_irq+0x48>

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
     ddc:	2b44703a 	and	r2,r5,r13
     de0:	10000626 	beq	r2,zero,dfc <altera_avalon_jtag_uart_irq+0xa8>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
     de4:	20800817 	ldw	r2,32(r4)
     de8:	00ffff84 	movi	r3,-2
     dec:	10c4703a 	and	r2,r2,r3
     df0:	20800815 	stw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
     df4:	60800035 	stwio	r2,0(r12)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     df8:	60800037 	ldwio	r2,0(r12)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
     dfc:	5880800c 	andi	r2,r11,512
     e00:	103fd826 	beq	r2,zero,d64 <altera_avalon_jtag_uart_irq+0x10>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
     e04:	5b44703a 	and	r2,r11,r13
     e08:	100ad43a 	srli	r5,r2,16

      while (space > 0 && sp->tx_out != sp->tx_in)
     e0c:	283fd526 	beq	r5,zero,d64 <altera_avalon_jtag_uart_irq+0x10>
     e10:	20c00d17 	ldw	r3,52(r4)
     e14:	20800c17 	ldw	r2,48(r4)
     e18:	18801126 	beq	r3,r2,e60 <altera_avalon_jtag_uart_irq+0x10c>
     e1c:	02420e04 	movi	r9,2104
     e20:	01800044 	movi	r6,1
     e24:	01c1ffc4 	movi	r7,2047
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
     e28:	20800d17 	ldw	r2,52(r4)
     e2c:	1105883a 	add	r2,r2,r4
     e30:	1245883a 	add	r2,r2,r9
     e34:	10800007 	ldb	r2,0(r2)
     e38:	40800035 	stwio	r2,0(r8)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     e3c:	20800d17 	ldw	r2,52(r4)
     e40:	1185883a 	add	r2,r2,r6
     e44:	11c4703a 	and	r2,r2,r7
     e48:	20800d15 	stw	r2,52(r4)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
     e4c:	298bc83a 	sub	r5,r5,r6
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
     e50:	283fc426 	beq	r5,zero,d64 <altera_avalon_jtag_uart_irq+0x10>
     e54:	20c00d17 	ldw	r3,52(r4)
     e58:	20800c17 	ldw	r2,48(r4)
     e5c:	18bff21e 	bne	r3,r2,e28 <altera_avalon_jtag_uart_irq+0xd4>
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
     e60:	20c00817 	ldw	r3,32(r4)
     e64:	00bfff44 	movi	r2,-3
     e68:	1886703a 	and	r3,r3,r2
     e6c:	20c00815 	stw	r3,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
     e70:	20800017 	ldw	r2,0(r4)
     e74:	1385883a 	add	r2,r2,r14
     e78:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     e7c:	60800037 	ldwio	r2,0(r12)
     e80:	003fb806 	br	d64 <altera_avalon_jtag_uart_irq+0x10>
     e84:	f800283a 	ret

00000e88 <altera_avalon_jtag_uart_ioctl>:
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;

  switch (req)
     e88:	009a8044 	movi	r2,27137
     e8c:	28800326 	beq	r5,r2,e9c <altera_avalon_jtag_uart_ioctl+0x14>
     e90:	009a8084 	movi	r2,27138
     e94:	2880171e 	bne	r5,r2,ef4 <altera_avalon_jtag_uart_ioctl+0x6c>
     e98:	00000d06 	br	ed0 <altera_avalon_jtag_uart_ioctl+0x48>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
     e9c:	20c00117 	ldw	r3,4(r4)
     ea0:	00a00034 	movhi	r2,32768
     ea4:	10bfffc4 	addi	r2,r2,-1
     ea8:	18801226 	beq	r3,r2,ef4 <altera_avalon_jtag_uart_ioctl+0x6c>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
     eac:	31800017 	ldw	r6,0(r6)
     eb0:	30ffff84 	addi	r3,r6,-2
     eb4:	10bfff44 	addi	r2,r2,-3
     eb8:	10c0022e 	bgeu	r2,r3,ec4 <altera_avalon_jtag_uart_ioctl+0x3c>
     ebc:	01a00034 	movhi	r6,32768
     ec0:	31bfff84 	addi	r6,r6,-2
     ec4:	21800115 	stw	r6,4(r4)
     ec8:	0005883a 	mov	r2,zero
     ecc:	f800283a 	ret
    }
    break;

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
     ed0:	20c00117 	ldw	r3,4(r4)
     ed4:	00a00034 	movhi	r2,32768
     ed8:	10bfffc4 	addi	r2,r2,-1
     edc:	18800526 	beq	r3,r2,ef4 <altera_avalon_jtag_uart_ioctl+0x6c>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
     ee0:	20800917 	ldw	r2,36(r4)
     ee4:	10c5803a 	cmpltu	r2,r2,r3
     ee8:	30800015 	stw	r2,0(r6)
     eec:	0005883a 	mov	r2,zero
     ef0:	f800283a 	ret
     ef4:	00bff9c4 	movi	r2,-25
  default:
    break;
  }

  return rc;
}
     ef8:	f800283a 	ret

00000efc <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
     efc:	defff604 	addi	sp,sp,-40
     f00:	dfc00915 	stw	ra,36(sp)
     f04:	df000815 	stw	fp,32(sp)
     f08:	ddc00715 	stw	r23,28(sp)
     f0c:	dd800615 	stw	r22,24(sp)
     f10:	dd400515 	stw	r21,20(sp)
     f14:	dd000415 	stw	r20,16(sp)
     f18:	dcc00315 	stw	r19,12(sp)
     f1c:	dc800215 	stw	r18,8(sp)
     f20:	dc400115 	stw	r17,4(sp)
     f24:	dc000015 	stw	r16,0(sp)
     f28:	2025883a 	mov	r18,r4
     f2c:	282f883a 	mov	r23,r5
     f30:	3027883a 	mov	r19,r6
     f34:	3839883a 	mov	fp,r7
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
     f38:	0180220e 	bge	zero,r6,fc4 <altera_avalon_jtag_uart_read+0xc8>
     f3c:	b82b883a 	mov	r21,r23
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
     f40:	95800a17 	ldw	r22,40(r18)
      out = sp->rx_out;
     f44:	94400b17 	ldw	r17,44(r18)

      if (in >= out)
     f48:	b4400236 	bltu	r22,r17,f54 <altera_avalon_jtag_uart_read+0x58>
        n = in - out;
     f4c:	b461c83a 	sub	r16,r22,r17
     f50:	00000206 	br	f5c <altera_avalon_jtag_uart_read+0x60>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
     f54:	00820004 	movi	r2,2048
     f58:	1461c83a 	sub	r16,r2,r17

      if (n == 0)
     f5c:	80000d26 	beq	r16,zero,f94 <altera_avalon_jtag_uart_read+0x98>
        break; /* No more data available */

      if (n > space)
     f60:	9829883a 	mov	r20,r19
     f64:	9c001d36 	bltu	r19,r16,fdc <altera_avalon_jtag_uart_read+0xe0>
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
     f68:	91400e04 	addi	r5,r18,56
     f6c:	a809883a 	mov	r4,r21
     f70:	2c4b883a 	add	r5,r5,r17
     f74:	800d883a 	mov	r6,r16
     f78:	00008680 	call	868 <memcpy>
      ptr   += n;
     f7c:	ac2b883a 	add	r21,r21,r16
      space -= n;
     f80:	9c27c83a 	sub	r19,r19,r16

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     f84:	8445883a 	add	r2,r16,r17
     f88:	1081ffcc 	andi	r2,r2,2047
     f8c:	90800b15 	stw	r2,44(r18)
    }
    while (space > 0);
     f90:	04ffeb16 	blt	zero,r19,f40 <altera_avalon_jtag_uart_read+0x44>

    /* If we read any data then return it */
    if (ptr != buffer)
     f94:	adc01c1e 	bne	r21,r23,1008 <altera_avalon_jtag_uart_read+0x10c>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
     f98:	e090000c 	andi	r2,fp,16384
     f9c:	10000d1e 	bne	r2,zero,fd4 <altera_avalon_jtag_uart_read+0xd8>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
     fa0:	90800a17 	ldw	r2,40(r18)
     fa4:	b080031e 	bne	r22,r2,fb4 <altera_avalon_jtag_uart_read+0xb8>
     fa8:	90c00917 	ldw	r3,36(r18)
     fac:	90800117 	ldw	r2,4(r18)
     fb0:	18bffb36 	bltu	r3,r2,fa0 <altera_avalon_jtag_uart_read+0xa4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
     fb4:	90800a17 	ldw	r2,40(r18)
     fb8:	b0800426 	beq	r22,r2,fcc <altera_avalon_jtag_uart_read+0xd0>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
     fbc:	04c0030e 	bge	zero,r19,fcc <altera_avalon_jtag_uart_read+0xd0>
     fc0:	003fde06 	br	f3c <altera_avalon_jtag_uart_read+0x40>
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
     fc4:	3890000c 	andi	r2,r7,16384
     fc8:	1000021e 	bne	r2,zero,fd4 <altera_avalon_jtag_uart_read+0xd8>
     fcc:	00bffec4 	movi	r2,-5
     fd0:	00001806 	br	1034 <altera_avalon_jtag_uart_read+0x138>
     fd4:	00bffd44 	movi	r2,-11
     fd8:	00001606 	br	1034 <altera_avalon_jtag_uart_read+0x138>
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
     fdc:	91400e04 	addi	r5,r18,56
     fe0:	a809883a 	mov	r4,r21
     fe4:	894b883a 	add	r5,r17,r5
     fe8:	980d883a 	mov	r6,r19
     fec:	00008680 	call	868 <memcpy>
      ptr   += n;
     ff0:	aceb883a 	add	r21,r21,r19
      space -= n;
     ff4:	0027883a 	mov	r19,zero

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     ff8:	a445883a 	add	r2,r20,r17
     ffc:	1081ffcc 	andi	r2,r2,2047
    1000:	90800b15 	stw	r2,44(r18)
    1004:	003fe306 	br	f94 <altera_avalon_jtag_uart_read+0x98>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1008:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    100c:	00bfff84 	movi	r2,-2
    1010:	2084703a 	and	r2,r4,r2
    1014:	1001703a 	wrctl	status,r2

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    1018:	90800817 	ldw	r2,32(r18)
    101c:	10800054 	ori	r2,r2,1
    1020:	90800815 	stw	r2,32(r18)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    1024:	90c00017 	ldw	r3,0(r18)
    1028:	18800135 	stwio	r2,4(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    102c:	2001703a 	wrctl	status,r4
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
    1030:	adc5c83a 	sub	r2,r21,r23
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO;
}
    1034:	dfc00917 	ldw	ra,36(sp)
    1038:	df000817 	ldw	fp,32(sp)
    103c:	ddc00717 	ldw	r23,28(sp)
    1040:	dd800617 	ldw	r22,24(sp)
    1044:	dd400517 	ldw	r21,20(sp)
    1048:	dd000417 	ldw	r20,16(sp)
    104c:	dcc00317 	ldw	r19,12(sp)
    1050:	dc800217 	ldw	r18,8(sp)
    1054:	dc400117 	ldw	r17,4(sp)
    1058:	dc000017 	ldw	r16,0(sp)
    105c:	dec00a04 	addi	sp,sp,40
    1060:	f800283a 	ret

00001064 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    1064:	defff804 	addi	sp,sp,-32
    1068:	dfc00715 	stw	ra,28(sp)
    106c:	dd800615 	stw	r22,24(sp)
    1070:	dd400515 	stw	r21,20(sp)
    1074:	dd000415 	stw	r20,16(sp)
    1078:	dcc00315 	stw	r19,12(sp)
    107c:	dc800215 	stw	r18,8(sp)
    1080:	dc400115 	stw	r17,4(sp)
    1084:	dc000015 	stw	r16,0(sp)
    1088:	2021883a 	mov	r16,r4
    108c:	282d883a 	mov	r22,r5
    1090:	3011883a 	mov	r8,r6
    1094:	382b883a 	mov	r21,r7
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    1098:	01800616 	blt	zero,r6,10b4 <altera_avalon_jtag_uart_write+0x50>
    109c:	2829883a 	mov	r20,r5
    10a0:	00002106 	br	1128 <altera_avalon_jtag_uart_write+0xc4>
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    return ptr - start;
    10a4:	a585c83a 	sub	r2,r20,r22
    10a8:	00004306 	br	11b8 <altera_avalon_jtag_uart_write+0x154>
  else if (flags & O_NONBLOCK)
    10ac:	00bffd44 	movi	r2,-11
    10b0:	00004106 	br	11b8 <altera_avalon_jtag_uart_write+0x154>
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    10b4:	2829883a 	mov	r20,r5
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    10b8:	84800c17 	ldw	r18,48(r16)
      out = sp->tx_out;
    10bc:	81400d17 	ldw	r5,52(r16)

      if (in < out)
    10c0:	9140032e 	bgeu	r18,r5,10d0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    10c4:	2c85c83a 	sub	r2,r5,r18
    10c8:	11bfffc4 	addi	r6,r2,-1
    10cc:	00000606 	br	10e8 <altera_avalon_jtag_uart_write+0x84>
      else if (out > 0)
    10d0:	28000326 	beq	r5,zero,10e0 <altera_avalon_jtag_uart_write+0x7c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    10d4:	00820004 	movi	r2,2048
    10d8:	148dc83a 	sub	r6,r2,r18
    10dc:	00000206 	br	10e8 <altera_avalon_jtag_uart_write+0x84>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    10e0:	0081ffc4 	movi	r2,2047
    10e4:	148dc83a 	sub	r6,r2,r18

      if (n == 0)
    10e8:	30002626 	beq	r6,zero,1184 <altera_avalon_jtag_uart_write+0x120>
        break;

      if (n > count)
    10ec:	4027883a 	mov	r19,r8
    10f0:	3023883a 	mov	r17,r6
    10f4:	4180012e 	bgeu	r8,r6,10fc <altera_avalon_jtag_uart_write+0x98>
    10f8:	4023883a 	mov	r17,r8
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
    10fc:	81020e04 	addi	r4,r16,2104
    1100:	2489883a 	add	r4,r4,r18
    1104:	a00b883a 	mov	r5,r20
    1108:	880d883a 	mov	r6,r17
    110c:	00008680 	call	868 <memcpy>
      ptr   += n;
    1110:	a469883a 	add	r20,r20,r17
      count -= n;
    1114:	9c51c83a 	sub	r8,r19,r17

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    1118:	9445883a 	add	r2,r18,r17
    111c:	1081ffcc 	andi	r2,r2,2047
    1120:	80800c15 	stw	r2,48(r16)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    1124:	023fe416 	blt	zero,r8,10b8 <altera_avalon_jtag_uart_write+0x54>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1128:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    112c:	00bfff84 	movi	r2,-2
    1130:	2084703a 	and	r2,r4,r2
    1134:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    1138:	80800817 	ldw	r2,32(r16)
    113c:	10800094 	ori	r2,r2,2
    1140:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    1144:	80c00017 	ldw	r3,0(r16)
    1148:	18800135 	stwio	r2,4(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    114c:	2001703a 	wrctl	status,r4
    1150:	00000706 	br	1170 <altera_avalon_jtag_uart_write+0x10c>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    1154:	80800d17 	ldw	r2,52(r16)
    1158:	1140031e 	bne	r2,r5,1168 <altera_avalon_jtag_uart_write+0x104>
    115c:	80c00917 	ldw	r3,36(r16)
    1160:	80800117 	ldw	r2,4(r16)
    1164:	18bffb36 	bltu	r3,r2,1154 <altera_avalon_jtag_uart_write+0xf0>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
    1168:	80800d17 	ldw	r2,52(r16)
    116c:	117fed1e 	bne	r2,r5,1124 <altera_avalon_jtag_uart_write+0xc0>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    1170:	b53fcc1e 	bne	r22,r20,10a4 <altera_avalon_jtag_uart_write+0x40>
    return ptr - start;
  else if (flags & O_NONBLOCK)
    1174:	a890000c 	andi	r2,r21,16384
    1178:	103fcc1e 	bne	r2,zero,10ac <altera_avalon_jtag_uart_write+0x48>
    117c:	00bffec4 	movi	r2,-5
    1180:	00000d06 	br	11b8 <altera_avalon_jtag_uart_write+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1184:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1188:	00bfff84 	movi	r2,-2
    118c:	2084703a 	and	r2,r4,r2
    1190:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    1194:	80800817 	ldw	r2,32(r16)
    1198:	10800094 	ori	r2,r2,2
    119c:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    11a0:	80c00017 	ldw	r3,0(r16)
    11a4:	18800135 	stwio	r2,4(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    11a8:	2001703a 	wrctl	status,r4
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
    11ac:	a890000c 	andi	r2,r21,16384
    11b0:	103fe826 	beq	r2,zero,1154 <altera_avalon_jtag_uart_write+0xf0>
    11b4:	003fee06 	br	1170 <altera_avalon_jtag_uart_write+0x10c>
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
}
    11b8:	dfc00717 	ldw	ra,28(sp)
    11bc:	dd800617 	ldw	r22,24(sp)
    11c0:	dd400517 	ldw	r21,20(sp)
    11c4:	dd000417 	ldw	r20,16(sp)
    11c8:	dcc00317 	ldw	r19,12(sp)
    11cc:	dc800217 	ldw	r18,8(sp)
    11d0:	dc400117 	ldw	r17,4(sp)
    11d4:	dc000017 	ldw	r16,0(sp)
    11d8:	dec00804 	addi	sp,sp,32
    11dc:	f800283a 	ret

000011e0 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    11e0:	deffff04 	addi	sp,sp,-4
    11e4:	dfc00015 	stw	ra,0(sp)
    11e8:	200b883a 	mov	r5,r4
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    11ec:	00c00034 	movhi	r3,0
    11f0:	18d3be04 	addi	r3,r3,20216
    11f4:	18800017 	ldw	r2,0(r3)
    11f8:	1000011e 	bne	r2,zero,1200 <alt_avalon_timer_sc_init+0x20>
  {
    _alt_tick_rate = nticks;
    11fc:	19c00015 	stw	r7,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    1200:	008001c4 	movi	r2,7
    1204:	28800135 	stwio	r2,4(r5)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
    1208:	3009883a 	mov	r4,r6
    120c:	01800034 	movhi	r6,0
    1210:	31848904 	addi	r6,r6,4644
    1214:	00009080 	call	908 <alt_irq_register>
#endif  
}
    1218:	dfc00017 	ldw	ra,0(sp)
    121c:	dec00104 	addi	sp,sp,4
    1220:	f800283a 	ret

00001224 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    1224:	defffe04 	addi	sp,sp,-8
    1228:	dfc00115 	stw	ra,4(sp)
    122c:	dc000015 	stw	r16,0(sp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    1230:	20000035 	stwio	zero,0(r4)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    1234:	20800137 	ldwio	r2,4(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1238:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    123c:	00bfff84 	movi	r2,-2
    1240:	8084703a 	and	r2,r16,r2
    1244:	1001703a 	wrctl	status,r2
  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  alt_tick ();
    1248:	0001ab80 	call	1ab8 <alt_tick>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    124c:	8001703a 	wrctl	status,r16
  alt_irq_enable_all(cpu_sr);
}
    1250:	dfc00117 	ldw	ra,4(sp)
    1254:	dc000017 	ldw	r16,0(sp)
    1258:	dec00204 	addi	sp,sp,8
    125c:	f800283a 	ret

00001260 <get_DDRAM_addr>:
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
	//assume valid inputs
	unsigned char addr = 0x00000000;
	if (y_pos == 0)
    1260:	2800021e 	bne	r5,zero,126c <get_DDRAM_addr+0xc>
	{
		addr |= x_pos;
    1264:	2005883a 	mov	r2,r4
    1268:	00000106 	br	1270 <get_DDRAM_addr+0x10>
	}
	else
	{
		addr |= x_pos;
		addr |= 0x00000040;
    126c:	20801014 	ori	r2,r4,64
    1270:	10803fcc 	andi	r2,r2,255
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
}
    1274:	10802014 	ori	r2,r2,128
    1278:	f800283a 	ret

0000127c <alt_up_character_lcd_string>:
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
    127c:	28c00003 	ldbu	r3,0(r5)
    1280:	18803fcc 	andi	r2,r3,255
    1284:	1080201c 	xori	r2,r2,128
    1288:	10bfe004 	addi	r2,r2,-128
    128c:	10000d26 	beq	r2,zero,12c4 <alt_up_character_lcd_string+0x48>
    1290:	01800044 	movi	r6,1
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
    1294:	20800a17 	ldw	r2,40(r4)
    1298:	1185883a 	add	r2,r2,r6
    129c:	18c03fcc 	andi	r3,r3,255
    12a0:	18c0201c 	xori	r3,r3,128
    12a4:	18ffe004 	addi	r3,r3,-128
    12a8:	10c00025 	stbio	r3,0(r2)
		++ptr;
    12ac:	298b883a 	add	r5,r5,r6
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
    12b0:	28c00003 	ldbu	r3,0(r5)
    12b4:	18803fcc 	andi	r2,r3,255
    12b8:	1080201c 	xori	r2,r2,128
    12bc:	10bfe004 	addi	r2,r2,-128
    12c0:	103ff41e 	bne	r2,zero,1294 <alt_up_character_lcd_string+0x18>
    12c4:	f800283a 	ret

000012c8 <alt_up_character_lcd_write>:
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
    12c8:	30000926 	beq	r6,zero,12f0 <alt_up_character_lcd_write+0x28>
    12cc:	000f883a 	mov	r7,zero
    12d0:	02000044 	movi	r8,1
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
    12d4:	20800a17 	ldw	r2,40(r4)
    12d8:	1205883a 	add	r2,r2,r8
    12dc:	3947883a 	add	r3,r7,r5
    12e0:	18c00007 	ldb	r3,0(r3)
    12e4:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
    12e8:	3a0f883a 	add	r7,r7,r8
    12ec:	31fff91e 	bne	r6,r7,12d4 <alt_up_character_lcd_write+0xc>
    12f0:	f800283a 	ret

000012f4 <alt_up_character_lcd_write_fd>:
	}
}

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
    12f4:	deffff04 	addi	sp,sp,-4
    12f8:	dfc00015 	stw	ra,0(sp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
    12fc:	21000017 	ldw	r4,0(r4)
    1300:	00012c80 	call	12c8 <alt_up_character_lcd_write>
	return 0;
}
    1304:	0005883a 	mov	r2,zero
    1308:	dfc00017 	ldw	ra,0(sp)
    130c:	dec00104 	addi	sp,sp,4
    1310:	f800283a 	ret

00001314 <alt_up_character_lcd_init>:
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
    1314:	20c00a17 	ldw	r3,40(r4)
    1318:	00800044 	movi	r2,1
    131c:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
    1320:	f800283a 	ret

00001324 <alt_up_character_lcd_send_cmd>:
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
    1324:	20800a17 	ldw	r2,40(r4)
    1328:	29403fcc 	andi	r5,r5,255
    132c:	11400025 	stbio	r5,0(r2)
}
    1330:	f800283a 	ret

00001334 <alt_up_character_lcd_cursor_blink_on>:
{
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
}

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
    1334:	deffff04 	addi	sp,sp,-4
    1338:	dfc00015 	stw	ra,0(sp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
    133c:	014003c4 	movi	r5,15
    1340:	00013240 	call	1324 <alt_up_character_lcd_send_cmd>
}
    1344:	dfc00017 	ldw	ra,0(sp)
    1348:	dec00104 	addi	sp,sp,4
    134c:	f800283a 	ret

00001350 <alt_up_character_lcd_cursor_off>:
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
	return 0;
}

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
    1350:	deffff04 	addi	sp,sp,-4
    1354:	dfc00015 	stw	ra,0(sp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
    1358:	01400304 	movi	r5,12
    135c:	00013240 	call	1324 <alt_up_character_lcd_send_cmd>
}
    1360:	dfc00017 	ldw	ra,0(sp)
    1364:	dec00104 	addi	sp,sp,4
    1368:	f800283a 	ret

0000136c <alt_up_character_lcd_erase_pos>:
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
    136c:	defffd04 	addi	sp,sp,-12
    1370:	dfc00215 	stw	ra,8(sp)
    1374:	dc400115 	stw	r17,4(sp)
    1378:	dc000015 	stw	r16,0(sp)
    137c:	2021883a 	mov	r16,r4
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
    1380:	008009c4 	movi	r2,39
    1384:	11400e36 	bltu	r2,r5,13c0 <alt_up_character_lcd_erase_pos+0x54>
    1388:	04400044 	movi	r17,1
    138c:	89800c36 	bltu	r17,r6,13c0 <alt_up_character_lcd_erase_pos+0x54>
		return -1;

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    1390:	2809883a 	mov	r4,r5
    1394:	300b883a 	mov	r5,r6
    1398:	00012600 	call	1260 <get_DDRAM_addr>
    139c:	8009883a 	mov	r4,r16
    13a0:	11403fcc 	andi	r5,r2,255
    13a4:	00013240 	call	1324 <alt_up_character_lcd_send_cmd>
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
    13a8:	80800a17 	ldw	r2,40(r16)
    13ac:	1445883a 	add	r2,r2,r17
    13b0:	00c00084 	movi	r3,2
    13b4:	10c00025 	stbio	r3,0(r2)
    13b8:	0005883a 	mov	r2,zero
    13bc:	00000106 	br	13c4 <alt_up_character_lcd_erase_pos+0x58>
	return 0;
    13c0:	00bfffc4 	movi	r2,-1
}
    13c4:	dfc00217 	ldw	ra,8(sp)
    13c8:	dc400117 	ldw	r17,4(sp)
    13cc:	dc000017 	ldw	r16,0(sp)
    13d0:	dec00304 	addi	sp,sp,12
    13d4:	f800283a 	ret

000013d8 <alt_up_character_lcd_shift_display>:
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    13d8:	defffa04 	addi	sp,sp,-24
    13dc:	dfc00515 	stw	ra,20(sp)
    13e0:	dd000415 	stw	r20,16(sp)
    13e4:	dcc00315 	stw	r19,12(sp)
    13e8:	dc800215 	stw	r18,8(sp)
    13ec:	dc400115 	stw	r17,4(sp)
    13f0:	dc000015 	stw	r16,0(sp)
    13f4:	2027883a 	mov	r19,r4
	if (x_right_shift_offset == 0) 
    13f8:	28001326 	beq	r5,zero,1448 <alt_up_character_lcd_shift_display+0x70>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
    13fc:	0140020e 	bge	zero,r5,1408 <alt_up_character_lcd_shift_display+0x30>
    1400:	05000704 	movi	r20,28
    1404:	00000106 	br	140c <alt_up_character_lcd_shift_display+0x34>
    1408:	05000604 	movi	r20,24
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
    140c:	2800010e 	bge	r5,zero,1414 <alt_up_character_lcd_shift_display+0x3c>
    1410:	014bc83a 	sub	r5,zero,r5
	// do the shift
	while (num_offset-- > 0)
    1414:	00bfffc4 	movi	r2,-1
    1418:	28a1883a 	add	r16,r5,r2
    141c:	80c03fcc 	andi	r3,r16,255
    1420:	10803fcc 	andi	r2,r2,255
    1424:	18800826 	beq	r3,r2,1448 <alt_up_character_lcd_shift_display+0x70>
    1428:	04bfffc4 	movi	r18,-1
    142c:	04403fc4 	movi	r17,255
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    1430:	9809883a 	mov	r4,r19
    1434:	a1403fcc 	andi	r5,r20,255
    1438:	00013240 	call	1324 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    143c:	84a1883a 	add	r16,r16,r18
    1440:	80803fcc 	andi	r2,r16,255
    1444:	147ffa1e 	bne	r2,r17,1430 <alt_up_character_lcd_shift_display+0x58>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
    1448:	dfc00517 	ldw	ra,20(sp)
    144c:	dd000417 	ldw	r20,16(sp)
    1450:	dcc00317 	ldw	r19,12(sp)
    1454:	dc800217 	ldw	r18,8(sp)
    1458:	dc400117 	ldw	r17,4(sp)
    145c:	dc000017 	ldw	r16,0(sp)
    1460:	dec00604 	addi	sp,sp,24
    1464:	f800283a 	ret

00001468 <alt_up_character_lcd_shift_cursor>:
	alt_up_character_lcd_send_cmd(lcd, addr);
	return 0;
}

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    1468:	defffa04 	addi	sp,sp,-24
    146c:	dfc00515 	stw	ra,20(sp)
    1470:	dd000415 	stw	r20,16(sp)
    1474:	dcc00315 	stw	r19,12(sp)
    1478:	dc800215 	stw	r18,8(sp)
    147c:	dc400115 	stw	r17,4(sp)
    1480:	dc000015 	stw	r16,0(sp)
    1484:	2027883a 	mov	r19,r4
	if (x_right_shift_offset == 0) 
    1488:	28001326 	beq	r5,zero,14d8 <alt_up_character_lcd_shift_cursor+0x70>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
    148c:	0140020e 	bge	zero,r5,1498 <alt_up_character_lcd_shift_cursor+0x30>
    1490:	05000504 	movi	r20,20
    1494:	00000106 	br	149c <alt_up_character_lcd_shift_cursor+0x34>
    1498:	05000404 	movi	r20,16
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
    149c:	2800010e 	bge	r5,zero,14a4 <alt_up_character_lcd_shift_cursor+0x3c>
    14a0:	014bc83a 	sub	r5,zero,r5
	// do the shift
	while (num_offset-- > 0)
    14a4:	00bfffc4 	movi	r2,-1
    14a8:	28a1883a 	add	r16,r5,r2
    14ac:	80c03fcc 	andi	r3,r16,255
    14b0:	10803fcc 	andi	r2,r2,255
    14b4:	18800826 	beq	r3,r2,14d8 <alt_up_character_lcd_shift_cursor+0x70>
    14b8:	04bfffc4 	movi	r18,-1
    14bc:	04403fc4 	movi	r17,255
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    14c0:	9809883a 	mov	r4,r19
    14c4:	a1403fcc 	andi	r5,r20,255
    14c8:	00013240 	call	1324 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    14cc:	84a1883a 	add	r16,r16,r18
    14d0:	80803fcc 	andi	r2,r16,255
    14d4:	147ffa1e 	bne	r2,r17,14c0 <alt_up_character_lcd_shift_cursor+0x58>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
    14d8:	dfc00517 	ldw	ra,20(sp)
    14dc:	dd000417 	ldw	r20,16(sp)
    14e0:	dcc00317 	ldw	r19,12(sp)
    14e4:	dc800217 	ldw	r18,8(sp)
    14e8:	dc400117 	ldw	r17,4(sp)
    14ec:	dc000017 	ldw	r16,0(sp)
    14f0:	dec00604 	addi	sp,sp,24
    14f4:	f800283a 	ret

000014f8 <alt_up_character_lcd_set_cursor_pos>:
	return 0;
}

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
    14f8:	defffe04 	addi	sp,sp,-8
    14fc:	dfc00115 	stw	ra,4(sp)
    1500:	dc000015 	stw	r16,0(sp)
    1504:	2021883a 	mov	r16,r4
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
    1508:	008009c4 	movi	r2,39
    150c:	11400a36 	bltu	r2,r5,1538 <alt_up_character_lcd_set_cursor_pos+0x40>
    1510:	00800044 	movi	r2,1
    1514:	11800836 	bltu	r2,r6,1538 <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    1518:	2809883a 	mov	r4,r5
    151c:	300b883a 	mov	r5,r6
    1520:	00012600 	call	1260 <get_DDRAM_addr>
    1524:	8009883a 	mov	r4,r16
    1528:	11403fcc 	andi	r5,r2,255
    152c:	00013240 	call	1324 <alt_up_character_lcd_send_cmd>
    1530:	0005883a 	mov	r2,zero
    1534:	00000106 	br	153c <alt_up_character_lcd_set_cursor_pos+0x44>
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
	return 0;
    1538:	00bfffc4 	movi	r2,-1
}
    153c:	dfc00117 	ldw	ra,4(sp)
    1540:	dc000017 	ldw	r16,0(sp)
    1544:	dec00204 	addi	sp,sp,8
    1548:	f800283a 	ret

0000154c <alt_up_character_lcd_open_dev>:
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
    154c:	deffff04 	addi	sp,sp,-4
    1550:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
    1554:	01400034 	movhi	r5,0
    1558:	294ddd04 	addi	r5,r5,14196
    155c:	00017580 	call	1758 <alt_find_dev>

  return dev;
}
    1560:	dfc00017 	ldw	ra,0(sp)
    1564:	dec00104 	addi	sp,sp,4
    1568:	f800283a 	ret

0000156c <alt_alarm_start>:
                     void* context)
{
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
    156c:	00800034 	movhi	r2,0
    1570:	1093be04 	addi	r2,r2,20216
    1574:	10800017 	ldw	r2,0(r2)
    1578:	1000021e 	bne	r2,zero,1584 <alt_alarm_start+0x18>
    157c:	00bfde84 	movi	r2,-134
    1580:	f800283a 	ret
  {
    if (alarm)
    1584:	2000021e 	bne	r4,zero,1590 <alt_alarm_start+0x24>
    1588:	00bffa84 	movi	r2,-22
    158c:	f800283a 	ret
    {
      alarm->callback = callback;
    1590:	21800315 	stw	r6,12(r4)
      alarm->context  = context;
    1594:	21c00515 	stw	r7,20(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1598:	000f303a 	rdctl	r7,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    159c:	00bfff84 	movi	r2,-2
    15a0:	3884703a 	and	r2,r7,r2
    15a4:	1001703a 	wrctl	status,r2
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    15a8:	00800034 	movhi	r2,0
    15ac:	1093bf04 	addi	r2,r2,20220
    15b0:	10c00017 	ldw	r3,0(r2)
 
      irq_context = alt_irq_disable_all ();
      
      current_nticks = alt_nticks();
      
      alarm->time = nticks + current_nticks + 1; 
    15b4:	01800044 	movi	r6,1
    15b8:	1985883a 	add	r2,r3,r6
    15bc:	2885883a 	add	r2,r5,r2
    15c0:	20800215 	stw	r2,8(r4)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    15c4:	10c0022e 	bgeu	r2,r3,15d0 <alt_alarm_start+0x64>
      {
        alarm->rollover = 1;
    15c8:	21800405 	stb	r6,16(r4)
    15cc:	00000106 	br	15d4 <alt_alarm_start+0x68>
      }
      else
      {
        alarm->rollover = 0;
    15d0:	20000405 	stb	zero,16(r4)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    15d4:	00800034 	movhi	r2,0
    15d8:	108de104 	addi	r2,r2,14212
    15dc:	20800115 	stw	r2,4(r4)
  entry->next     = list->next;
    15e0:	10c00017 	ldw	r3,0(r2)
    15e4:	20c00015 	stw	r3,0(r4)

  list->next->previous = entry;
    15e8:	10c00017 	ldw	r3,0(r2)
    15ec:	19000115 	stw	r4,4(r3)
  list->next           = entry;
    15f0:	11000015 	stw	r4,0(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    15f4:	3801703a 	wrctl	status,r7
    15f8:	0005883a 	mov	r2,zero
  }
  else
  {
    return -ENOTSUP;
  }
}
    15fc:	f800283a 	ret

00001600 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    1600:	defffd04 	addi	sp,sp,-12
    1604:	dfc00215 	stw	ra,8(sp)
    1608:	dc400115 	stw	r17,4(sp)
    160c:	dc000015 	stw	r16,0(sp)
    1610:	2021883a 	mov	r16,r4
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    1614:	20001c16 	blt	r4,zero,1688 <close+0x88>
    1618:	20c00324 	muli	r3,r4,12
    161c:	00800034 	movhi	r2,0
    1620:	108c7404 	addi	r2,r2,12752
    1624:	1889883a 	add	r4,r3,r2

  if (fd)
    1628:	20001726 	beq	r4,zero,1688 <close+0x88>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    162c:	20800017 	ldw	r2,0(r4)
    1630:	10800417 	ldw	r2,16(r2)
    1634:	10002126 	beq	r2,zero,16bc <close+0xbc>
    1638:	103ee83a 	callr	r2
    163c:	1023883a 	mov	r17,r2

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    1640:	8009883a 	mov	r4,r16
    1644:	0001a600 	call	1a60 <alt_release_fd>
    if (rval < 0)
    1648:	88000216 	blt	r17,zero,1654 <close+0x54>
    164c:	0005883a 	mov	r2,zero
    1650:	00001d06 	br	16c8 <close+0xc8>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    1654:	00800034 	movhi	r2,0
    1658:	108de004 	addi	r2,r2,14208
    165c:	10800017 	ldw	r2,0(r2)
    1660:	1000031e 	bne	r2,zero,1670 <close+0x70>
    1664:	00c00034 	movhi	r3,0
    1668:	18d3c004 	addi	r3,r3,20224
    166c:	00000206 	br	1678 <close+0x78>
    1670:	103ee83a 	callr	r2
    1674:	1007883a 	mov	r3,r2
    {
      ALT_ERRNO = -rval;
    1678:	0445c83a 	sub	r2,zero,r17
    167c:	18800015 	stw	r2,0(r3)
    1680:	00bfffc4 	movi	r2,-1
    1684:	00001006 	br	16c8 <close+0xc8>
    1688:	00800034 	movhi	r2,0
    168c:	108de004 	addi	r2,r2,14208
    1690:	10800017 	ldw	r2,0(r2)
    1694:	1000031e 	bne	r2,zero,16a4 <close+0xa4>
    1698:	00c00034 	movhi	r3,0
    169c:	18d3c004 	addi	r3,r3,20224
    16a0:	00000206 	br	16ac <close+0xac>
    16a4:	103ee83a 	callr	r2
    16a8:	1007883a 	mov	r3,r2
    }
    return 0;
  }
  else
  {
    ALT_ERRNO = EBADFD;
    16ac:	00801444 	movi	r2,81
    16b0:	18800015 	stw	r2,0(r3)
    16b4:	00bfffc4 	movi	r2,-1
    16b8:	00000306 	br	16c8 <close+0xc8>

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    16bc:	8009883a 	mov	r4,r16
    16c0:	0001a600 	call	1a60 <alt_release_fd>
    16c4:	0005883a 	mov	r2,zero
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
    16c8:	dfc00217 	ldw	ra,8(sp)
    16cc:	dc400117 	ldw	r17,4(sp)
    16d0:	dc000017 	ldw	r16,0(sp)
    16d4:	dec00304 	addi	sp,sp,12
    16d8:	f800283a 	ret

000016dc <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    16dc:	f800283a 	ret

000016e0 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
    16e0:	3005883a 	mov	r2,r6
    16e4:	f800283a 	ret

000016e8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    16e8:	deffff04 	addi	sp,sp,-4
    16ec:	dfc00015 	stw	ra,0(sp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    16f0:	20000226 	beq	r4,zero,16fc <alt_dev_llist_insert+0x14>
    16f4:	20800217 	ldw	r2,8(r4)
    16f8:	10000d1e 	bne	r2,zero,1730 <alt_dev_llist_insert+0x48>
    16fc:	00800034 	movhi	r2,0
    1700:	108de004 	addi	r2,r2,14208
    1704:	10800017 	ldw	r2,0(r2)
    1708:	1000031e 	bne	r2,zero,1718 <alt_dev_llist_insert+0x30>
    170c:	00c00034 	movhi	r3,0
    1710:	18d3c004 	addi	r3,r3,20224
    1714:	00000206 	br	1720 <alt_dev_llist_insert+0x38>
    1718:	103ee83a 	callr	r2
    171c:	1007883a 	mov	r3,r2
  {
    ALT_ERRNO = EINVAL;
    1720:	00800584 	movi	r2,22
    1724:	18800015 	stw	r2,0(r3)
    1728:	00bffa84 	movi	r2,-22
    172c:	00000706 	br	174c <alt_dev_llist_insert+0x64>
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    1730:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
    1734:	28800017 	ldw	r2,0(r5)
    1738:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
    173c:	28800017 	ldw	r2,0(r5)
    1740:	11000115 	stw	r4,4(r2)
  list->next           = entry;
    1744:	29000015 	stw	r4,0(r5)
    1748:	0005883a 	mov	r2,zero
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
    174c:	dfc00017 	ldw	ra,0(sp)
    1750:	dec00104 	addi	sp,sp,4
    1754:	f800283a 	ret

00001758 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    1758:	defffb04 	addi	sp,sp,-20
    175c:	dfc00415 	stw	ra,16(sp)
    1760:	dcc00315 	stw	r19,12(sp)
    1764:	dc800215 	stw	r18,8(sp)
    1768:	dc400115 	stw	r17,4(sp)
    176c:	dc000015 	stw	r16,0(sp)
    1770:	2027883a 	mov	r19,r4
    1774:	2821883a 	mov	r16,r5
  alt_dev* next = (alt_dev*) llist->next;
    1778:	2c400017 	ldw	r17,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
    177c:	0001d7c0 	call	1d7c <strlen>
    1780:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    1784:	8c000726 	beq	r17,r16,17a4 <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    1788:	89000217 	ldw	r4,8(r17)
    178c:	980b883a 	mov	r5,r19
    1790:	900d883a 	mov	r6,r18
    1794:	0001d080 	call	1d08 <memcmp>
    1798:	10000326 	beq	r2,zero,17a8 <alt_find_dev+0x50>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    179c:	8c400017 	ldw	r17,0(r17)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    17a0:	847ff91e 	bne	r16,r17,1788 <alt_find_dev+0x30>
    17a4:	0023883a 	mov	r17,zero
  }
  
  /* No match found */
  
  return NULL;
}
    17a8:	8805883a 	mov	r2,r17
    17ac:	dfc00417 	ldw	ra,16(sp)
    17b0:	dcc00317 	ldw	r19,12(sp)
    17b4:	dc800217 	ldw	r18,8(sp)
    17b8:	dc400117 	ldw	r17,4(sp)
    17bc:	dc000017 	ldw	r16,0(sp)
    17c0:	dec00504 	addi	sp,sp,20
    17c4:	f800283a 	ret

000017c8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    17c8:	deffff04 	addi	sp,sp,-4
    17cc:	dfc00015 	stw	ra,0(sp)
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    17d0:	0009883a 	mov	r4,zero
    17d4:	01440004 	movi	r5,4096
    17d8:	0001c940 	call	1c94 <alt_icache_flush>
#endif
}
    17dc:	dfc00017 	ldw	ra,0(sp)
    17e0:	dec00104 	addi	sp,sp,4
    17e4:	f800283a 	ret

000017e8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    17e8:	defffe04 	addi	sp,sp,-8
    17ec:	dfc00115 	stw	ra,4(sp)
    17f0:	dc000015 	stw	r16,0(sp)
    17f4:	2021883a 	mov	r16,r4
  int old;

  old = open (name, flags, mode);
    17f8:	2809883a 	mov	r4,r5
    17fc:	300b883a 	mov	r5,r6
    1800:	380d883a 	mov	r6,r7
    1804:	00018e40 	call	18e4 <open>
    1808:	1009883a 	mov	r4,r2

  if (old >= 0)
    180c:	10000b16 	blt	r2,zero,183c <alt_open_fd+0x54>
  {
    fd->dev      = alt_fd_list[old].dev;
    1810:	10c00324 	muli	r3,r2,12
    1814:	00800034 	movhi	r2,0
    1818:	108c7404 	addi	r2,r2,12752
    181c:	1887883a 	add	r3,r3,r2
    1820:	18800017 	ldw	r2,0(r3)
    1824:	80800015 	stw	r2,0(r16)
    fd->priv     = alt_fd_list[old].priv;
    1828:	18800117 	ldw	r2,4(r3)
    182c:	80800115 	stw	r2,4(r16)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    1830:	18800217 	ldw	r2,8(r3)
    1834:	80800215 	stw	r2,8(r16)

    alt_release_fd (old);
    1838:	0001a600 	call	1a60 <alt_release_fd>
  }
} 
    183c:	dfc00117 	ldw	ra,4(sp)
    1840:	dc000017 	ldw	r16,0(sp)
    1844:	dec00204 	addi	sp,sp,8
    1848:	f800283a 	ret

0000184c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    184c:	defffa04 	addi	sp,sp,-24
    1850:	dfc00515 	stw	ra,20(sp)
    1854:	dd000415 	stw	r20,16(sp)
    1858:	dcc00315 	stw	r19,12(sp)
    185c:	dc800215 	stw	r18,8(sp)
    1860:	dc400115 	stw	r17,4(sp)
    1864:	dc000015 	stw	r16,0(sp)
    1868:	2005883a 	mov	r2,r4
    186c:	2827883a 	mov	r19,r5
    1870:	3029883a 	mov	r20,r6
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    1874:	04000034 	movhi	r16,0
    1878:	840c7704 	addi	r16,r16,12764
    187c:	04800044 	movi	r18,1
    1880:	04407fc4 	movi	r17,511
    1884:	8009883a 	mov	r4,r16
    1888:	100b883a 	mov	r5,r2
    188c:	900d883a 	mov	r6,r18
    1890:	880f883a 	mov	r7,r17
    1894:	00017e80 	call	17e8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    1898:	843ffd04 	addi	r16,r16,-12
    189c:	8009883a 	mov	r4,r16
    18a0:	980b883a 	mov	r5,r19
    18a4:	000d883a 	mov	r6,zero
    18a8:	880f883a 	mov	r7,r17
    18ac:	00017e80 	call	17e8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    18b0:	81000604 	addi	r4,r16,24
    18b4:	a00b883a 	mov	r5,r20
    18b8:	900d883a 	mov	r6,r18
    18bc:	880f883a 	mov	r7,r17
    18c0:	00017e80 	call	17e8 <alt_open_fd>
}  
    18c4:	dfc00517 	ldw	ra,20(sp)
    18c8:	dd000417 	ldw	r20,16(sp)
    18cc:	dcc00317 	ldw	r19,12(sp)
    18d0:	dc800217 	ldw	r18,8(sp)
    18d4:	dc400117 	ldw	r17,4(sp)
    18d8:	dc000017 	ldw	r16,0(sp)
    18dc:	dec00604 	addi	sp,sp,24
    18e0:	f800283a 	ret

000018e4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    18e4:	defff904 	addi	sp,sp,-28
    18e8:	dfc00615 	stw	ra,24(sp)
    18ec:	dd400515 	stw	r21,20(sp)
    18f0:	dd000415 	stw	r20,16(sp)
    18f4:	dcc00315 	stw	r19,12(sp)
    18f8:	dc800215 	stw	r18,8(sp)
    18fc:	dc400115 	stw	r17,4(sp)
    1900:	dc000015 	stw	r16,0(sp)
    1904:	2029883a 	mov	r20,r4
    1908:	2827883a 	mov	r19,r5
    190c:	302b883a 	mov	r21,r6
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    1910:	01400034 	movhi	r5,0
    1914:	294ddd04 	addi	r5,r5,14196
    1918:	00017580 	call	1758 <alt_find_dev>
    191c:	1021883a 	mov	r16,r2
    1920:	10000226 	beq	r2,zero,192c <open+0x48>
    1924:	0025883a 	mov	r18,zero
    1928:	00000a06 	br	1954 <open+0x70>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    192c:	a009883a 	mov	r4,r20
    1930:	0001b6c0 	call	1b6c <alt_find_file>
    1934:	1021883a 	mov	r16,r2

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    1938:	1000051e 	bne	r2,zero,1950 <open+0x6c>
    193c:	047fffc4 	movi	r17,-1
    1940:	043ffb44 	movi	r16,-19
    1944:	00002b06 	br	19f4 <open+0x110>
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    1948:	043ffcc4 	movi	r16,-13
    194c:	00002906 	br	19f4 <open+0x110>

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    1950:	04800044 	movi	r18,1
  {
    if ((index = alt_get_fd (dev)) < 0)
    1954:	8009883a 	mov	r4,r16
    1958:	0001c280 	call	1c28 <alt_get_fd>
    195c:	1023883a 	mov	r17,r2
    1960:	10003316 	blt	r2,zero,1a30 <open+0x14c>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
    1964:	10800324 	muli	r2,r2,12
    1968:	02000034 	movhi	r8,0
    196c:	420c7404 	addi	r8,r8,12752
    1970:	1209883a 	add	r4,r2,r8
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    1974:	00900034 	movhi	r2,16384
    1978:	10bfffc4 	addi	r2,r2,-1
    197c:	9886703a 	and	r3,r19,r2
    1980:	20c00215 	stw	r3,8(r4)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    1984:	9004c03a 	cmpne	r2,r18,zero
    1988:	1000121e 	bne	r2,zero,19d4 <open+0xf0>

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    198c:	18900034 	orhi	r2,r3,16384
    1990:	20800215 	stw	r2,8(r4)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    1994:	00800034 	movhi	r2,0
    1998:	108ddf04 	addi	r2,r2,14204
    199c:	11c00017 	ldw	r7,0(r2)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    19a0:	21800017 	ldw	r6,0(r4)
    19a4:	000b883a 	mov	r5,zero
    19a8:	4007883a 	mov	r3,r8
    19ac:	02400044 	movi	r9,1
    19b0:	02000304 	movi	r8,12
    19b4:	18800017 	ldw	r2,0(r3)
    19b8:	1180031e 	bne	r2,r6,19c8 <open+0xe4>
    19bc:	18800217 	ldw	r2,8(r3)
    19c0:	1000010e 	bge	r2,zero,19c8 <open+0xe4>
    19c4:	193fe01e 	bne	r3,r4,1948 <open+0x64>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    19c8:	2a4b883a 	add	r5,r5,r9
    19cc:	1a07883a 	add	r3,r3,r8
    19d0:	397ff82e 	bgeu	r7,r5,19b4 <open+0xd0>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    19d4:	80800317 	ldw	r2,12(r16)
    19d8:	10001726 	beq	r2,zero,1a38 <open+0x154>
    19dc:	a00b883a 	mov	r5,r20
    19e0:	980d883a 	mov	r6,r19
    19e4:	a80f883a 	mov	r7,r21
    19e8:	103ee83a 	callr	r2
    19ec:	1021883a 	mov	r16,r2
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    19f0:	1000110e 	bge	r2,zero,1a38 <open+0x154>
  {
    alt_release_fd (index);  
    19f4:	8809883a 	mov	r4,r17
    19f8:	0001a600 	call	1a60 <alt_release_fd>
    19fc:	00800034 	movhi	r2,0
    1a00:	108de004 	addi	r2,r2,14208
    1a04:	10800017 	ldw	r2,0(r2)
    1a08:	1000031e 	bne	r2,zero,1a18 <open+0x134>
    1a0c:	00c00034 	movhi	r3,0
    1a10:	18d3c004 	addi	r3,r3,20224
    1a14:	00000206 	br	1a20 <open+0x13c>
    1a18:	103ee83a 	callr	r2
    1a1c:	1007883a 	mov	r3,r2
    ALT_ERRNO = -status;
    1a20:	0405c83a 	sub	r2,zero,r16
    1a24:	18800015 	stw	r2,0(r3)
    1a28:	047fffc4 	movi	r17,-1
    1a2c:	00000206 	br	1a38 <open+0x154>
    1a30:	1021883a 	mov	r16,r2
    1a34:	003fef06 	br	19f4 <open+0x110>
  }
  
  /* return the reference upon success */

  return index;
}
    1a38:	8805883a 	mov	r2,r17
    1a3c:	dfc00617 	ldw	ra,24(sp)
    1a40:	dd400517 	ldw	r21,20(sp)
    1a44:	dd000417 	ldw	r20,16(sp)
    1a48:	dcc00317 	ldw	r19,12(sp)
    1a4c:	dc800217 	ldw	r18,8(sp)
    1a50:	dc400117 	ldw	r17,4(sp)
    1a54:	dc000017 	ldw	r16,0(sp)
    1a58:	dec00704 	addi	sp,sp,28
    1a5c:	f800283a 	ret

00001a60 <alt_release_fd>:
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  if (fd > 2)
    1a60:	00800084 	movi	r2,2
    1a64:	1100060e 	bge	r2,r4,1a80 <alt_release_fd+0x20>
  {
    alt_fd_list[fd].fd_flags = 0;
    1a68:	20800324 	muli	r2,r4,12
    1a6c:	00c00034 	movhi	r3,0
    1a70:	18cc7404 	addi	r3,r3,12752
    1a74:	10c5883a 	add	r2,r2,r3
    1a78:	10000215 	stw	zero,8(r2)
    alt_fd_list[fd].dev      = 0;
    1a7c:	10000015 	stw	zero,0(r2)
    1a80:	f800283a 	ret

00001a84 <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1a84:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1a88:	00bfff84 	movi	r2,-2
    1a8c:	2884703a 	and	r2,r5,r2
    1a90:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    1a94:	20c00017 	ldw	r3,0(r4)
    1a98:	20800117 	ldw	r2,4(r4)
    1a9c:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
    1aa0:	20800117 	ldw	r2,4(r4)
    1aa4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    1aa8:	21000115 	stw	r4,4(r4)
  entry->next     = entry;
    1aac:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1ab0:	2801703a 	wrctl	status,r5
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  alt_llist_remove (&alarm->llist);
  alt_irq_enable_all (irq_context);
}
    1ab4:	f800283a 	ret

00001ab8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    1ab8:	defffd04 	addi	sp,sp,-12
    1abc:	dfc00215 	stw	ra,8(sp)
    1ac0:	dc400115 	stw	r17,4(sp)
    1ac4:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    1ac8:	d4200d17 	ldw	r16,-32716(gp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    1acc:	d0a5eb17 	ldw	r2,-26708(gp)
    1ad0:	10800044 	addi	r2,r2,1
    1ad4:	d0a5eb15 	stw	r2,-26708(gp)
    1ad8:	00001b06 	br	1b48 <alt_tick+0x90>

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
    1adc:	84400017 	ldw	r17,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    1ae0:	80800403 	ldbu	r2,16(r16)
    1ae4:	10000326 	beq	r2,zero,1af4 <alt_tick+0x3c>
    1ae8:	d0a5eb17 	ldw	r2,-26708(gp)
    1aec:	1000011e 	bne	r2,zero,1af4 <alt_tick+0x3c>
    {
      alarm->rollover = 0;
    1af0:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    1af4:	d0e5eb17 	ldw	r3,-26708(gp)
    1af8:	80800217 	ldw	r2,8(r16)
    1afc:	18801136 	bltu	r3,r2,1b44 <alt_tick+0x8c>
    1b00:	80800403 	ldbu	r2,16(r16)
    1b04:	10000f1e 	bne	r2,zero,1b44 <alt_tick+0x8c>
    {
      next_callback = alarm->callback (alarm->context);
    1b08:	80800317 	ldw	r2,12(r16)
    1b0c:	81000517 	ldw	r4,20(r16)
    1b10:	103ee83a 	callr	r2
    1b14:	1007883a 	mov	r3,r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    1b18:	1000031e 	bne	r2,zero,1b28 <alt_tick+0x70>
      {
        alt_alarm_stop (alarm);
    1b1c:	8009883a 	mov	r4,r16
    1b20:	0001a840 	call	1a84 <alt_alarm_stop>
    1b24:	00000706 	br	1b44 <alt_tick+0x8c>
      }
      else
      {
        alarm->time += next_callback;
    1b28:	80800217 	ldw	r2,8(r16)
    1b2c:	1885883a 	add	r2,r3,r2
    1b30:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    1b34:	d0e5eb17 	ldw	r3,-26708(gp)
    1b38:	10c0022e 	bgeu	r2,r3,1b44 <alt_tick+0x8c>
        {
          alarm->rollover = 1;
    1b3c:	00800044 	movi	r2,1
    1b40:	80800405 	stb	r2,16(r16)
    1b44:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    1b48:	d0a00d04 	addi	r2,gp,-32716
    1b4c:	80bfe31e 	bne	r16,r2,1adc <alt_tick+0x24>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    1b50:	dfc00217 	ldw	ra,8(sp)
    1b54:	dc400117 	ldw	r17,4(sp)
    1b58:	dc000017 	ldw	r16,0(sp)
    1b5c:	dec00304 	addi	sp,sp,12
    1b60:	f800283a 	ret

00001b64 <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    1b64:	000170fa 	wrctl	ienable,zero
}
    1b68:	f800283a 	ret

00001b6c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    1b6c:	defff904 	addi	sp,sp,-28
    1b70:	dfc00615 	stw	ra,24(sp)
    1b74:	dd400515 	stw	r21,20(sp)
    1b78:	dd000415 	stw	r20,16(sp)
    1b7c:	dcc00315 	stw	r19,12(sp)
    1b80:	dc800215 	stw	r18,8(sp)
    1b84:	dc400115 	stw	r17,4(sp)
    1b88:	dc000015 	stw	r16,0(sp)
    1b8c:	2025883a 	mov	r18,r4
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    1b90:	00800034 	movhi	r2,0
    1b94:	108ddb04 	addi	r2,r2,14188
    1b98:	14400017 	ldw	r17,0(r2)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    1b9c:	102b883a 	mov	r21,r2
    1ba0:	88801626 	beq	r17,r2,1bfc <alt_find_file+0x90>
    1ba4:	053fffc4 	movi	r20,-1
    1ba8:	04c00bc4 	movi	r19,47
  {
    len = strlen(next->name);
    1bac:	8c000217 	ldw	r16,8(r17)
    1bb0:	8009883a 	mov	r4,r16
    1bb4:	0001d7c0 	call	1d7c <strlen>
    1bb8:	1007883a 	mov	r3,r2
    
    if (next->name[len-1] == '/')
    1bbc:	8085883a 	add	r2,r16,r2
    1bc0:	1505883a 	add	r2,r2,r20
    1bc4:	10800007 	ldb	r2,0(r2)
    1bc8:	14c0011e 	bne	r2,r19,1bd0 <alt_find_file+0x64>
    {
      len -= 1;
    1bcc:	1d07883a 	add	r3,r3,r20
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    1bd0:	1c85883a 	add	r2,r3,r18
    1bd4:	10800007 	ldb	r2,0(r2)
    1bd8:	14c00126 	beq	r2,r19,1be0 <alt_find_file+0x74>
    1bdc:	1000051e 	bne	r2,zero,1bf4 <alt_find_file+0x88>
    1be0:	8009883a 	mov	r4,r16
    1be4:	900b883a 	mov	r5,r18
    1be8:	180d883a 	mov	r6,r3
    1bec:	0001d080 	call	1d08 <memcmp>
    1bf0:	10000326 	beq	r2,zero,1c00 <alt_find_file+0x94>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    1bf4:	8c400017 	ldw	r17,0(r17)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    1bf8:	8d7fec1e 	bne	r17,r21,1bac <alt_find_file+0x40>
    1bfc:	0023883a 	mov	r17,zero
  }
  
  /* No match found */
  
  return NULL;     
}
    1c00:	8805883a 	mov	r2,r17
    1c04:	dfc00617 	ldw	ra,24(sp)
    1c08:	dd400517 	ldw	r21,20(sp)
    1c0c:	dd000417 	ldw	r20,16(sp)
    1c10:	dcc00317 	ldw	r19,12(sp)
    1c14:	dc800217 	ldw	r18,8(sp)
    1c18:	dc400117 	ldw	r17,4(sp)
    1c1c:	dc000017 	ldw	r16,0(sp)
    1c20:	dec00704 	addi	sp,sp,28
    1c24:	f800283a 	ret

00001c28 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    1c28:	000b883a 	mov	r5,zero
    1c2c:	00c00034 	movhi	r3,0
    1c30:	18cc7404 	addi	r3,r3,12752
    1c34:	02000304 	movi	r8,12
    1c38:	02400034 	movhi	r9,0
    1c3c:	4a4ddf04 	addi	r9,r9,14204
    1c40:	01c00044 	movi	r7,1
    1c44:	01800804 	movi	r6,32
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  {
    if (!alt_fd_list[i].dev)
    1c48:	18800017 	ldw	r2,0(r3)
    1c4c:	10000c1e 	bne	r2,zero,1c80 <alt_get_fd+0x58>
    {
      alt_fd_list[i].dev = dev;
    1c50:	2a05383a 	mul	r2,r5,r8
    1c54:	00c00034 	movhi	r3,0
    1c58:	18cc7404 	addi	r3,r3,12752
    1c5c:	10c5883a 	add	r2,r2,r3
    1c60:	11000015 	stw	r4,0(r2)
      if (i > alt_max_fd)
    1c64:	48800017 	ldw	r2,0(r9)
    1c68:	11400216 	blt	r2,r5,1c74 <alt_get_fd+0x4c>
    1c6c:	2805883a 	mov	r2,r5
    1c70:	f800283a 	ret
      {
        alt_max_fd = i;
    1c74:	49400015 	stw	r5,0(r9)
    1c78:	2805883a 	mov	r2,r5
    1c7c:	f800283a 	ret
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    1c80:	29cb883a 	add	r5,r5,r7
    1c84:	1a07883a 	add	r3,r3,r8
    1c88:	29bfef1e 	bne	r5,r6,1c48 <alt_get_fd+0x20>
    1c8c:	00bffa04 	movi	r2,-24
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
}
    1c90:	f800283a 	ret

00001c94 <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
    1c94:	2007883a 	mov	r3,r4
    1c98:	00840004 	movi	r2,4096
    1c9c:	1140012e 	bgeu	r2,r5,1ca4 <alt_icache_flush+0x10>
    1ca0:	100b883a 	mov	r5,r2
    1ca4:	194b883a 	add	r5,r3,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    1ca8:	1940042e 	bgeu	r3,r5,1cbc <alt_icache_flush+0x28>
    1cac:	00800804 	movi	r2,32
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    1cb0:	1800603a 	flushi	r3
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    1cb4:	1887883a 	add	r3,r3,r2
    1cb8:	197ffd36 	bltu	r3,r5,1cb0 <alt_icache_flush+0x1c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    1cbc:	208007cc 	andi	r2,r4,31
    1cc0:	10000126 	beq	r2,zero,1cc8 <alt_icache_flush+0x34>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    1cc4:	1800603a 	flushi	r3
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    1cc8:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    1ccc:	f800283a 	ret

00001cd0 <exit>:
    1cd0:	defffe04 	addi	sp,sp,-8
    1cd4:	000b883a 	mov	r5,zero
    1cd8:	dc000015 	stw	r16,0(sp)
    1cdc:	dfc00115 	stw	ra,4(sp)
    1ce0:	2021883a 	mov	r16,r4
    1ce4:	0001df40 	call	1df4 <__call_exitprocs>
    1ce8:	00800034 	movhi	r2,0
    1cec:	108de404 	addi	r2,r2,14224
    1cf0:	11000017 	ldw	r4,0(r2)
    1cf4:	20800f17 	ldw	r2,60(r4)
    1cf8:	10000126 	beq	r2,zero,1d00 <exit+0x30>
    1cfc:	103ee83a 	callr	r2
    1d00:	8009883a 	mov	r4,r16
    1d04:	0001fa40 	call	1fa4 <_exit>

00001d08 <memcmp>:
    1d08:	00c000c4 	movi	r3,3
    1d0c:	1980032e 	bgeu	r3,r6,1d1c <memcmp+0x14>
    1d10:	2144b03a 	or	r2,r4,r5
    1d14:	10c4703a 	and	r2,r2,r3
    1d18:	10000f26 	beq	r2,zero,1d58 <memcmp+0x50>
    1d1c:	31ffffc4 	addi	r7,r6,-1
    1d20:	3000061e 	bne	r6,zero,1d3c <memcmp+0x34>
    1d24:	00000a06 	br	1d50 <memcmp+0x48>
    1d28:	39ffffc4 	addi	r7,r7,-1
    1d2c:	00bfffc4 	movi	r2,-1
    1d30:	21000044 	addi	r4,r4,1
    1d34:	29400044 	addi	r5,r5,1
    1d38:	38800526 	beq	r7,r2,1d50 <memcmp+0x48>
    1d3c:	20c00003 	ldbu	r3,0(r4)
    1d40:	28800003 	ldbu	r2,0(r5)
    1d44:	18bff826 	beq	r3,r2,1d28 <memcmp+0x20>
    1d48:	1885c83a 	sub	r2,r3,r2
    1d4c:	f800283a 	ret
    1d50:	0005883a 	mov	r2,zero
    1d54:	f800283a 	ret
    1d58:	180f883a 	mov	r7,r3
    1d5c:	20c00017 	ldw	r3,0(r4)
    1d60:	28800017 	ldw	r2,0(r5)
    1d64:	18bfed1e 	bne	r3,r2,1d1c <memcmp+0x14>
    1d68:	31bfff04 	addi	r6,r6,-4
    1d6c:	21000104 	addi	r4,r4,4
    1d70:	29400104 	addi	r5,r5,4
    1d74:	39bff936 	bltu	r7,r6,1d5c <memcmp+0x54>
    1d78:	003fe806 	br	1d1c <memcmp+0x14>

00001d7c <strlen>:
    1d7c:	208000cc 	andi	r2,r4,3
    1d80:	2011883a 	mov	r8,r4
    1d84:	1000161e 	bne	r2,zero,1de0 <strlen+0x64>
    1d88:	20c00017 	ldw	r3,0(r4)
    1d8c:	017fbff4 	movhi	r5,65279
    1d90:	297fbfc4 	addi	r5,r5,-257
    1d94:	01e02074 	movhi	r7,32897
    1d98:	39e02004 	addi	r7,r7,-32640
    1d9c:	1945883a 	add	r2,r3,r5
    1da0:	11c4703a 	and	r2,r2,r7
    1da4:	00c6303a 	nor	r3,zero,r3
    1da8:	1886703a 	and	r3,r3,r2
    1dac:	18000c1e 	bne	r3,zero,1de0 <strlen+0x64>
    1db0:	280d883a 	mov	r6,r5
    1db4:	380b883a 	mov	r5,r7
    1db8:	21000104 	addi	r4,r4,4
    1dbc:	20800017 	ldw	r2,0(r4)
    1dc0:	1187883a 	add	r3,r2,r6
    1dc4:	1946703a 	and	r3,r3,r5
    1dc8:	0084303a 	nor	r2,zero,r2
    1dcc:	10c4703a 	and	r2,r2,r3
    1dd0:	103ff926 	beq	r2,zero,1db8 <strlen+0x3c>
    1dd4:	20800007 	ldb	r2,0(r4)
    1dd8:	10000326 	beq	r2,zero,1de8 <strlen+0x6c>
    1ddc:	21000044 	addi	r4,r4,1
    1de0:	20800007 	ldb	r2,0(r4)
    1de4:	103ffd1e 	bne	r2,zero,1ddc <strlen+0x60>
    1de8:	2205c83a 	sub	r2,r4,r8
    1dec:	f800283a 	ret

00001df0 <register_fini>:
    1df0:	f800283a 	ret

00001df4 <__call_exitprocs>:
    1df4:	00800034 	movhi	r2,0
    1df8:	108de404 	addi	r2,r2,14224
    1dfc:	10800017 	ldw	r2,0(r2)
    1e00:	defff304 	addi	sp,sp,-52
    1e04:	df000b15 	stw	fp,44(sp)
    1e08:	d8800115 	stw	r2,4(sp)
    1e0c:	00800034 	movhi	r2,0
    1e10:	10800004 	addi	r2,r2,0
    1e14:	1005003a 	cmpeq	r2,r2,zero
    1e18:	d8800215 	stw	r2,8(sp)
    1e1c:	d8800117 	ldw	r2,4(sp)
    1e20:	dd400815 	stw	r21,32(sp)
    1e24:	dd000715 	stw	r20,28(sp)
    1e28:	10805204 	addi	r2,r2,328
    1e2c:	dfc00c15 	stw	ra,48(sp)
    1e30:	ddc00a15 	stw	r23,40(sp)
    1e34:	dd800915 	stw	r22,36(sp)
    1e38:	dcc00615 	stw	r19,24(sp)
    1e3c:	dc800515 	stw	r18,20(sp)
    1e40:	dc400415 	stw	r17,16(sp)
    1e44:	dc000315 	stw	r16,12(sp)
    1e48:	282b883a 	mov	r21,r5
    1e4c:	2039883a 	mov	fp,r4
    1e50:	d8800015 	stw	r2,0(sp)
    1e54:	2829003a 	cmpeq	r20,r5,zero
    1e58:	d8800117 	ldw	r2,4(sp)
    1e5c:	14405217 	ldw	r17,328(r2)
    1e60:	88001026 	beq	r17,zero,1ea4 <__call_exitprocs+0xb0>
    1e64:	ddc00017 	ldw	r23,0(sp)
    1e68:	88800117 	ldw	r2,4(r17)
    1e6c:	8c802204 	addi	r18,r17,136
    1e70:	143fffc4 	addi	r16,r2,-1
    1e74:	80000916 	blt	r16,zero,1e9c <__call_exitprocs+0xa8>
    1e78:	05bfffc4 	movi	r22,-1
    1e7c:	a000151e 	bne	r20,zero,1ed4 <__call_exitprocs+0xe0>
    1e80:	8409883a 	add	r4,r16,r16
    1e84:	2105883a 	add	r2,r4,r4
    1e88:	1485883a 	add	r2,r2,r18
    1e8c:	10c02017 	ldw	r3,128(r2)
    1e90:	a8c01126 	beq	r21,r3,1ed8 <__call_exitprocs+0xe4>
    1e94:	843fffc4 	addi	r16,r16,-1
    1e98:	85bff81e 	bne	r16,r22,1e7c <__call_exitprocs+0x88>
    1e9c:	d8800217 	ldw	r2,8(sp)
    1ea0:	10003126 	beq	r2,zero,1f68 <__call_exitprocs+0x174>
    1ea4:	dfc00c17 	ldw	ra,48(sp)
    1ea8:	df000b17 	ldw	fp,44(sp)
    1eac:	ddc00a17 	ldw	r23,40(sp)
    1eb0:	dd800917 	ldw	r22,36(sp)
    1eb4:	dd400817 	ldw	r21,32(sp)
    1eb8:	dd000717 	ldw	r20,28(sp)
    1ebc:	dcc00617 	ldw	r19,24(sp)
    1ec0:	dc800517 	ldw	r18,20(sp)
    1ec4:	dc400417 	ldw	r17,16(sp)
    1ec8:	dc000317 	ldw	r16,12(sp)
    1ecc:	dec00d04 	addi	sp,sp,52
    1ed0:	f800283a 	ret
    1ed4:	8409883a 	add	r4,r16,r16
    1ed8:	88c00117 	ldw	r3,4(r17)
    1edc:	2105883a 	add	r2,r4,r4
    1ee0:	1445883a 	add	r2,r2,r17
    1ee4:	18ffffc4 	addi	r3,r3,-1
    1ee8:	11800217 	ldw	r6,8(r2)
    1eec:	1c001526 	beq	r3,r16,1f44 <__call_exitprocs+0x150>
    1ef0:	10000215 	stw	zero,8(r2)
    1ef4:	303fe726 	beq	r6,zero,1e94 <__call_exitprocs+0xa0>
    1ef8:	00c00044 	movi	r3,1
    1efc:	1c06983a 	sll	r3,r3,r16
    1f00:	90804017 	ldw	r2,256(r18)
    1f04:	8cc00117 	ldw	r19,4(r17)
    1f08:	1884703a 	and	r2,r3,r2
    1f0c:	10001426 	beq	r2,zero,1f60 <__call_exitprocs+0x16c>
    1f10:	90804117 	ldw	r2,260(r18)
    1f14:	1884703a 	and	r2,r3,r2
    1f18:	10000c1e 	bne	r2,zero,1f4c <__call_exitprocs+0x158>
    1f1c:	2105883a 	add	r2,r4,r4
    1f20:	1485883a 	add	r2,r2,r18
    1f24:	11400017 	ldw	r5,0(r2)
    1f28:	e009883a 	mov	r4,fp
    1f2c:	303ee83a 	callr	r6
    1f30:	88800117 	ldw	r2,4(r17)
    1f34:	98bfc81e 	bne	r19,r2,1e58 <__call_exitprocs+0x64>
    1f38:	b8800017 	ldw	r2,0(r23)
    1f3c:	147fd526 	beq	r2,r17,1e94 <__call_exitprocs+0xa0>
    1f40:	003fc506 	br	1e58 <__call_exitprocs+0x64>
    1f44:	8c000115 	stw	r16,4(r17)
    1f48:	003fea06 	br	1ef4 <__call_exitprocs+0x100>
    1f4c:	2105883a 	add	r2,r4,r4
    1f50:	1485883a 	add	r2,r2,r18
    1f54:	11000017 	ldw	r4,0(r2)
    1f58:	303ee83a 	callr	r6
    1f5c:	003ff406 	br	1f30 <__call_exitprocs+0x13c>
    1f60:	303ee83a 	callr	r6
    1f64:	003ff206 	br	1f30 <__call_exitprocs+0x13c>
    1f68:	88800117 	ldw	r2,4(r17)
    1f6c:	1000081e 	bne	r2,zero,1f90 <__call_exitprocs+0x19c>
    1f70:	89000017 	ldw	r4,0(r17)
    1f74:	20000726 	beq	r4,zero,1f94 <__call_exitprocs+0x1a0>
    1f78:	b9000015 	stw	r4,0(r23)
    1f7c:	8809883a 	mov	r4,r17
    1f80:	00000000 	call	0 <__reset>
    1f84:	bc400017 	ldw	r17,0(r23)
    1f88:	883fb71e 	bne	r17,zero,1e68 <__call_exitprocs+0x74>
    1f8c:	003fc506 	br	1ea4 <__call_exitprocs+0xb0>
    1f90:	89000017 	ldw	r4,0(r17)
    1f94:	882f883a 	mov	r23,r17
    1f98:	2023883a 	mov	r17,r4
    1f9c:	883fb21e 	bne	r17,zero,1e68 <__call_exitprocs+0x74>
    1fa0:	003fc006 	br	1ea4 <__call_exitprocs+0xb0>

00001fa4 <_exit>:
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    1fa4:	20000226 	beq	r4,zero,1fb0 <_exit+0xc>
    ALT_SIM_FAIL();
    1fa8:	002af070 	cmpltui	zero,zero,43969
    1fac:	00000106 	br	1fb4 <_exit+0x10>
  } else {
    ALT_SIM_PASS();
    1fb0:	002af0b0 	cmpltui	zero,zero,43970
    1fb4:	003fff06 	br	1fb4 <_exit+0x10>
    1fb8:	00001df0 	cmpltui	zero,zero,119
